<?xml version='1.0' encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2010, Red Hat Inc. or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Inc.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->

<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../Hibernate_Getting_Started_Guide.ent">
%BOOK_ENTITIES;

]>

<preface id="hibernate-gsg-preface">
    <title>Preface</title>

    <!--
        NOTE : This duplicates a lot of the information in the manual preface.  This is a great example of where the
        "content reuse" capabilities of DITA could be leveraged.
    -->

    <para>
        Working with both Object-Oriented software and Relational Databases can be cumbersome and time consuming.
        Development costs are significantly higher due to a paradigm mismatch between how data is represented in
        objects versus relational databases.  Hibernate is an Object/Relational Mapping solution for Java environments.
        The term Object/Relational Mapping refers to the technique of mapping data from an object model representation
        to a relational data model representation (and visa versa).  See
        <ulink url="http://en.wikipedia.org/wiki/Object-relational_mapping"/> for a good high-level discussion.
    </para>

    <note>
        <para>
            While having a strong background in SQL is not required to use Hibernate, having a basic understanding of
            the concepts can greatly help you understand Hibernate more fully and quickly.  Probably the single
            best background is an understanding of data modeling principles.  You might want to consider these resources
            as a good starting point:
            <itemizedlist>
                <listitem>
                    <para>
                        <ulink url="http://www.agiledata.org/essays/dataModeling101.html"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <ulink url="http://en.wikipedia.org/wiki/Data_modeling"/>
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </note>

    <para>
        Hibernate not only takes care of the mapping from Java classes to database tables (and from Java data types to
        SQL data types), but also provides data query and retrieval facilities. It can significantly reduce
        development time otherwise spent with manual data handling in SQL and JDBC.  Hibernateâ€™s design goal is to
        relieve the developer from 95% of common data persistence-related programming tasks by eliminating the need for
        manual, hand-crafted data processing using SQL and JDBC.  However, unlike many other persistence solutions,
        Hibernate does not hide the power of SQL from you and guarantees that your investment in relational technology
        and knowledge is as valid as always.
    </para>

    <para>
        Hibernate may not be the best solution for data-centric applications that only use stored-procedures to
        implement the business logic in the database, it is most useful with object-oriented domain models and business
        logic in the Java-based middle-tier. However, Hibernate can certainly help you to remove or encapsulate
        vendor-specific SQL code and will help with the common task of result set translation from a tabular
        representation to a graph of objects.
    </para>

</preface>
