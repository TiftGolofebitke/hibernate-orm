<?xml version="1.0" encoding="Shift_JIS"?>
<chapter id="batch">
    <title>バッチ処理</title>
    
    <para>
        Hibernateを使ってデータベースに100,000行を挿入する愚直な方法は、このようなものです：
    </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
for ( int i=0; i<100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
}
tx.commit();
session.close();]]></programlisting>

    <para>
        これは50,000番目の行のあたりで <literal>OutOfMemoryException</literal> で失敗するでしょう。
        Hibernateがセッションレベルキャッシュで、
        新しく挿入されたすべての <literal>Customer</literal> 
        インスタンスをキャッシュするからです。
    </para>

    <para>
        この章では、この問題を回避する方法を紹介します。
        しかしバッチ処理をするなら、JDBCバッチが使用可能であることが非常に重要です。
        そうでなければ手頃なパフォーマンスが得られません。
        JDBCバッチサイズを手頃な数値（例えば、10から50）に設定してください：
    </para>
    
<programlisting><![CDATA[hibernate.jdbc.batch_size 20]]></programlisting>

    <para>
        また二次キャッシュが全く効かないプロセスで、
        このような作業をしたいと思うかもしれません：
    </para>

<programlisting><![CDATA[hibernate.cache.use_second_level_cache false]]></programlisting>

    <para>
        しかし、これは絶対に必要というわけではありません。
        なぜなら明示的に <literal>CacheMode</literal> を設定して、
        二次キャッシュとの相互作用を無効にすることができるからです。
       
    </para>

    <sect1 id="batch-inserts">
        <title>バッチ挿入</title>

        <para>
            新しいオブジェクトを永続化するとき、一次キャッシュのサイズを制限するため、
            セッションを <literal>flush()</literal> して <literal>clear()</literal> 
            しなければなりません。
        </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
   
for ( int i=0; i<100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
    if ( i % 20 == 0 ) { //20, same as the JDBC batch size
        //flush a batch of inserts and release memory:
        session.flush();
        session.clear();
    }
}
   
tx.commit();
session.close();]]></programlisting>

    </sect1>

    <sect1 id="batch-update" >
        <title>バッチ更新</title>

        <para>
            データを復元したり更新したりするには同じアイディアを適用します。
            それに加えて、データの行を多く返すクエリに対して有効な
            サーバーサイドのカーソルの利点を生かしたければ 
            <literal>scroll()</literal> を使う必要があります。
        </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
   
ScrollableResults customers = session.getNamedQuery("GetCustomers")
    .setCacheMode(CacheMode.IGNORE)
    .scroll(ScrollMode.FORWARD_ONLY);
int count=0;
while ( customers.next() ) {
    Customer customer = (Customer) customers.get(0);
    customer.updateStuff(...);
    if ( ++count % 20 == 0 ) {
        //flush a batch of updates and release memory:
        session.flush();
        session.clear();
    }
}
   
tx.commit();
session.close();]]></programlisting>

    </sect1>

    <sect1 id="batch-statelesssession">
        <title>
        StatelessSessionインターフェイス
        </title>
        
        <para>
            また別の方法として、Hibernateはコマンド指向のAPIを用意しています。
            これは分離オブジェクトの形で、
            データベースとのデータストリームのやり取りに使うことができます。
            <literal>StatelessSession</literal> は関連する永続コンテキストを持たず、
            高レベルのライフサイクルセマンティクスの多くを提供しません。
            特にステートレスセッションは、一時キャッシュを実装せず、
            またどのような二次キャッシュやクエリキャッシュとも相互作用しません。
            トランザクショナルなwrite-behindや自動ダーティチェックも実装しません。
            ステートレスセッションを使って行われる操作が、
            関連するインスタンスへカスケードされることは決してありません。
            コレクションは、ステートレスセッションからは無視されます。
            ステートレスセッションを通して行われる操作は、
            Hibernateのイベントモデルやインターセプタの影響を受けません。
            一時キャッシュを持たないため、
            ステートレスセッションは別名を持つデータに上手く対処できません。
            ステートレスセッションは低レベルの抽象化であり、JDBCに非常によく似ています。
            
        </para>

<programlisting><![CDATA[StatelessSession session = sessionFactory.openStatelessSession();
Transaction tx = session.beginTransaction();
   
ScrollableResults customers = session.getNamedQuery("GetCustomers")
    .scroll(ScrollMode.FORWARD_ONLY);
while ( customers.next() ) {
    Customer customer = (Customer) customers.get(0);
    customer.updateStuff(...);
    session.update(customer);
}
   
tx.commit();
session.close();]]></programlisting>

        <para>
            このコード例では、クエリが返す <literal>Customer</literal> 
            インスタンスは即座に（セッションから）分離されることに注意してください。
            これは、どのような永続コンテキストとも決して関連しません。
            
        </para>
        
        <para>
            <literal>StatelessSession</literal> インターフェイスで定義されている 
            <literal>insert(), update(), delete()</literal> は、
            低レベルの直接的なデータベース操作と考えられます。
            結果として、SQLの <literal>INSERT, UPDATE, DELETE</literal> がそれぞれ即座に実行されます。
            このように、これらは <literal>Session</literal> インターフェイスで定義されている 
            <literal>save(), saveOrUpdate(), delete()</literal> 
            とは非常に異なる意味を持ちます。
            
        </para>

    </sect1>

    <sect1 id="batch-direct" revision="3">
        <title>
        DMLスタイルの操作
        </title>

        <para>
            すでに議論したように、自動的かつ透過的なオブジェクト/リレーショナルマッピングは、
            オブジェクトの状態の管理であると考えられます。
            これはメモリ内のオブジェクトの状態を利用できるということです。
            そのため（SQLの <literal>データ操作言語</literal> (DML) 文：
            <literal>INSERT</literal>, <literal>UPDATE</literal>, <literal>DELETE</literal> 
            を使って）データベース内のデータを直接操作しても、
            メモリ内の状態には影響を与えません。
            しかしHibernateは、バルクSQLスタイルのDML文実行に対応するメソッドを用意しています。
            これはHibernateクエリ言語（<xref linkend="queryhql">HQL</xref>）
            を通して実行されます。
            
        </para>

        <para>
            <literal>UPDATE</literal> と <literal>DELETE</literal> 文の疑似構文は：
            <literal>( UPDATE | DELETE ) FROM? エンティティ名 (WHERE 条件節)?</literal> です。
            注意すべき点がいくつかあります：
            
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    from節において、FROMキーワードはオプションです。
                </para>
            </listitem>
            <listitem>
                <para>
                    from節では単一のエンティティ名だけが可能で、
                    任意で別名を付けることができます。
                    エンティティ名に別名が与えられると、どのようなプロパティ参照も、
                    その別名を使って修飾しなければなりません。
                    もしエンティティ名に別名が与えられなければ、
                    どのようなプロパティ参照も修飾してはなりません。
                    
                </para>
            </listitem>
            <listitem>
                <para>
                （暗黙的であれ明示的であれ）<xref linkend="queryhql-joins-forms">結合</xref> 
                をバルクHQLクエリ内で指定することはできません。
                サブクエリはwhere節で使うことができます
                サブクエリそのものは、結合を含められます。
                
                </para>
            </listitem>
            <listitem>
                <para>
                    where節はオプションです。
                </para>
            </listitem>
        </itemizedlist>

        <para>
            例として、HQLの <literal>UPDATE</literal> を実行するには、
            <literal>Query.executeUpdate()</literal> メソッドを使ってください。
            （このメソッドはおなじみのJDBC <literal>PreparedStatement.executeUpdate()</literal> 
            から名付けられました）：
            d
        </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlUpdate = "update Customer c set c.name = :newName where c.name = :oldName";
// or String hqlUpdate = "update Customer set name = :newName where name = :oldName";
int updatedEntities = s.createQuery( hqlUpdate )
        .setString( "newName", newName )
        .setString( "oldName", oldName )
        .executeUpdate();
tx.commit();
session.close();]]></programlisting>

        <para>
            HQLの <literal>UPDATE</literal> 文は、デフォルトでは、作用するエンティティの 
            <xref linkend="mapping-declaration-version">version</xref> や 
            <xref linkend="mapping-declaration-timestamp">timestamp</xref> 
            プロパティの値には影響しません。
            これはEJB3の仕様にも受け継がれています。
            しかし <literal>versioned update</literal> を使って、
            <literal>version</literal> や <literal>timestamp</literal> 
            プロパティの値を強制的にリセットさせることができます。
            これは <literal>UPDATE</literal> キーワードの後に <literal>VERSIONED</literal> 
            キーワードを追加することで行えます。
            
        </para>
<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
String hqlVersionedUpdate = "update versioned Customer set name = :newName where name = :oldName";
int updatedEntities = s.createQuery( hqlUpdate )
        .setString( "newName", newName )
        .setString( "oldName", oldName )
        .executeUpdate();
tx.commit();
session.close();]]></programlisting>

        <para>
            カスタムバージョン型（<literal>org.hibernate.usertype.UserVersionType</literal>）
            は <literal>update versioned</literal> 文と一緒に使えないことに注意してください。
        </para>

        <para>
            HQLの <literal>DELETE</literal> を実行するには、
            同じ <literal>Query.executeUpdate()</literal> メソッドを使ってください：
            
        </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlDelete = "delete Customer c where c.name = :oldName";
// or String hqlDelete = "delete Customer where name = :oldName";
int deletedEntities = s.createQuery( hqlDelete )
        .setString( "oldName", oldName )
        .executeUpdate();
tx.commit();
session.close();]]></programlisting>

        <para>
            <literal>Query.executeUpdate()</literal> メソッドが返す <literal>int</literal> 
            の値は、この操作が影響を及ぼしたエンティティの数です。
            これが影響するデータベース内の行数と、相互に関係するかどうかを考えてみてください。
            HQLバルク操作は、結果として、実際のSQL文が複数実行されることになります。
            例えばjoined-subclassです。
            返される数は、その文によって影響された実際のエンティティの数を示します。
            joined-subclassの例に戻ると、サブクラスの一つに対する削除は、
            そのサブクラスがマッピングされたテーブルだけではなく、
            「ルート」テーブルと継承階層をさらに下ったjoined-subclassのテーブルの削除になります。
        </para>

        <para>
            <literal>INSERT</literal> 文の疑似構文は：
            <literal>INSERT INTO エンティティ名 プロパティリスト select文</literal> です。
            注意すべき点がいくつかあります：
            
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    INSERT INTO ... SELECT ... の形式だけがサポートされています。
                    INSERT INTO ... VALUES ... の形式はサポートされていません。
                </para>
                <para>
                    プロパティリストは、SQLの <literal>INSERT</literal> 文における <literal>カラムの仕様</literal> 
                    に類似しています。
                    継承のマッピングに含まれるエンティティに対して、
                    クラスレベルで直接定義されたプロパティだけが、プロパティリストに使えます。
                    スーパークラスのプロパティは認められず、サブクラスのプロパティは効果がありません。
                    言い換えると <literal>INSERT</literal> 文は、本質的にポリモーフィックではありません。
                    
                </para>
            </listitem>
            <listitem>
                <para>
                    select文の返り値の型がinsert文が期待する型とマッチしていれば、
                    そのselect文は妥当なHQL selectクエリとなりえます。
                    現在このチェックをデータベースへ任せるのではなく、クエリのコンパイル時にチェックします。
                    このことは、<emphasis>equal</emphasis>とは違い、
                    Hibernateの <literal>Type</literal> 間の <emphasis>equivalent</emphasis> に関する
                    問題を引き起こすことに注意してください。
                    これは <literal>org.hibernate.type.DataType</literal> として定義されたプロパティと、
                    <literal>org.hibernate.type.TimestampType</literal> 
                    として定義されたプロパティの間のミスマッチの問題を引き起こします。
                    データベースがそれらを区別できなくても、変換することができても、この問題は発生します。
                </para>
            </listitem>
            <listitem>
                <para>
                    idプロパティに対して、insert文には二つの選択肢があります。
                    プロパティリストで明示的にidプロパティを指定するか
                    （この場合、対応するselect式から値が取られます）、
                    プロパティリストから除外するか
                    （この場合、生成される値が使われます）のいずれかです。
                    後者の選択肢は、データベース内を操作するidジェネレータを使うときのみ、利用可能です。
                    この選択肢を採る場合、「インメモリ」型のジェネレータを使うと、構文解析時に例外が発生します。
                    この議論では、インデータベース型ジェネレータは <literal>org.hibernate.id.SequenceGenerator</literal> 
                    （とそのサブクラス）と、<literal>org.hibernate.id.PostInsertIdentifierGenerator</literal> 
                    の実装であると考えています。
                    ここで最も注意すべき例外は、<literal>org.hibernate.id.TableHiLoGenerator</literal> です。
                    値を取得する選択可能な方法がないため、このジェネレータを使うことはできません。
                    
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>version</literal> や <literal>timestamp</literal> としてマッピングされるプロパティに対して、
                    insert文には二つの選択肢があります。
                    プロパティリストで明示的にプロパティを指定するか
                    （この場合、対応するselect式から値が取られます）、
                    プロパティリストから除外するか
                    （この場合、<literal>org.hibernate.type.VersionType</literal> で定義された 
                    <literal>シード値</literal> が使われます）のいずれかです。
                    
                </para>
            </listitem>
        </itemizedlist>

        <para>
            HQLの <literal>INSERT</literal> 文の実行例です：
            
        </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlInsert = "insert into DelinquentAccount (id, name) select c.id, c.name from Customer c where ...";
int createdEntities = s.createQuery( hqlInsert )
        .executeUpdate();
tx.commit();
session.close();]]></programlisting>

    </sect1>

</chapter>
