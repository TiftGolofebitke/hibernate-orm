<?xml version="1.0" encoding="Shift_JIS"?>
<chapter id="components">
    <title>コンポーネントのマッピング</title>

    <para>
        <emphasis>コンポーネント</emphasis> の概念は、Hibernateを通して様々な状況の中で
        異なる目的のために再利用されます。
    </para>

    <sect1 id="components-dependentobjects" revision="2" >
        <title>依存オブジェクト</title>

        <para>
            コンポーネントは、エンティティの参照ではなく値型として永続化された、
            包含されたオブジェクトです。コンポーネントという言葉については、コンポジションという
            オブジェクト指向の概念を参照してください（アーキテクチャレベルのコンポーネントではありません）。
            例えば、以下のPersonモデルのようなものです。
        </para>

        <programlisting><![CDATA[public class Person {
    private java.util.Date birthday;
    private Name name;
    private String key;
    public String getKey() {
        return key;
    }
    private void setKey(String key) {
        this.key=key;
    }
    public java.util.Date getBirthday() {
        return birthday;
    }
    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }
    public Name getName() {
        return name;
    }
    public void setName(Name name) {
        this.name = name;
    }
    ......
    ......
}]]></programlisting>

<programlisting><![CDATA[public class Name {
    char initial;
    String first;
    String last;
    public String getFirst() {
        return first;
    }
    void setFirst(String first) {
        this.first = first;
    }
    public String getLast() {
        return last;
    }
    void setLast(String last) {
        this.last = last;
    }
    public char getInitial() {
        return initial;
    }
    void setInitial(char initial) {
        this.initial = initial;
    }
}]]></programlisting>

        <para>
            いま、<literal>Name</literal> は <literal>Person</literal> のコンポーネントとして
            永続化することが出来ます。ここで <literal>Name</literal> は永続化属性に対してgetter、
            setterメソッドを定義しますが、インターフェイスや識別子プロパティを定義する必要が
            ないことに注意して下さい。
        </para>

        <para>
            マッピング定義は以下のようになります。
        </para>

        <programlisting><![CDATA[<class name="eg.Person" table="person">
    <id name="Key" column="pid" type="string">
        <generator class="uuid"/>
    </id>
    <property name="birthday" type="date"/>
    <component name="Name" class="eg.Name"> <!-- class attribute optional -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </component>
</class>]]></programlisting>

        <para>
            Personテーブルは <literal>pid</literal>、
            <literal>birthday</literal>、
            <literal>initial</literal>、
            <literal>first</literal>、
            <literal>last</literal> カラムを持ちます。
        </para>

        <para>
            全ての値型のように、コンポーネントは参照の共有をすることができません。
            言い換えると、二人のPersonは同じ名前を持つことができますが、二つのPersonオブジェクトは
            "値が同じだけ"の別々のnameオブジェクトを含んでいるということです。
            コンポーネントのnull値のセマンティクスは <emphasis>アドホック</emphasis> です。
            コンポーネントのオブジェクトを再読み込みする際、Hibernateはコンポーネントのすべてのカラムが
            nullであるならコンポーネント自体がnullであると考えます。
            これは大抵の場合問題ありません。

        </para>

        <para>
            コンポーネントの属性はどんなHibernateの型でも構いません（コレクション、many-to-one関連、
            他のコンポーネントなど）。ネストされたコンポーネントは滅多に使わないと考えるべきでは
             <emphasis>ありません</emphasis> 。Hibernateは非常にきめの細かいオブジェクトモデルをサポートするように意図されています。
        </para>

        <para>
            <literal>&lt;component&gt;</literal> 要素は親エンティティへの逆参照として、コンポーネントクラスの
            属性をマッピングする <literal>&lt;parent&gt;</literal> サブ要素を使用できます。
        </para>

        <programlisting><![CDATA[<class name="eg.Person" table="person">
    <id name="Key" column="pid" type="string">
        <generator class="uuid"/>
    </id>
    <property name="birthday" type="date"/>
    <component name="Name" class="eg.Name" unique="true">
        <parent name="namedPerson"/> <!-- reference back to the Person -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </component>
</class>]]></programlisting>

    </sect1>

    <sect1 id="components-incollections" revision="1">
        
        <title>従属するオブジェクトのコレクション</title>

        <para>
            Hibernateはコンポーネントのコレクションをサポートしています（例えば <literal>Name</literal> 型の配列）。
            <literal>&lt;element&gt;</literal> タグを <literal>&lt;composite-element&gt;</literal> タグに取り替えることにより
            コンポーネントコレクションを宣言してください。
        </para>

        <programlisting><![CDATA[<set name="someNames" table="some_names" lazy="true">
    <key column="id"/>
    <composite-element class="eg.Name"> <!-- class attribute required -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </composite-element>
</set>]]></programlisting>

        <para>
            注意: コンポジットエレメントの <literal>Set</literal> を定義したなら、
            <literal>equals()</literal> と <literal>hashCode()</literal> を正しく実装することが重要です。
        </para>

        <para>
            コンポジットエレメントはコレクションを含まず、コンポーネントを含むこともあります。
            コンポジットエレメント自身がコンポーネントを含んでいる場合は <literal>&lt;nested-composite-element&gt;</literal> を
            使用してください。コンポーネントのコレクション自身がコンポーネントを持つというケースはめったにありません。
            この段階までに、one-to-many関連の方がより適切でないかと熟考してください。
            コンポジットエレメントをエンティティとして再度モデリングしてみてください。
            しかしこれはJavaのモデルとしては同じですが、リレーショナルモデルと永続動作はまだ若干異なることに注意してください。
        </para>

        <para>
            もし <literal>&lt;set&gt;</literal> を使用するのであれば、コンポジットエレメントのマッピングがnull値が可能な
            属性をサポートしていないことに注意してください。Hibernateはオブジェクトを削除するとき、
            レコードを識別するためにそれぞれのカラムの値を使用する必要があるため、null値を持つことが出来ません
            （コンポジットエレメントテーブルには別の主キーカラムはありません）。
            コンポジットエレメントにnot-nullの属性のみを使用するか、または <literal>&lt;list&gt;</literal>、<literal>&lt;map&gt;</literal>、
            <literal>&lt;bag&gt;</literal>、<literal>&lt;idbag&gt;</literal> を選択する必要があります。
        </para>

        <para>
            コンポジットエレメントの特別なケースとして、ネストされた <literal>&lt;many-to-one&gt;</literal> 属性を持つ
            コンポジットエレメントがあります。
            このマッピングは、コンポジットエレメントクラスを多対多関連テーブルの
            余分なカラムへマッピングします。
            次の例は <literal>Order</literal> から、<literal>Item</literal> への多対多関連です。
             <literal>purchaseDate</literal>、<literal>price</literal>、<literal>quantity</literal> は関連の属性となります。
        </para>

        <programlisting><![CDATA[<class name="eg.Order" .... >
    ....
    <set name="purchasedItems" table="purchase_items" lazy="true">
        <key column="order_id">
        <composite-element class="eg.Purchase">
            <property name="purchaseDate"/>
            <property name="price"/>
            <property name="quantity"/>
            <many-to-one name="item" class="eg.Item"/> <!-- class attribute is optional -->
        </composite-element>
    </set>
</class>]]></programlisting>

        <para>
            もちろん、双方向関連のナビゲーションのために反対側からpurchaseへの参照を作ることは出来ません。
            コンポーネントは値型であり、参照を共有できないことを覚えておいてください。
            一つの <literal>Purchase</literal> は一つの <literal>Order</literal> のsetに存在できますが、
            同時に <literal>Item</literal> から参照することは出来ません。
        </para>

        <para>
              3項関連（あるいは4項など）も可能です。
        </para>

        <programlisting><![CDATA[<class name="eg.Order" .... >
    ....
    <set name="purchasedItems" table="purchase_items" lazy="true">
        <key column="order_id">
        <composite-element class="eg.OrderLine">
            <many-to-one name="purchaseDetails" class="eg.Purchase"/>
            <many-to-one name="item" class="eg.Item"/>
        </composite-element>
    </set>
</class>]]></programlisting>

        <para>
            コンポジットエレメントは他のエンティティへの関連として、
            同じシンタックスを使っているクエリ内で使用できます。
        </para>

    </sect1>

    <sect1 id="components-asmapindex">
        <title>Mapのインデックスとしてのコンポーネント</title>

        <para>
            <literal>&lt;composite-map-key&gt;</literal> 要素は <literal>Map</literal> のキーとしてコンポーネントクラスを
            マッピングします。コンポーネントクラス上で <literal>hashCode()</literal> と <literal>equals()</literal>
            を正確にオーバーライドしてください。
        </para>
    </sect1>

    <sect1 id="components-compositeid" revision="1">
        <title>複合識別子としてのコンポーネント</title>

        <para>
            コンポーネントをエンティティクラスの識別子として使うことができます。
            コンポーネントクラスは以下の条件を満たす必要があります。
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    <literal>java.io.Serializable</literal> を実装しなければなりません。
                </para>
            </listitem>
            <listitem>
                <para>
                    データベース上の複合キーの等価性と矛盾のないように、<literal>equals()</literal> 
                    と <literal>hashCode()</literal> を再実装しなければなりません。
                </para>
            </listitem>
        </itemizedlist>
        
        <para>
            <emphasis>注意: Hibernate3において、2番目の条件は絶対的な条件ではありません。
                  しかしとにかく条件を満たしてください。
            </emphasis> 

        </para>

        <para>
            複合キーを生成するために <literal>IdentifierGenerator</literal> を使用することはできません。
            代わりにアプリケーションが識別子を割り当てなくてはなりません。
        </para>

        <para>
            通常の <literal>&lt;id&gt;</literal> 宣言の代わりに <literal>&lt;composite-id&gt;</literal> タグを
            （ネストされた <literal>&lt;key-property&gt;</literal> 属性と共に）使います。
            以下の例では、<literal>OrderLine</literal> クラスは <literal>Order</literal> の（複合）主キーに
            依存した主キーを持っています。
        </para>

        <programlisting><![CDATA[<class name="OrderLine">
    
    <composite-id name="id" class="OrderLineId">
        <key-property name="lineId"/>
        <key-property name="orderId"/>
        <key-property name="customerId"/>
    </composite-id>
    
    <property name="name"/>
    
    <many-to-one name="order" class="Order"
            insert="false" update="false">
        <column name="orderId"/>
        <column name="customerId"/>
    </many-to-one>
    ....
    
</class>]]></programlisting>

        <para>
            このとき、<literal>OrderLine</literal> テーブルへ関連する外部キーもまた複合です。
            他のクラスのマッピングでこれを宣言しなければなりません。
            <literal>OrderLine</literal> への関連は次のようにマッピングされます。
        </para>

        <programlisting><![CDATA[<many-to-one name="orderLine" class="OrderLine">
<!-- the "class" attribute is optional, as usual -->
    <column name="lineId"/>
    <column name="orderId"/>
    <column name="customerId"/>
</many-to-one>]]></programlisting>

        <para>
            （<literal>&lt;column&gt;</literal> タグはどこであっても <literal>column</literal> 属性の
              代わりになります。）
        </para>
        
        <para>
            <literal>OrderLine</literal> への <literal>many-to-many</literal> 関連も
            複合外部キーを使います。
        </para>
    
    <programlisting><![CDATA[<set name="undeliveredOrderLines">
    <key column name="warehouseId"/>
    <many-to-many class="OrderLine">
        <column name="lineId"/>
        <column name="orderId"/>
        <column name="customerId"/>
    </many-to-many>
</set>]]></programlisting>

        <para>
            <literal>Order</literal> にある <literal>OrderLine</literal> のコレクションは
            次のものを使用します。
        </para>

    <programlisting><![CDATA[<set name="orderLines" inverse="true">
    <key>
        <column name="orderId"/>
        <column name="customerId"/>
    </key>
    <one-to-many class="OrderLine"/>
</set>]]></programlisting>

        <para>
            （<literal>&lt;one-to-many&gt;</literal> 属性は、例によってカラムを宣言しません）
        </para>
        
        <para>
            <literal>OrderLine</literal> 自身がコレクションを持っている場合、
            同時に複合外部キーも持っています。
        </para>

        <programlisting><![CDATA[<class name="OrderLine">
    ....
    ....
    <list name="deliveryAttempts">
        <key>   <!-- a collection inherits the composite key type -->
            <column name="lineId"/>
            <column name="orderId"/>
            <column name="customerId"/>
        </key>
        <list-index column="attemptId" base="1"/>
        <composite-element class="DeliveryAttempt">
            ...
        </composite-element>
    </set>
</class>]]></programlisting>

    </sect1>

    <sect1 id="components-dynamic" revision="1">
        <title>動的コンポーネント</title>

        <para>
            <literal>Map</literal> 型のプロパティのマッピングも可能です。
        </para>

    <programlisting><![CDATA[<dynamic-component name="userAttributes">
    <property name="foo" column="FOO" type="string"/>
    <property name="bar" column="BAR" type="integer"/>
    <many-to-one name="baz" class="Baz" column="BAZ_ID"/>
</dynamic-component>]]></programlisting>

        <para>
            <literal>&lt;dynamic-component&gt;</literal> マッピングのセマンティクスは <literal>&lt;component&gt;</literal> 
            と同一のものです。この種のマッピングの利点は、マッピングドキュメントの編集により、配置時にbeanの属性を
            決定できる点です。また、DOMパーサを利用して、マッピングドキュメントのランタイム操作が可能です。
            さらに、<literal>Configuration</literal> オブジェクト経由でHibernateのコンフィグレーション時のメタモデルに
            アクセス（または変更）が可能です。
        </para>

    </sect1>

</chapter>
