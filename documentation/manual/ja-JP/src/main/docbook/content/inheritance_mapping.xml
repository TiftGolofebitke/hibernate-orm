<?xml version="1.0" encoding="Shift_JIS"?>
<chapter id="inheritance">
    <title>継承マッピング</title>

    <sect1 id="inheritance-strategies" revision="3">
        <title>3つの戦略</title>

        <para>
            Hibernateは3つの基本的な継承のマッピング戦略をサポートします。
        </para>

        <itemizedlist>
        <listitem>
        <para>
            クラス階層ごとのテーブル（table-per-class-hierarchy）
        </para>
        </listitem>
        <listitem>
        <para>
            サブクラスごとのテーブル（table-per-subclass）
        </para>
        </listitem>
        <listitem>
        <para>
            具象クラスごとのテーブル（table-per-concrete-class）
        </para>
        </listitem>
        </itemizedlist>
        
        <para>
            加えて4つ目に、Hibernateはわずかに異なる性質を持ったポリモーフィズムをサポートします。
        </para>

        <itemizedlist>
        <listitem>
        <para>
            暗黙的ポリモーフィズム
        </para>
        </listitem>
        </itemizedlist>
        
        <para>
            同一の継承階層の異なるブランチに対して異なるマッピング戦略を使うことができます。
            その場合には全体の階層に渡るポリモーフィズムを実現するために暗黙的ポリモーフィズムを使用します。
            しかし、Hibernateは同じルート <literal>&lt;class&gt;</literal> 要素内で
            <literal>&lt;subclass&gt;</literal> マッピング、<literal>&lt;joined-subclass&gt;</literal> マッピング、
            <literal>&lt;union-subclass&gt;</literal> マッピングの同時使用をサポートしていません。
            <literal>&lt;subclass&gt;</literal> 要素と <literal>&lt;join&gt;</literal> 要素を組み合わせることで、
            同一 <literal>&lt;class&gt;</literal> 要素内での table-per-hierarchy 戦略と
            table-per-subclass 戦略の同時使用は可能です。次の例を見てください。
        </para>

        <para>
             <literal>subclass</literal>, <literal>union-subclass</literal> と 
             <literal>joined-subclass</literal> マッピングを複数のマッピングドキュメントに定義することが出来、
             <literal>hibernate-mapping</literal> の直下に配置します。
             これは新しいマッピングファイルを追加するだけで、クラス階層を拡張できるということです。
             あらかじめマップしたスーパークラスを指定して、サブクラスマッピングに <literal>extends</literal> 
             属性を記述しなければなりません。
             注意：この特徴により、以前はマッピング・ドキュメントの順番が重要でした。
             Hibernate3からは、extendsキーワードを使う場合、マッピングドキュメントの順番は問題になりません。
             
             １つのマッピングファイル内で順番付けを行うときは、
             依然として、サブクラスを定義する前にスーパークラスを定義する必要があります。)
         </para>

         <programlisting><![CDATA[
 <hibernate-mapping>
     <subclass name="DomesticCat" extends="Cat" discriminator-value="D">
          <property name="name" type="string"/>
     </subclass>
 </hibernate-mapping>]]></programlisting>


        <sect2 id="inheritance-tableperclass" >
        <title>クラス階層ごとのテーブル（table-per-class-hierarchy）</title>

        <para>
            例えば、インターフェイス <literal>Payment</literal> と、それを実装した
            <literal>CreditCardPayment</literal>、<literal>CashPayment</literal>、
            <literal>ChequePayment</literal> があるとします。階層ごとのテーブルマッピングは
            以下のようになります。
        </para>

        <programlisting><![CDATA[<class name="Payment" table="PAYMENT">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="native"/>
    </id>
    <discriminator column="PAYMENT_TYPE" type="string"/>
    <property name="amount" column="AMOUNT"/>
    ...
    <subclass name="CreditCardPayment" discriminator-value="CREDIT">
        <property name="creditCardType" column="CCTYPE"/>
        ...
    </subclass>
    <subclass name="CashPayment" discriminator-value="CASH">
        ...
    </subclass>
    <subclass name="ChequePayment" discriminator-value="CHEQUE">
        ...
    </subclass>
</class>]]></programlisting>

        <para>
            ちょうど一つのテーブルが必要です。
            このマッピング戦略には一つ大きな制限があります。
            <literal>CCTYPE</literal> のような、サブクラスで宣言されたカラムは <literal>NOT NULL</literal> 
            制約を持てません。
        </para>
        
        </sect2>

        <sect2 id="inheritance-tablepersubclass">
        <title>サブクラスごとのテーブル（table-per-subclass）</title>

        <para>
            table-per-subclass マッピングは以下のようになります。
        </para>

        <programlisting><![CDATA[<class name="Payment" table="PAYMENT">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="native"/>
    </id>
    <property name="amount" column="AMOUNT"/>
    ...
    <joined-subclass name="CreditCardPayment" table="CREDIT_PAYMENT">
        <key column="PAYMENT_ID"/>
        <property name="creditCardType" column="CCTYPE"/>
        ...
    </joined-subclass>
    <joined-subclass name="CashPayment" table="CASH_PAYMENT">
        <key column="PAYMENT_ID"/>
        ...
    </joined-subclass>
    <joined-subclass name="ChequePayment" table="CHEQUE_PAYMENT">
        <key column="PAYMENT_ID"/>
        ...
    </joined-subclass>
</class>]]></programlisting>

        <para>
            このマッピングには4つのテーブルが必要です。3つのサブクラステーブルは
            スーパークラステーブルとの関連を示す主キーを持っています
            （実際、関係モデル上は一対一関連です）。
        </para>

        </sect2>

        <sect2 id="inheritance-tablepersubclass-discriminator" revision="2">
        <title>弁別子を用いた table-per-subclass</title>

        <para>
            Hibernateの table-per-subclass 実装は、discriminatorカラムを必要としないことを覚えておいてください。
            Hibernate以外のO/Rマッパーは、table-per-subclass に異なる実装を用います。
            それは、スーパークラスのテーブルにタイプdiscriminatorカラムを必要とします。
            このアプローチは実装が困難になりますが、関係の視点から見ると、より正確なものです。
            table-per-subclass 戦略でdiscriminatorカラムを使いたければ、
            <literal>&lt;subclass&gt;</literal> と <literal>&lt;join&gt;</literal> 
            を以下のように組み合わせて使ってください。
        </para>

        <programlisting><![CDATA[<class name="Payment" table="PAYMENT">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="native"/>
    </id>
    <discriminator column="PAYMENT_TYPE" type="string"/>
    <property name="amount" column="AMOUNT"/>
    ...
    <subclass name="CreditCardPayment" discriminator-value="CREDIT">
        <join table="CREDIT_PAYMENT">
            <key column="PAYMENT_ID"/>
            <property name="creditCardType" column="CCTYPE"/>
            ...
        </join>
    </subclass>
    <subclass name="CashPayment" discriminator-value="CASH">
        <join table="CASH_PAYMENT">
            <key column="PAYMENT_ID"/>
            ...
        </join>
    </subclass>
    <subclass name="ChequePayment" discriminator-value="CHEQUE">
        <join table="CHEQUE_PAYMENT" fetch="select">
            <key column="PAYMENT_ID"/>
            ...
        </join>
    </subclass>
</class>]]></programlisting>

        <para>
            オプションの <literal>fetch="select"</literal> 宣言は、
            スーパークラスのクエリ実行時に外部結合を使って、
            サブクラスの <literal>ChequePayment</literal> データを取得しないように指定するためのものです。
        </para>

        </sect2>

        <sect2 id="inheritance-mixing-tableperclass-tablepersubclass">
        <title>table-per-subclass と table-per-class-hierarchy の混合</title>

        <para>
            このアプローチを使用すると、table-per-hierarchy と table-per-subclass 戦略を
            組み合わせる事も可能です。
        </para>

        <programlisting><![CDATA[<class name="Payment" table="PAYMENT">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="native"/>
    </id>
    <discriminator column="PAYMENT_TYPE" type="string"/>
    <property name="amount" column="AMOUNT"/>
    ...
    <subclass name="CreditCardPayment" discriminator-value="CREDIT">
        <join table="CREDIT_PAYMENT">
            <property name="creditCardType" column="CCTYPE"/>
            ...
        </join>
    </subclass>
    <subclass name="CashPayment" discriminator-value="CASH">
        ...
    </subclass>
    <subclass name="ChequePayment" discriminator-value="CHEQUE">
        ...
    </subclass>
</class>]]></programlisting>

        <para>
            いずれのマッピング戦略であっても、ルートである <literal>Payment</literal> クラスへの
            ポリモーフィックな関連は <literal>&lt;many-to-one&gt;</literal> を使ってマッピングします。
        </para>

        <programlisting><![CDATA[<many-to-one name="payment" column="PAYMENT_ID" class="Payment"/>]]></programlisting>
    
        </sect2>

        <sect2 id="inheritance-tableperconcrete" revision="2">
        <title>具象クラスごとのテーブル（table-per-concrete-class）</title>

        <para>
            table-per-concrete-class 戦略のマッピングに対するアプローチは、2つあります。
            1つ目は <literal>&lt;union-subclass&gt;</literal> を利用する方法です。
        </para>

        <programlisting><![CDATA[<class name="Payment">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="sequence"/>
    </id>
    <property name="amount" column="AMOUNT"/>
    ...
    <union-subclass name="CreditCardPayment" table="CREDIT_PAYMENT">
        <property name="creditCardType" column="CCTYPE"/>
        ...
    </union-subclass>
    <union-subclass name="CashPayment" table="CASH_PAYMENT">
        ...
    </union-subclass>
    <union-subclass name="ChequePayment" table="CHEQUE_PAYMENT">
        ...
    </union-subclass>
</class>]]></programlisting>

        <para>
            サブクラスごとに3つのテーブルが必要です。それぞれのテーブルは、継承プロパティを含んだ、
            クラスの全てのプロパティに対するカラムを定義します。
        </para>
        
        <para>
            このアプローチには制限があります。
            それは、プロパティがスーパークラスにマッピングされていた場合、
            全てのサブクラスにおいてカラム名が同じでなければならないというものです。
           （Hibernateの今後のリリースで緩和されるかもしれません）。
            &lt;union-subclass&gt; を使った table-per-concrete-class 戦略では識別子生成戦略を使用できません。
            主キーを生成するためのシードは、全ての union subclass の階層内で共有する必要があるからです。
        </para>

        <para>
            もしスーパークラスが抽象クラスなら、<literal>abstract="true"</literal>とマッピングします。
            もちろん、スーパークラスが抽象クラスでないなら、スーパークラスのインスタンスを
            保持するためのテーブルの追加が必要となります(上の例でのデフォルトは <literal>PAYMENT</literal> )。
        </para>

        </sect2>

        <sect2 id="inheritance-tableperconcreate-polymorphism">
        <title>暗黙的ポリモーフィズムを用いた table-per-concrete-class</title>

        <para>
            もう一つのアプローチは暗黙的ポリモーフィズムの使用です。
        </para>

        <programlisting><![CDATA[<class name="CreditCardPayment" table="CREDIT_PAYMENT">
    <id name="id" type="long" column="CREDIT_PAYMENT_ID">
        <generator class="native"/>
    </id>
    <property name="amount" column="CREDIT_AMOUNT"/>
    ...
</class>

<class name="CashPayment" table="CASH_PAYMENT">
    <id name="id" type="long" column="CASH_PAYMENT_ID">
        <generator class="native"/>
    </id>
    <property name="amount" column="CASH_AMOUNT"/>
    ...
</class>

<class name="ChequePayment" table="CHEQUE_PAYMENT">
    <id name="id" type="long" column="CHEQUE_PAYMENT_ID">
        <generator class="native"/>
    </id>
    <property name="amount" column="CHEQUE_AMOUNT"/>
    ...
</class>]]></programlisting>
           
        <para>
            <literal>Payment</literal> インターフェイスがどこにも明示的に示されていないことに注意してください。
            そして、<literal>Payment</literal> プロパティがそれぞれのサブクラスにマッピングされていることにも注意してください。
            もし重複を避けたいのであれば、XMLエンティティの利用を考えてください。
            （例： <literal>DOCTYPE</literal> 宣言における <literal>[ &lt;!ENTITY allproperties SYSTEM "allproperties.xml"&gt; ]</literal>
              と、マッピングにおける <literal>&amp;allproperties;</literal>）
        </para>
        
        <para>
            このアプローチの欠点は、Hibernateがポリモーフィックなクエリの実行時にSQL <literal>UNION</literal> 
            を生成しない点です。
        </para>

        <para>
            このマッピング戦略に対しては、<literal>Payment</literal> へのポリモーフィックな関連は
            通常、<literal>&lt;any&gt;</literal> を使ってマッピングされます。
        </para>

        <programlisting><![CDATA[<any name="payment" meta-type="string" id-type="long">
    <meta-value value="CREDIT" class="CreditCardPayment"/>
    <meta-value value="CASH" class="CashPayment"/>
    <meta-value value="CHEQUE" class="ChequePayment"/>
    <column name="PAYMENT_CLASS"/>
    <column name="PAYMENT_ID"/>
</any>]]></programlisting>
           
        </sect2>

        <sect2 id="inheritace-mixingpolymorphism">
        <title>他の継承マッピングと暗黙的ポリモーフィズムの組み合わせ</title>

        <para>
            このマッピングについての更なる注意点があります。
            サブクラスが自身を <literal>&lt;class&gt;</literal> 要素としてマッピングしているので、
            （かつ <literal>Payment</literal> は単なるインターフェイスなので）、
            それぞれのサブクラスは簡単にその他の継承階層の一部となります。
            （しかも、今までどおり <literal>Payment</literal> インターフェイスに対するポリモーフィックなクエリ
            を使用することができます）
       </para>

        <programlisting><![CDATA[<class name="CreditCardPayment" table="CREDIT_PAYMENT">
    <id name="id" type="long" column="CREDIT_PAYMENT_ID">
        <generator class="native"/>
    </id>
    <discriminator column="CREDIT_CARD" type="string"/>
    <property name="amount" column="CREDIT_AMOUNT"/>
    ...
    <subclass name="MasterCardPayment" discriminator-value="MDC"/>
    <subclass name="VisaPayment" discriminator-value="VISA"/>
</class>

<class name="NonelectronicTransaction" table="NONELECTRONIC_TXN">
    <id name="id" type="long" column="TXN_ID">
        <generator class="native"/>
    </id>
    ...
    <joined-subclass name="CashPayment" table="CASH_PAYMENT">
        <key column="PAYMENT_ID"/>
        <property name="amount" column="CASH_AMOUNT"/>
        ...
    </joined-subclass>
    <joined-subclass name="ChequePayment" table="CHEQUE_PAYMENT">
        <key column="PAYMENT_ID"/>
        <property name="amount" column="CHEQUE_AMOUNT"/>
        ...
    </joined-subclass>
</class>]]></programlisting>

        <para>
            もう一度述べますが、<literal>Payment</literal> は明示的に定義されません。
            もし、<literal>Payment</literal> インターフェイスに対してクエリを実行するなら
            （例えば <literal>from Payment</literal> 節を使って）、
            Hibernateは自動的に <literal>CreditCardPayment</literal> 
            （とCreditCardPaymentのサブクラス、<literal>Payment</literal> の実装であるため）、
            および、<literal>CashPayment</literal> 、<literal>ChequePayment</literal> 
            のインスタンスを返します。
            <literal>NonelectronicTransaction</literal> インスタンスは返しません。
        </para>
        
        </sect2>

    </sect1>

    <sect1 id="inheritance-limitations">
        <title>制限</title>

        <para>
            table-per-concrete-class マッピング戦略への「暗黙的ポリモーフィズム」アプローチには
            いくつかの制限があります。<literal>&lt;union-subclass&gt;</literal> マッピングに対しても
            少し弱めの制限があります。
        </para>

        <para>
            次のテーブルに、Hibernateにおけるtable-per-concrete-classマッピングの
            制限や暗黙的ポリモーフィズムの制限を示します。
        </para>
            
        <table frame="topbot">
            <title>継承マッピングの機能</title>
            <tgroup cols='8' align='left' colsep='1' rowsep='1'>
            <colspec colname='c1' colwidth="1*"/>
            <colspec colname='c2' colwidth="1*"/>
            <colspec colname='c3' colwidth="1*"/>
            <colspec colname='c4' colwidth="1*"/>
            <colspec colname='c5' colwidth="1*"/>
            <colspec colname='c6' colwidth="1*"/>
            <colspec colname='c7' colwidth="1*"/>
            <colspec colname='c8' colwidth="1*"/>
            <thead>
            <row>
              <entry>継承戦略</entry>
              <entry>多対一のポリモーフィズム</entry>
              <entry>一対一のポリモーフィズム</entry>
              <entry>一対多のポリモーフィズム</entry>
              <entry>多対多のポリモーフィズム</entry>
              <entry>ポリモーフィズムを使った<literal>load()/get()</literal></entry>
              <entry>ポリモーフィズムを使ったクエリ</entry>
              <entry>ポリモーフィズムを使った結合</entry>
              <entry>外部結合によるフェッチ</entry>
            </row>
            </thead>
            <tbody>
            <row>
                <entry>table per class-hierarchy</entry>
                <entry><literal>&lt;many-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-many&gt;</literal></entry>
                <entry><literal>&lt;many-to-many&gt;</literal></entry>
                <entry><literal>s.get(Payment.class, id)</literal></entry>
                <entry><literal>from Payment p</literal></entry>
                <entry><literal>from Order o join o.payment p</literal></entry>
                <entry><emphasis>サポート</emphasis></entry>
            </row>
            <row>
                <entry>table per subclass</entry>
                <entry><literal>&lt;many-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-many&gt;</literal></entry>
                <entry><literal>&lt;many-to-many&gt;</literal></entry>
                <entry><literal>s.get(Payment.class, id)</literal></entry>
                <entry><literal>from Payment p</literal></entry>
                <entry><literal>from Order o join o.payment p</literal></entry>
                <entry><emphasis>サポート</emphasis></entry>
            </row>
            <row>
                <entry>table per concrete-class (union-subclass)</entry>
                <entry><literal>&lt;many-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-many&gt;</literal> (for <literal>inverse="true"</literal> only)</entry>
                <entry><literal>&lt;many-to-many&gt;</literal></entry>
                <entry><literal>s.get(Payment.class, id)</literal></entry>
                <entry><literal>from Payment p</literal></entry>
                <entry><literal>from Order o join o.payment p</literal></entry>
                <entry><emphasis>サポート</emphasis></entry>
            </row>
            <row>
                <entry>table per concrete class (implicit polymorphism)</entry>
                <entry><literal>&lt;any&gt;</literal></entry>
                <entry><emphasis>サポートしていません</emphasis></entry>
                <entry><emphasis>サポートしていません</emphasis></entry>
                <entry><literal>&lt;many-to-any&gt;</literal></entry>
                <entry><literal>s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()</literal></entry>
                <entry><literal>from Payment p</literal></entry>
                <entry><emphasis>サポートしていません</emphasis></entry>
                <entry><emphasis>サポートしていません</emphasis></entry>
            </row>
            </tbody>
            </tgroup>
        </table>

    </sect1>

</chapter>
