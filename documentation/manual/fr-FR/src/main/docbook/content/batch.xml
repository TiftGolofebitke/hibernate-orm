<?xml version="1.0" encoding="iso-8859-1"?>
<chapter id="batch">
    <title>Traitement par paquet</title>

    <para>
        Une approche naïve pour insérer 100 000 lignes dans la base de données en utilisant
        Hibernate pourrait ressembler à ça :
    </para>

    <programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
for ( int i=0; i<100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
}
tx.commit();
session.close();]]></programlisting>

    <para>
        Ceci devrait s'écrouler avec une <literal>OutOfMemoryException</literal> quelque
        part aux alentours de la 50 000ème ligne. C'est parce qu'Hibernate cache toutes
        les instances de <literal>Customer</literal> nouvellement insérées dans le cache
        de second niveau.
    </para>

    <para>
        Dans ce chapitre nous montrerons comment éviter ce problème. D'abord, cependant,
        si vous faites des traitements par batch, il est absolument critique que vous
        activiez l'utilisation ds paquet JDBC (NdT : JDBC batching), si vous avez l'intention
        d'obtenir des performances raisonnables. Configurez la taille du paquet JDBC avec un
        nombre raisonnable (disons, 10-50) :
    </para>

    <programlisting><![CDATA[hibernate.jdbc.batch_size 20]]></programlisting>

    <para>
        Vous pourriez aussi vouloir faire cette sorte de travail dans un traitement où
        l'interaction avec le cache de second niveau est complètement désactivé :
    </para>

    <programlisting><![CDATA[hibernate.cache.use_second_level_cache false]]></programlisting>

    <sect1 id="batch-inserts">
        <title>Insertions en paquet</title>

        <para>
            Lorsque vous rendez des nouveaux objets persistants, vous devez régulièrement appeler
            <literal>flush()</literal> et puis <literal>clear()</literal> sur la session,
            pour contrôler la taille du cache de premier niveau.
        </para>

        <programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

for ( int i=0; i<100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
    if ( i % 20 == 0 ) { //20, même taille que la taille du paquet JDBC
        //flush un paquet d'insertions et libère la mémoire :
        session.flush();
        session.clear();
    }
}

tx.commit();
session.close();]]></programlisting>

    </sect1>

    <sect1 id="batch-update" >
        <title>Paquet de mises à jour</title>

        <para>
            Pour récupérer et mettre à jour des données les mêmes idées s'appliquent. En plus,
            vous avez besoin d'utiliser <literal>scroll()</literal> pour tirer partie des
            curseurs côté serveur pour les requêtes qui retournent beaucoup de lignes de données.
        </para>

        <programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

ScrollableResults customers = session.getNamedQuery("GetCustomers")
    .setCacheMode(CacheMode.IGNORE)
    .scroll(ScrollMode.FORWARD_ONLY);
int count=0;
while ( customers.next() ) {
    Customer customer = (Customer) customers.get(0);
    customer.updateStuff(...);
    if ( ++count % 20 == 0 ) {
        //flush un paquet de mises à jour et libère la mémoire :
        session.flush();
        session.clear();
    }
}

tx.commit();
session.close();]]></programlisting>

    </sect1>

    <sect1 id="batch-statelesssession">
        <title>L'interface StatelessSession</title>
        <para>
            Alternativement, Hibernate fournit une API orientée commande qui peut être
            utilisée avec des flux de données pour et en provenance de la base de données
            sous la forme d'objets détachés. Une <literal>StatelessSession</literal> n'a pas
            de contexte de persistance associé et ne fournit pas beaucoup de sémantique de
            durée de vie de haut niveau. En particulier, une session sans état n'implémente
            pas de cache de premier niveau et n'interagit pas non plus avec un cache de
            seconde niveau ou un cache de requêtes. Elle n'implémente pas les transactions
            ou la vérification sale automatique (NdT : automatic dirty checking). Les
            opérations réalisées avec une session sans état ne sont jamais répercutées
            en cascade sur les instances associées. Les collections sont ignorées par une
            session sans état. Les opérations exécutées via une session sans état outrepasse
            le modèle d'événements d'Hibernate et les intercepteurs. Les sessions sans état sont
            vulnérables aux effets de modification des données, ceci est dû au manque de cache
            de premier niveau. Une session sans état est une abstraction bas niveau, plus
            proche de la couche JDBC sous-jacente.
        </para>

        <programlisting><![CDATA[StatelessSession session = sessionFactory.openStatelessSession();
Transaction tx = session.beginTransaction();

ScrollableResults customers = session.getNamedQuery("GetCustomers")
    .scroll(ScrollMode.FORWARD_ONLY);
while ( customers.next() ) {
    Customer customer = (Customer) customers.get(0);
    customer.updateStuff(...);
    session.update(customer);
}

tx.commit();
session.close();]]></programlisting>

        <para>
            Notez que dans le code de l'exemple, les intances de <literal>Customer</literal>
            retournées par la requête sont immédiatement détachées. Elles ne sont jamais
            associées à un contexte de persistance.
        </para>

        <para>
            Les opérations <literal>insert()</literal>, <literal>update()</literal> et
            <literal>delete()</literal> définies par l'interface <literal>StatelessSession</literal>
            sont considérées comme des opérations d'accès direct aux lignes de la base de données,
            ce qui résulte en une exécution immédiate du SQL <literal>INSERT</literal>, <literal>UPDATE</literal>
            ou <literal>DELETE</literal> respectif. De là, elles ont des sémantiques tres différentes des
            opérations <literal>save()</literal>, <literal>saveOrUpdate()</literal>
            et <literal>delete()</literal> définies par l'interface <literal>Session</literal>.
        </para>

    </sect1>

    <sect1 id="batch-direct" revision="2">
        <title>Opérations de style DML</title>

        <para>
            Comme déjà discuté avant, le mapping objet/relationnel automatique et transparent
            est intéressé par la gestion de l'état de l'objet. Ceci implique que l'état de l'objet
            est disponible en mémoire, d'où manipuler (en utilisant des expressions du langage de
            manipulation de données - <literal>Data Manipulation Language</literal> (DML) - SQL)
            les données directement dans la base n'affectera pas l'état en mémoire. Pourtant, Hibernate
            fournit des méthodes pour l'exécution d'expression DML de style SQL lesquelles sont
            réalisées à travers le langage de requête d'Hibernate (<xref linkend="queryhql">HQL</xref>).
        </para>

        <para>
            La pseudo-syntaxe pour les expressions <literal>UPDATE</literal> et <literal>DELETE</literal>
            est : <literal>( UPDATE | DELETE ) FROM? EntityName (WHERE where_conditions)?</literal>.
            Certains points sont à noter :
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    Dans la clause from, le mot-clef FROM est optionnel
                </para>
            </listitem>
            <listitem>
                <para>
                    Il ne peut y avoir qu'une seule entité nommée dans la clause from ; elle peut
                    optionnellement avoir un alias. Si le nom de l'entité a un alias, alors
                    n'importe quelle référence de propriété doit être qualifiée en ayant un alias ;
                    si le nom de l'entité n'a pas d'alias, alors il est illégal pour n'importe quelle
                    référence de propriété d'être qualifiée.
                </para>
            </listitem>
            <listitem>
                <para>
                    Aucune jointure (implicite ou explicite) ne peut être spécifiée dans une requête HQL.
                    Les sous-requêtes peuvent être utilisées dans la clause where ; les sous-requêtes,
                    elles-mêmes, peuvent contenir des jointures.
                </para>
            </listitem>
            <listitem>
                <para>
                    La clause where est aussi optionnelle.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Par exemple, pour exécuter un <literal>UPDATE</literal> HQL, utilisez la méthode
            <literal>Query.executeUpdate()</literal> (la méthode est données pour ceux
            qui sont familiers avec <literal>PreparedStatement.executeUpdate()</literal> de
            JDBC) :
        </para>

        <programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlUpdate = "update Customer c set c.name = :newName where c.name = :oldName";
// ou String hqlUpdate = "update Customer set name = :newName where name = :oldName";
int updatedEntities = s.createQuery( hqlUpdate )
        .setString( "newName", newName )
        .setString( "oldName", oldName )
        .executeUpdate();
tx.commit();
session.close();]]></programlisting>

        <para>
            Pour exécuter un <literal>DELETE</literal> HQL, utilisez la même méthode
            <literal>Query.executeUpdate()</literal> :
        </para>

        <programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlDelete = "delete Customer c where c.name = :oldName";
// or String hqlDelete = "delete Customer where name = :oldName";
int deletedEntities = s.createQuery( hqlDelete )
        .setString( "oldName", oldName )
        .executeUpdate();
tx.commit();
session.close();]]></programlisting>

        <para>
            La valeur du <literal>int</literal> retourné par la méthode <literal>Query.executeUpdate()</literal>
            indique le nombre d'entités affectées par l'opération. Considérez que cela peut ou pas
            corréler le nombre de lignes affectés dans la base de données. Une opération HQL
            pourrait entraîner l'exécution de multiples expressions SQL réelles, pour des classes
            filles mappées par jointure (NdT: join-subclass), par exemple. Le nombre retourné
            indique le nombre d'entités réelles affectées par l'expression. Retour à l'exemple de la
            classe fille mappée par jointure, un effacement d'une des classes filles peut réellement
            entraîner des suppressions pas seulement dans la table qui mappe la classe fille, mais
            aussi dans la table "racine" et potentillement dans les tables des classes filles plus bas
            dans la hiérarchie d'héritage.
        </para>

        <para>
            La pseudo-syntaxe pour l'expression <literal>INSERT</literal> est :
            <literal>INSERT INTO EntityName properties_list select_statement</literal>. Quelques
            points sont à noter :
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    Seule la forme INSERT INTO ... SELECT ... est supportée ; pas la forme INSERT INTO ... VALUES ... .
                </para>
                <para>
                    La properties_list est analogue à la <literal>spécification de la colonne</literal>

                    The properties_list is analogous to the <literal>column speficiation</literal> dans
                    l'expression SQL <literal>INSERT</literal>. Pour les entités impliquées dans
                    un héritage mappé, seules les propriétés directement définies à ce niveau de classe
                    donné peuvent être utilisées dans properties_list. Les propriétés de la classe mère
                    ne sont pas permises ; et les propriétés des classes filles n'ont pas de sens. En
                    d'autres mots, les expressions <literal>INSERT</literal> par nature non polymorphiques.
                </para>
            </listitem>
            <listitem>
                <para>
                    select_statement peut être n'importe quelle requête de sélection HQl valide, avec
                    l'avertissement que les types de retour doivent correspondre aux types attendus par
                    l'insertion. Actuellement, c'est vérifié durant la compilation de la requête plutôt
                    que la vérification soit reléguée à la base de données. Notez cependant que cela
                    pourrait poser des problèmes entre les <literal>Type</literal>s d'Hibernate qui
                    sont <emphasis>équivalents</emphasis> opposé à <emphasis>égaux</emphasis>. Cela
                    pourrait poser des problèmes avec des disparités entre une propriété définie
                    comme un <literal>org.hibernate.type.DateType</literal> et une propriété définie
                    comme un <literal>org.hibernate.type.TimestampType</literal>, même si la base de données
                    ne ferait pas de distinction ou ne serait pas capable de gérer la conversion.
                </para>
            </listitem>
            <listitem>
                <para>
                    Pour la propriéte id, l'expression d'insertion vous donne deux options. Vous
                    pouvez soit spécifier explicitement la propriété id dans properties_list
                    (auquel cas sa valeur est extraite de l'expression de sélection correspondante),
                    soit l'omettre de properties_list (auquel cas une valeur générée est utilisée).
                    Cette dernière option est seulement disponible en utilisant le générateur d'identifiant
                    qui opère dans la base de données ; tenter d'utiliser cette option avec n'importe quel
                    type de générateur "en mémoire" causera une exception durant l'analyse. Notez
                    que pour les buts de cette discussion, les générateurs "en base" sont considérés
                    être <literal>org.hibernate.id.SequenceGenerator</literal> (et ses classes filles)
                    et n'importe quelles implémentations de
                    <literal>org.hibernate.id.PostInsertIdentifierGenerator</literal>.
                    L'exception la plus notable ici est <literal>org.hibernate.id.TableHiLoGenerator</literal>,
                    qu ne peut pas être utilisée parce qu'il ne propose pas un moyen de d'exposer ses valeurs
                    par un select.
                </para>
            </listitem>
            <listitem>
                <para>
                    Pour des propriétés mappées comme <literal>version</literal> ou <literal>timestamp</literal>,
                    l'expression d'insertion vous donne deux options. Vous pouvez soit spécifier la propriété dans
                    properties_list (auquel cas sa valeur est extraite des expressions select correspondantes),
                    soit l'omettre de properties_list (auquel cas la <literal>valeur de graine</literal>
                    (NdT : seed value) définie par le <literal>org.hibernate.type.VersionType</literal> est utilisée).
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Un exemple d'exécution d'une expression <literal>INSERT</literal> HQL :
        </para>

        <programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlInsert = "insert into DelinquentAccount (id, name) select c.id, c.name from Customer c where ...";
int createdEntities = s.createQuery( hqlInsert )
        .executeUpdate();
tx.commit();
session.close();]]></programlisting>

    </sect1>

</chapter>
