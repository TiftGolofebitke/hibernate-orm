<?xml version='1.0' encoding="iso-8859-1"?>
<chapter id="components">
    <title>Mapping de composants</title>

    <para>
        La notion de <emphasis>composants</emphasis> est réutilisé dans différents contextes,
        avec différents objectifs, à travers Hibernate.
    </para>

    <sect1 id="components-dependentobjects" revision="2" >
        <title>Objects dépendants</title>

        <para>
            Le composant est un objet inclu dans un autre qui est sauvegardé comme une valeur, et
            non pas comme une entité.
            Le composant fait référence à la notion (au sens objet) de composition
            (et non pas de composant au sens d'architecture de composants).
            Par exemple on pourrait modélisé l'objet personne de cette façon:
        </para>

        <programlisting><![CDATA[public class Person {
    private java.util.Date birthday;
    private Name name;
    private String key;
    public String getKey() {
        return key;
    }
    private void setKey(String key) {
        this.key=key;
    }
    public java.util.Date getBirthday() {
        return birthday;
    }
    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }
    public Name getName() {
        return name;
    }
    public void setName(Name name) {
        this.name = name;
    }
    ......
    ......
}]]></programlisting>

<programlisting><![CDATA[public class Name {
    char initial;
    String first;
    String last;
    public String getFirst() {
        return first;
    }
    void setFirst(String first) {
        this.first = first;
    }
    public String getLast() {
        return last;
    }
    void setLast(String last) {
        this.last = last;
    }
    public char getInitial() {
        return initial;
    }
    void setInitial(char initial) {
        this.initial = initial;
    }
}]]></programlisting>

        <para>
            Maintenant <literal>Name</literal> peut-être sauvegardé comme un composant de 
            <literal>Person</literal>. Remarquer que <literal>Name</literal> définit des methodes 
            d'accès et de modification pour ses propriétés persistantes, mais il n'a pas besoin 
            des interfaces ou des propriétés d'identification ( par exemple getId() ) qui sont propres aux entités.
        </para>

        <para>
            Nous serions alors amené à mapper ce composant de cette façon:
        </para>

        <programlisting><![CDATA[<class name="eg.Person" table="person">
    <id name="Key" column="pid" type="string">
        <generator class="uuid"/>
    </id>
    <property name="birthday" type="date"/>
    <component name="Name" class="eg.Name"> <!-- class attribute optional -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </component>
</class>]]></programlisting>

        <para>
            La table person aurai les colonnes <literal>pid</literal>,
            <literal>birthday</literal>,
            <literal>initial</literal>,
            <literal>first</literal> and
            <literal>last</literal>.
        </para>

        <para>
            Comme tous les types valeurs, les composants ne supportent pas les références partagés.
            En d'autres mots, deux instances de person peuvent avoir un même nom, mais ces noms sont
			indépendants, ils peuvent être identiques si on les compare par valeur mais ils représentent
			deux objets distincts en mémoire. La notion de nullité pour un composant est 
            <emphasis>ad hoc</emphasis>. Quand il recharge l'objet qui contient le composant, Hibernate 
            supposera que si tous les champs du composants sont nuls alors le composant sera positionné 
            à la valeur null. Ce choix programmatif devrait être satisfaisant dans la plupart des cas.
        </para>

        <para>
            Les propriétés d'un composant peuvent être de tous les types qu'Hibernate supporte habituellement
            (collections, many-to-one associations, autres composants, etc). Les composants inclus ne doivent <emphasis>pas</emphasis> 
            être vus comme quelque chose d'exotique. Hibernate a été conçu pour supporter un modèle objet très granulaire.
        </para>

        <para>
            Le  <literal>&lt;component&gt;</literal> peut inclure dans la liste de ses propriétés
            une référence au <literal>&lt;parent&gt;</literal> conteneur.
        </para>

        <programlisting><![CDATA[<class name="eg.Person" table="person">
    <id name="Key" column="pid" type="string">
        <generator class="uuid"/>
    </id>
    <property name="birthday" type="date"/>
    <component name="Name" class="eg.Name" unique="true">
        <parent name="namedPerson"/> <!-- référence arrière à Person -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </component>
</class>]]></programlisting>

    </sect1>

    <sect1 id="components-incollections" revision="1">
        <title>Collection d'objets dépendants</title>

        <para>
            Les collections d'objets dépendants sont supportés (exemple: un tableau de type 
            <literal>Name</literal>). Déclarer la collection de composants en remplaçant le tag <literal>&lt;element&gt;</literal> 
            par le tag <literal>&lt;composite-element&gt;</literal>.
        </para>

        <programlisting><![CDATA[<set name="someNames" table="some_names" lazy="true">
    <key column="id"/>
    <composite-element class="eg.Name"> <!-- class attribute required -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </composite-element>
</set>]]></programlisting>

        <para>
            Remarque: Si vous définissez un <literal>Set</literal> d'élément composite,
            il est très important d'implémenter la méthode <literal>equals()</literal> et 
            <literal>hashCode()</literal> correctement.
        </para>

        <para>
            Les élements composite peuvent aussi contenir des composants mais pas des collections.
            Si votre élément composite contient aussi des composants, utilisez l'élément <literal>&lt;nested-composite-element&gt;</literal> 
            . Une collections de composants qui ccontiennent eux-mêmes des composants est un cas très exotique.
            A ce stade demandez-vous si une association un-à-plusieurs ne serait pas plus approprié.
            Essayez de re remodeler votre élément composite comme une entité ( Dans ce cas même si le modèle
            Java est le même la logique de persitence et de relation sont tout de même différentes)
        </para>

        <para>
            Remarque, le mapping d'éléments composites ne supporte pas la nullité des 
            propriétés lorsqu'on utilise un <literal>&lt;set&gt;</literal>. Hibernate
            lorsqu'il supprime un objet utilise chaque colonne pour identifier un objet
            (on ne peut pas utiliser des clés primaires distinctes dans une table d'éléments composites),
            ce qui n'est pas possible avec des valeurs nulles. Vous devez donc choisir d'interdire la nullité
            des propriétés d'un élément composite ou choisir un autre type de collection comme :
            <literal>&lt;list&gt;</literal>, <literal>&lt;map&gt;</literal>,
            <literal>&lt;bag&gt;</literal> ou <literal>&lt;idbag&gt;</literal>.
        </para>

        <para>
            Un cas particulier d'élément composite est un élément composite qui inclut un élément
            <literal>&lt;many-to-one&gt;</literal>. Un mapping comme celui-ci 
            vous permet d'associer les colonnes d'une table d'association plusieurs à plusieurs (many-to-many)
            à la classse de l'élément composite. L'exemple suivant est une association plusieurs à plusieurs
            de <literal>Order</literal> à <literal>Item</literal> à 
            <literal>purchaseDate</literal>, <literal>price</literal> et
            <literal>quantity</literal> sont des propriétés de l'association.
        </para>

        <programlisting><![CDATA[<class name="eg.Order" .... >
    ....
    <set name="purchasedItems" table="purchase_items" lazy="true">
        <key column="order_id">
        <composite-element class="eg.Purchase">
            <property name="purchaseDate"/>
            <property name="price"/>
            <property name="quantity"/>
            <many-to-one name="item" class="eg.Item"/> <!-- class attribute is optional -->
        </composite-element>
    </set>
</class>]]></programlisting>

        <para>
            Bien sûr, il ne peut pas y avoir de référence à l'achat (purchase) depuis l'article (item), pour 
            pouvoir naviguer de façon bidirectionnelle dans l'association. N'oubliez pas que les composants 
            sont de type valeurs et n'autorise pas les références partagées. 
        </para>

        <para>Même les associations ternaires ou quaternaires sont possibles:</para>

        <programlisting><![CDATA[<class name="eg.Order" .... >
    ....
    <set name="purchasedItems" table="purchase_items" lazy="true">
        <key column="order_id">
        <composite-element class="eg.OrderLine">
            <many-to-one name="purchaseDetails class="eg.Purchase"/>
            <many-to-one name="item" class="eg.Item"/>
        </composite-element>
    </set>
</class>]]></programlisting>

        <para>
            Les éléments composites peuvent apparaître dans les requêtes en utilisant
            la même syntaxe que associations
        </para>

    </sect1>

    <sect1 id="components-asmapindex">
        <title>Utiliser les composants comme index de map</title>

        <para>
            l'élément <literal>&lt;composite-map-key&gt;</literal> 
            vous permet d'utiliser une classe de composant comme indice de 
            <literal>Map</literal>. Assurez-vous d'avoir surdéfini 
            <literal>hashCode()</literal> et <literal>equals()</literal> dans la 
            classe du composant.
        </para>
    </sect1>

    <sect1 id="components-compositeid" revision="1">
        <title>Utiliser un composant comme identifiant</title>

        <para>
            Vous pouvez utiliser un composant comme identifiant d'une entité.
            Mais pour cela la classe du composant doit respecter certaines règles.
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    Elle doit implémenter <literal>java.io.Serializable</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    Elle doit redéfinir <literal>equals()</literal> et
                    <literal>hashCode()</literal>, de façon cohérente avec le 
                    fait qu'elle définit une clé composite dans la base de 
                    données.
                </para>
            </listitem>
        </itemizedlist>
        
        <para>
            <emphasis>
            Remarque: avec hibernate3, la seconde règle n'est plus absolument 
            necessaire mais faîtes le quand même.</emphasis>
        </para>

        <para>
        	Vous ne pouvez pas utiliser de <literal>IdentifierGenerator</literal> pour générer 
        	une clé composite, l'application devra définir elle même ses propres identifiants.
        </para>

        <para>
            Utiliser l'élément <literal>&lt;composite-id&gt;</literal>  (en incluant l'élément 
            <literal>&lt;key-property&gt;</literal>) à la place de l'habituel déclaration 
            <literal>&lt;id&gt;</literal>. Par exemple la classe
            <literal>OrderLine</literal> qui dépend de la clé primaire 
             (composite) de  <literal>Order</literal>.
        </para>

        <programlisting><![CDATA[<class name="OrderLine">
    
    <composite-id name="id" class="OrderLineId">
        <key-property name="lineId"/>
        <key-property name="orderId"/>
        <key-property name="customerId"/>
    </composite-id>
    
    <property name="name"/>
    
    <many-to-one name="order" class="Order"
            insert="false" update="false">
        <column name="orderId"/>
        <column name="customerId"/>
    </many-to-one>
    ....
    
</class>]]></programlisting>

        <para>
            Maintenant toutes clés étrangères référençant la table <literal>OrderLine</literal> 
            devra aussi être composite. Vous devez en tenir compte lorsque vous écrivez vos mapping d'association pour les autres classes.
            Une association à <literal>OrderLine</literal> devrait être mappé de la façon suivante :
        </para>

        <programlisting><![CDATA[<many-to-one name="orderLine" class="OrderLine">
<!-- the "class" attribute is optional, as usual -->
    <column name="lineId"/>
    <column name="orderId"/>
    <column name="customerId"/>
</many-to-one>]]></programlisting>

        <para>
            (Remarque: l'élément <literal>&lt;column&gt;</literal> est une alternative à l'attribut 
            <literal>column</literal> que l'on utilise partout.) 
        </para>
        
        <para>
            Une association <literal>plusieurs-à-plusieurs</literal> (many-to-many) à <literal>OrderLine</literal> 
            utilisera aussi une clé étrangère composite:
        </para>
    
    <programlisting><![CDATA[<set name="undeliveredOrderLines">
    <key column name="warehouseId"/>
    <many-to-many class="OrderLine">
        <column name="lineId"/>
        <column name="orderId"/>
        <column name="customerId"/>
    </many-to-many>
</set>]]></programlisting>

        <para>
            La collection des <literal>OrderLine</literal>s dans <literal>Order</literal>
            utilisera:
        </para>

    <programlisting><![CDATA[<set name="orderLines" inverse="true">
    <key>
        <column name="orderId"/>
        <column name="customerId"/>
    </key>
    <one-to-many class="OrderLine"/>
</set>]]></programlisting>

        <para>
            (L'élément <literal>&lt;one-to-many&gt;</literal>, comme d'habitude, ne déclare pas de colonne.)
        </para>
        
        <para>
            Si <literal>OrderLine</literal> lui-même possède une collection, celle-ci aura aussi 
            une clé composite étrangère.
        </para>

        <programlisting><![CDATA[<class name="OrderLine">
    ....
    ....
    <list name="deliveryAttempts">
        <key>   <!-- a collection inherits the composite key type -->
            <column name="lineId"/>
            <column name="orderId"/>
            <column name="customerId"/>
        </key>
        <list-index column="attemptId" base="1"/>
        <composite-element class="DeliveryAttempt">
            ...
        </composite-element>
    </set>
</class>]]></programlisting>

    </sect1>

    <sect1 id="components-dynamic" revision="1">
        <title>Composant Dynamique</title>

        <para>
            Vous pouvez même mapper une propriété de type <literal>Map</literal>:
        </para>

    <programlisting><![CDATA[<dynamic-component name="userAttributes">
    <property name="foo" column="FOO"/>
    <property name="bar" column="BAR"/>
    <many-to-one name="baz" class="Baz" column="BAZ_ID"/>
</dynamic-component>]]></programlisting>

        <para>
            La sémantique de l'association à un <literal>&lt;dynamic-component&gt;</literal>
            est identique à celle que l'on utilise pour les composants.
            L'avantage de ce type de mapping est qu'il pemet de déterminer les véritables propriétés 
            du bean au moment su déploiement en éditant simplement le document de mapping.
            La manipulation du document de mapping pendant l'execution de l'application est aussi 
            possible en utilisant un parser DOM. Il ya même mieux, vous pouvez accéder (et changer)
            le metamodel de configuration d'hibernate en utilisant l'objet <literal>Configuration</literal>            
        </para>

    </sect1>

</chapter>
