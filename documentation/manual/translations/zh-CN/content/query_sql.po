#, fuzzy
msgid ""
msgstr ""
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Content-Type: text/plain; charset=utf-8\n"
#: index.docbook:5
msgid "Native SQL"
msgstr ""

#: index.docbook:7
msgid "You may also express queries in the native SQL dialect of your database. This is useful if you want to utilize database specific features such as query hints or the <literal>CONNECT</literal> keyword in Oracle. It also provides a clean migration path from a direct SQL/JDBC based application to Hibernate."
msgstr ""

#: index.docbook:13
msgid "Hibernate3 allows you to specify handwritten SQL (including stored procedures) for all create, update, delete, and load operations."
msgstr ""

#: index.docbook:17
msgid "Using a <literal>SQLQuery</literal>"
msgstr ""

#: index.docbook:19
msgid "Execution of native SQL queries is controlled via the <literal>SQLQuery</literal> interface, which is obtained by calling <literal>Session.createSQLQuery()</literal>. The following describes how to use this API for querying."
msgstr ""

#: index.docbook:25
msgid "Scalar queries"
msgstr ""

#: index.docbook:27
msgid "The most basic SQL query is to get a list of scalars (values)."
msgstr ""

#: index.docbook:30
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\").list();\n"
      "sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE FROM CATS\").list();\n"
      "]]>"
msgstr ""

#: index.docbook:32
msgid "These will both return a List of Object arrays (Object[]) with scalar values for each column in the CATS table. Hibernate will use ResultSetMetadata to deduce the actual order and types of the returned scalar values."
msgstr ""

#: index.docbook:37
msgid "To avoid the overhead of using <literal>ResultSetMetadata</literal> or simply to be more explicit in what is returned one can use <literal>addScalar()</literal>."
msgstr ""

#: index.docbook:41
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\")\n"
      " .addScalar(\"ID\", Hibernate.LONG)\n"
      " .addScalar(\"NAME\", Hibernate.STRING)\n"
      " .addScalar(\"BIRTHDATE\", Hibernate.DATE)\n"
      "]]>"
msgstr ""

#: index.docbook:43, index.docbook:89, index.docbook:170, index.docbook:321
msgid "This query specified:"
msgstr ""

#: index.docbook:47, index.docbook:93, index.docbook:325
msgid "the SQL query string"
msgstr ""

#: index.docbook:51
msgid "the columns and types to return"
msgstr ""

#: index.docbook:55
msgid "This will still return Object arrays, but now it will not use <literal>ResultSetMetdata</literal> but will instead explicitly get the ID, NAME and BIRTHDATE column as respectively a Long, String and a Short from the underlying resultset. This also means that only these three columns will be returned, even though the query is using <literal>*</literal> and could return more than the three listed columns."
msgstr ""

#: index.docbook:63
msgid "It is possible to leave out the type information for all or some of the scalars."
msgstr ""

#: index.docbook:66
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\")\n"
      " .addScalar(\"ID\", Hibernate.LONG)\n"
      " .addScalar(\"NAME\")\n"
      " .addScalar(\"BIRTHDATE\")\n"
      "]]>"
msgstr ""

#: index.docbook:68
msgid "This is essentially the same query as before, but now <literal>ResultSetMetaData</literal> is used to decide the type of NAME and BIRTHDATE where as the type of ID is explicitly specified."
msgstr ""

#: index.docbook:72
msgid "How the java.sql.Types returned from ResultSetMetaData is mapped to Hibernate types is controlled by the Dialect. If a specific type is not mapped or does not result in the expected type it is possible to customize it via calls to <literal>registerHibernateType</literal> in the Dialect."
msgstr ""

#: index.docbook:80
msgid "Entity queries"
msgstr ""

#: index.docbook:82
msgid "The above queries were all about returning scalar values, basically returning the \"raw\" values from the resultset. The following shows how to get entity objects from a native sql query via <literal>addEntity()</literal>."
msgstr ""

#: index.docbook:87
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\").addEntity(Cat.class);\n"
      "sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE FROM CATS\").addEntity(Cat.class);\n"
      "]]>"
msgstr ""

#: index.docbook:97
msgid "the entity returned by the query"
msgstr ""

#: index.docbook:101
msgid "Assuming that Cat is mapped as a class with the columns ID, NAME and BIRTHDATE the above queries will both return a List where each element is a Cat entity."
msgstr ""

#: index.docbook:105
msgid "If the entity is mapped with a <literal>many-to-one</literal> to another entity it is required to also return this when performing the native query, otherwise a database specific \"column not found\" error will occur. The additional columns will automatically be returned when using the * notation, but we prefer to be explicit as in the following example for a <literal>many-to-one</literal> to a <literal>Dog</literal>:"
msgstr ""

#: index.docbook:113
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE, DOG_ID FROM CATS\").addEntity(Cat.class);\n"
      "]]>"
msgstr ""

#: index.docbook:115
msgid "This will allow cat.getDog() to function properly."
msgstr ""

#: index.docbook:119
msgid "Handling associations and collections"
msgstr ""

#: index.docbook:121
msgid "It is possible to eagerly join in the <literal>Dog</literal> to avoid the possible extra roundtrip for initializing the proxy. This is done via the <literal>addJoin()</literal> method, which allows you to join in an association or collection."
msgstr ""

#: index.docbook:126
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT c.ID, NAME, BIRTHDATE, DOG_ID, D_ID, D_NAME FROM CATS c, DOGS d WHERE c.DOG_ID = d.D_ID\")\n"
      " .addEntity(\"cat\", Cat.class)\n"
      " .addJoin(\"cat.dog\");\n"
      "]]>"
msgstr ""

#: index.docbook:128
msgid "In this example the returned <literal>Cat</literal>'s will have their <literal>dog</literal> property fully initialized without any extra roundtrip to the database. Notice that we added a alias name (\"cat\") to be able to specify the target property path of the join. It is possible to do the same eager joining for collections, e.g. if the <literal>Cat</literal> had a one-to-many to <literal>Dog</literal> instead."
msgstr ""

#: index.docbook:136
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE, D_ID, D_NAME, CAT_ID FROM CATS c, DOGS d WHERE c.ID = d.CAT_ID\")\n"
      " .addEntity(\"cat\", Cat.class)\n"
      " .addJoin(\"cat.dogs\");\n"
      "]]>"
msgstr ""

#: index.docbook:138
msgid "At this stage we are reaching the limits of what is possible with native queries without starting to enhance the sql queries to make them usable in Hibernate; the problems starts to arise when returning multiple entities of the same type or when the default alias/column names are not enough."
msgstr ""

#: index.docbook:146
msgid "Returning multiple entities"
msgstr ""

#: index.docbook:148
msgid "Until now the result set column names are assumed to be the same as the column names specified in the mapping document. This can be problematic for SQL queries which join multiple tables, since the same column names may appear in more than one table."
msgstr ""

#: index.docbook:153
msgid "Column alias injection is needed in the following query (which most likely will fail):"
msgstr ""

#: index.docbook:156
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT c.*, m.*  FROM CATS c, CATS m WHERE c.MOTHER_ID = c.ID\")\n"
      " .addEntity(\"cat\", Cat.class)\n"
      " .addEntity(\"mother\", Cat.class)\n"
      "]]>"
msgstr ""

#: index.docbook:158
msgid "The intention for this query is to return two Cat instances per row, a cat and its mother. This will fail since there is a conflict of names since they are mapped to the same column names and on some databases the returned column aliases will most likely be on the form \"c.ID\", \"c.NAME\", etc. which are not equal to the columns specificed in the mappings (\"ID\" and \"NAME\")."
msgstr ""

#: index.docbook:165
msgid "The following form is not vulnerable to column name duplication:"
msgstr ""

#: index.docbook:168
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT {cat.*}, {mother.*}  FROM CATS c, CATS m WHERE c.MOTHER_ID = c.ID\")\n"
      " .addEntity(\"cat\", Cat.class)\n"
      " .addEntity(\"mother\", Cat.class)\n"
      "]]>"
msgstr ""

#: index.docbook:174
msgid "the SQL query string, with placeholders for Hibernate to inject column aliases"
msgstr ""

#: index.docbook:179
msgid "the entities returned by the query"
msgstr ""

#: index.docbook:183
msgid "The {cat.*} and {mother.*} notation used above is a shorthand for \"all properties\". Alternatively, you may list the columns explicity, but even in this case we let Hibernate inject the SQL column aliases for each property. The placeholder for a column alias is just the property name qualified by the table alias. In the following example, we retrieve Cats and their mothers from a different table (cat_log) to the one declared in the mapping metadata. Notice that we may even use the property aliases in the where clause if we like."
msgstr ""

#: index.docbook:192
msgid ""
      "<![CDATA[String sql = \"SELECT ID as {c.id}, NAME as {c.name}, \" + \n"
      "         \"BIRTHDATE as {c.birthDate}, MOTHER_ID as {c.mother}, {mother.*} \" +\n"
      "         \"FROM CAT_LOG c, CAT_LOG m WHERE {c.mother} = c.ID\";\n"
      "\n"
      "List loggedCats = sess.createSQLQuery(sql)\n"
      "        .addEntity(\"cat\", Cat.class)\n"
      "        .addEntity(\"mother\", Cat.class).list()\n"
      "]]>"
msgstr ""

#: index.docbook:195
msgid "Alias and property references"
msgstr ""

#: index.docbook:197
msgid "For most cases the above alias injection is needed, but for queries relating to more complex mappings like composite properties, inheritance discriminators, collections etc. there are some specific aliases to use to allow Hibernate to inject the proper aliases."
msgstr ""

#: index.docbook:202
msgid "The following table shows the different possibilities of using the alias injection. Note: the alias names in the result are examples, each alias will have a unique and probably different name when used."
msgstr ""

#: index.docbook:208
msgid "Alias injection names"
msgstr ""

#: index.docbook:219
msgid "Description"
msgstr ""

#: index.docbook:221
msgid "Syntax"
msgstr ""

#: index.docbook:223
msgid "Example"
msgstr ""

#: index.docbook:229
msgid "A simple property"
msgstr ""

#: index.docbook:231
msgid "{[aliasname].[propertyname]"
msgstr ""

#: index.docbook:233
msgid "A_NAME as {item.name}"
msgstr ""

#: index.docbook:237
msgid "A composite property"
msgstr ""

#: index.docbook:239
msgid "{[aliasname].[componentname].[propertyname]}"
msgstr ""

#: index.docbook:241
msgid "CURRENCY as {item.amount.currency}, VALUE as {item.amount.value}"
msgstr ""

#: index.docbook:246
msgid "Discriminator of an entity"
msgstr ""

#: index.docbook:248
msgid "{[aliasname].class}"
msgstr ""

#: index.docbook:250
msgid "DISC as {item.class}"
msgstr ""

#: index.docbook:254
msgid "All properties of an entity"
msgstr ""

#: index.docbook:256, index.docbook:304
msgid "{[aliasname].*}"
msgstr ""

#: index.docbook:258
msgid "{item.*}"
msgstr ""

#: index.docbook:262
msgid "A collection key"
msgstr ""

#: index.docbook:264
msgid "{[aliasname].key}"
msgstr ""

#: index.docbook:266
msgid "ORGID as {coll.key}"
msgstr ""

#: index.docbook:270
msgid "The id of an collection"
msgstr ""

#: index.docbook:272
msgid "{[aliasname].id}"
msgstr ""

#: index.docbook:274
msgid "EMPID as {coll.id}"
msgstr ""

#: index.docbook:278
msgid "The element of an collection"
msgstr ""

#: index.docbook:280
msgid "{[aliasname].element}"
msgstr ""

#: index.docbook:282
msgid "XID as {coll.element}"
msgstr ""

#: index.docbook:286
msgid "roperty of the element in the collection"
msgstr ""

#: index.docbook:288
msgid "{[aliasname].element.[propertyname]}"
msgstr ""

#: index.docbook:290
msgid "NAME as {coll.element.name}"
msgstr ""

#: index.docbook:294
msgid "All properties of the element in the collection"
msgstr ""

#: index.docbook:296
msgid "{[aliasname].element.*}"
msgstr ""

#: index.docbook:298
msgid "{coll.element.*}"
msgstr ""

#: index.docbook:302
msgid "All properties of the the collection"
msgstr ""

#: index.docbook:306
msgid "{coll.*}"
msgstr ""

#: index.docbook:315
msgid "Returning non-managed entities"
msgstr ""

#: index.docbook:317
msgid "It is possible to apply a ResultTransformer to native sql queries. Allowing it to e.g. return non-managed entities."
msgstr ""

#: index.docbook:319
msgid ""
      "<![CDATA[sess.createSQLQuery(\"SELECT NAME, BIRTHDATE FROM CATS\")\n"
      "        .setResultTransformer(Transformers.aliasToBean(CatDTO.class))]]>"
msgstr ""

#: index.docbook:329
msgid "a result transformer"
msgstr ""

#: index.docbook:333
msgid "The above query will return a list of <literal>CatDTO</literal> which has been instantiated and injected the values of NAME and BIRTHNAME into its corresponding properties or fields."
msgstr ""

#: index.docbook:340
msgid "Handling inheritance"
msgstr ""

#: index.docbook:342
msgid "Native sql queries which query for entities that is mapped as part of an inheritance must include all properties for the baseclass and all it subclasses."
msgstr ""

#: index.docbook:348
msgid "Parameters"
msgstr ""

#: index.docbook:350
msgid "Native sql queries support positional as well as named parameters:"
msgstr ""

#: index.docbook:353
msgid ""
      "<![CDATA[Query query = sess.createSQLQuery(\"SELECT * FROM CATS WHERE NAME like ?\").addEntity(Cat.class);\n"
      "List pusList = query.setString(0, \"Pus%\").list();\n"
      "     \n"
      "query = sess.createSQLQuery(\"SELECT * FROM CATS WHERE NAME like :name\").addEntity(Cat.class);\n"
      "List pusList = query.setString(\"name\", \"Pus%\").list();          ]]>"
msgstr ""

#: index.docbook:361
msgid "Named SQL queries"
msgstr ""

#: index.docbook:363
msgid "Named SQL queries may be defined in the mapping document and called in exactly the same way as a named HQL query. In this case, we do <emphasis>not</emphasis> need to call <literal>addEntity()</literal>."
msgstr ""

#: index.docbook:368
msgid ""
      "<![CDATA[<sql-query name=\"persons\">\n"
      "    <return alias=\"person\" class=\"eg.Person\"/>\n"
      "    SELECT person.NAME AS {person.name},\n"
      "           person.AGE AS {person.age},\n"
      "           person.SEX AS {person.sex}\n"
      "    FROM PERSON person\n"
      "    WHERE person.NAME LIKE :namePattern\n"
      "</sql-query>]]>"
msgstr ""

#: index.docbook:370
msgid ""
      "<![CDATA[List people = sess.getNamedQuery(\"persons\")\n"
      "    .setString(\"namePattern\", namePattern)\n"
      "    .setMaxResults(50)\n"
      "    .list();]]>"
msgstr ""

#: index.docbook:372
msgid "The <literal>&lt;return-join&gt;</literal> and <literal>&lt;load-collection&gt;</literal> elements are used to join associations and define queries which initialize collections, respectively."
msgstr ""

#: index.docbook:377
msgid ""
      "<![CDATA[<sql-query name=\"personsWith\">\n"
      "    <return alias=\"person\" class=\"eg.Person\"/>\n"
      "    <return-join alias=\"address\" property=\"person.mailingAddress\"/>\n"
      "    SELECT person.NAME AS {person.name},\n"
      "           person.AGE AS {person.age},\n"
      "           person.SEX AS {person.sex},\n"
      "           address.STREET AS {address.street},\n"
      "           address.CITY AS {address.city},\n"
      "           address.STATE AS {address.state},\n"
      "           address.ZIP AS {address.zip}\n"
      "    FROM PERSON person\n"
      "    JOIN ADDRESS address\n"
      "        ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'\n"
      "    WHERE person.NAME LIKE :namePattern\n"
      "</sql-query>]]>"
msgstr ""

#: index.docbook:379
msgid "A named SQL query may return a scalar value. You must declare the column alias and Hibernate type using the <literal>&lt;return-scalar&gt;</literal> element:"
msgstr ""

#: index.docbook:383
msgid ""
      "<![CDATA[<sql-query name=\"mySqlQuery\">\n"
      "    <return-scalar column=\"name\" type=\"string\"/>\n"
      "    <return-scalar column=\"age\" type=\"long\"/>\n"
      "    SELECT p.NAME AS name,\n"
      "           p.AGE AS age,\n"
      "    FROM PERSON p WHERE p.NAME LIKE 'Hiber%'\n"
      "</sql-query>]]>"
msgstr ""

#: index.docbook:385
msgid "You can externalize the resultset mapping informations in a <literal>&lt;resultset&gt;</literal> element to either reuse them accross several named queries or through the <literal>setResultSetMapping()</literal> API."
msgstr ""

#: index.docbook:390
msgid ""
      "<![CDATA[<resultset name=\"personAddress\">\n"
      "    <return alias=\"person\" class=\"eg.Person\"/>\n"
      "    <return-join alias=\"address\" property=\"person.mailingAddress\"/>\n"
      "</resultset>\n"
      "\n"
      "<sql-query name=\"personsWith\" resultset-ref=\"personAddress\">\n"
      "    SELECT person.NAME AS {person.name},\n"
      "           person.AGE AS {person.age},\n"
      "           person.SEX AS {person.sex},\n"
      "           address.STREET AS {address.street},\n"
      "           address.CITY AS {address.city},\n"
      "           address.STATE AS {address.state},\n"
      "           address.ZIP AS {address.zip}\n"
      "    FROM PERSON person\n"
      "    JOIN ADDRESS address\n"
      "        ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'\n"
      "    WHERE person.NAME LIKE :namePattern\n"
      "</sql-query>]]>"
msgstr ""

#: index.docbook:392
msgid "You can alternatively use the resultset mapping information in your hbm files directly in java code."
msgstr ""

#: index.docbook:395
msgid ""
      "<![CDATA[List cats = sess.createSQLQuery(\n"
      "        \"select {cat.*}, {kitten.*} from cats cat, cats kitten where kitten.mother = cat.id\"\n"
      "    )\n"
      "    .setResultSetMapping(\"catAndKitten\")\n"
      "    .list();]]>"
msgstr ""

#: index.docbook:398
msgid "Using return-property to explicitly specify column/alias names"
msgstr ""

#: index.docbook:401
msgid "With <literal>&lt;return-property&gt;</literal> you can explicitly tell Hibernate what column aliases to use, instead of using the <literal>{}</literal>-syntax to let Hibernate inject its own aliases."
msgstr ""

#: index.docbook:406
msgid ""
      "<![CDATA[<sql-query name=\"mySqlQuery\">\n"
      "    <return alias=\"person\" class=\"eg.Person\">\n"
      "        <return-property name=\"name\" column=\"myName\"/>\n"
      "        <return-property name=\"age\" column=\"myAge\"/>\n"
      "        <return-property name=\"sex\" column=\"mySex\"/>\n"
      "    </return>\n"
      "    SELECT person.NAME AS myName,\n"
      "           person.AGE AS myAge,\n"
      "           person.SEX AS mySex,\n"
      "    FROM PERSON person WHERE person.NAME LIKE :name\n"
      "</sql-query>\n"
      "]]>"
msgstr ""

#: index.docbook:408
msgid "<literal>&lt;return-property&gt;</literal> also works with multiple columns. This solves a limitation with the <literal>{}</literal>-syntax which can not allow fine grained control of multi-column properties."
msgstr ""

#: index.docbook:413
msgid ""
      "<![CDATA[<sql-query name=\"organizationCurrentEmployments\">\n"
      "    <return alias=\"emp\" class=\"Employment\">\n"
      "        <return-property name=\"salary\">\n"
      "            <return-column name=\"VALUE\"/>\n"
      "            <return-column name=\"CURRENCY\"/>\n"
      "        </return-property>\n"
      "        <return-property name=\"endDate\" column=\"myEndDate\"/>\n"
      "    </return>\n"
      "        SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer},\n"
      "        STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},\n"
      "        REGIONCODE as {emp.regionCode}, EID AS {emp.id}, VALUE, CURRENCY\n"
      "        FROM EMPLOYMENT\n"
      "        WHERE EMPLOYER = :id AND ENDDATE IS NULL\n"
      "        ORDER BY STARTDATE ASC\n"
      "</sql-query>]]>"
msgstr ""

#: index.docbook:415
msgid "Notice that in this example we used <literal>&lt;return-property&gt;</literal> in combination with the <literal>{}</literal>-syntax for injection. Allowing users to choose how they want to refer column and properties."
msgstr ""

#: index.docbook:420
msgid "If your mapping has a discriminator you must use <literal>&lt;return-discriminator&gt;</literal> to specify the discriminator column."
msgstr ""

#: index.docbook:426
msgid "Using stored procedures for querying"
msgstr ""

#: index.docbook:428
msgid "Hibernate 3 introduces support for queries via stored procedures and functions. Most of the following documentation is equivalent for both. The stored procedure/function must return a resultset as the first out-parameter to be able to work with Hibernate. An example of such a stored function in Oracle 9 and higher is as follows:"
msgstr ""

#: index.docbook:434
msgid ""
      "<![CDATA[CREATE OR REPLACE FUNCTION selectAllEmployments\n"
      "    RETURN SYS_REFCURSOR\n"
      "AS\n"
      "    st_cursor SYS_REFCURSOR;\n"
      "BEGIN\n"
      "    OPEN st_cursor FOR\n"
      " SELECT EMPLOYEE, EMPLOYER,\n"
      " STARTDATE, ENDDATE,\n"
      " REGIONCODE, EID, VALUE, CURRENCY\n"
      " FROM EMPLOYMENT;\n"
      "      RETURN  st_cursor;\n"
      " END;]]>"
msgstr ""

#: index.docbook:436
msgid "To use this query in Hibernate you need to map it via a named query."
msgstr ""

#: index.docbook:439
msgid ""
      "<![CDATA[<sql-query name=\"selectAllEmployees_SP\" callable=\"true\">\n"
      "    <return alias=\"emp\" class=\"Employment\">\n"
      "        <return-property name=\"employee\" column=\"EMPLOYEE\"/>\n"
      "        <return-property name=\"employer\" column=\"EMPLOYER\"/>\n"
      "        <return-property name=\"startDate\" column=\"STARTDATE\"/>\n"
      "        <return-property name=\"endDate\" column=\"ENDDATE\"/>\n"
      "        <return-property name=\"regionCode\" column=\"REGIONCODE\"/>\n"
      "        <return-property name=\"id\" column=\"EID\"/>\n"
      "        <return-property name=\"salary\">\n"
      "            <return-column name=\"VALUE\"/>\n"
      "            <return-column name=\"CURRENCY\"/>\n"
      "        </return-property>\n"
      "    </return>\n"
      "    { ? = call selectAllEmployments() }\n"
      "</sql-query>]]>"
msgstr ""

#: index.docbook:441
msgid "Notice stored procedures currently only return scalars and entities. <literal>&lt;return-join&gt;</literal> and <literal>&lt;load-collection&gt;</literal> are not supported."
msgstr ""

#: index.docbook:446
msgid "Rules/limitations for using stored procedures"
msgstr ""

#: index.docbook:448
msgid "To use stored procedures with Hibernate the procedures/functions have to follow some rules. If they do not follow those rules they are not usable with Hibernate. If you still want to use these procedures you have to execute them via <literal>session.connection()</literal>. The rules are different for each database, since database vendors have different stored procedure semantics/syntax."
msgstr ""

#: index.docbook:455
msgid "Stored procedure queries can't be paged with <literal>setFirstResult()/setMaxResults()</literal>."
msgstr ""

#: index.docbook:458
msgid "Recommended call form is standard SQL92: <literal>{ ? = call functionName(&lt;parameters&gt;) }</literal> or <literal>{ ? = call procedureName(&lt;parameters&gt;}</literal>. Native call syntax is not supported."
msgstr ""

#: index.docbook:463
msgid "For Oracle the following rules apply:"
msgstr ""

#: index.docbook:467
msgid "A function must return a result set. The first parameter of a procedure must be an <literal>OUT</literal> that returns a result set. This is done by using a <literal>SYS_REFCURSOR</literal> type in Oracle 9 or 10. In Oracle you need to define a <literal>REF CURSOR</literal> type, see Oracle literature."
msgstr ""

#: index.docbook:476
msgid "For Sybase or MS SQL server the following rules apply:"
msgstr ""

#: index.docbook:480
msgid "The procedure must return a result set. Note that since these servers can/will return multiple result sets and update counts, Hibernate will iterate the results and take the first result that is a result set as its return value. Everything else will be discarded."
msgstr ""

#: index.docbook:488
msgid "If you can enable <literal>SET NOCOUNT ON</literal> in your procedure it will probably be more efficient, but this is not a requirement."
msgstr ""

#: index.docbook:498
msgid "Custom SQL for create, update and delete"
msgstr ""

#: index.docbook:500
msgid "Hibernate3 can use custom SQL statements for create, update, and delete operations. The class and collection persisters in Hibernate already contain a set of configuration time generated strings (insertsql, deletesql, updatesql etc.). The mapping tags <literal>&lt;sql-insert&gt;</literal>, <literal>&lt;sql-delete&gt;</literal>, and <literal>&lt;sql-update&gt;</literal> override these strings:"
msgstr ""

#: index.docbook:508
msgid ""
      "<![CDATA[<class name=\"Person\">\n"
      "    <id name=\"id\">\n"
      "        <generator class=\"increment\"/>\n"
      "    </id>\n"
      "    <property name=\"name\" not-null=\"true\"/>\n"
      "    <sql-insert>INSERT INTO PERSON (NAME, ID) VALUES ( UPPER(?), ? )</sql-insert>\n"
      "    <sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE ID=?</sql-update>\n"
      "    <sql-delete>DELETE FROM PERSON WHERE ID=?</sql-delete>\n"
      "</class>]]>"
msgstr ""

#: index.docbook:510
msgid "The SQL is directly executed in your database, so you are free to use any dialect you like. This will of course reduce the portability of your mapping if you use database specific SQL."
msgstr ""

#: index.docbook:514
msgid "Stored procedures are supported if the <literal>callable</literal> attribute is set:"
msgstr ""

#: index.docbook:517
msgid ""
      "<![CDATA[<class name=\"Person\">\n"
      "    <id name=\"id\">\n"
      "        <generator class=\"increment\"/>\n"
      "    </id>\n"
      "    <property name=\"name\" not-null=\"true\"/>\n"
      "    <sql-insert callable=\"true\">{call createPerson (?, ?)}</sql-insert>\n"
      "    <sql-delete callable=\"true\">{? = call deletePerson (?)}</sql-delete>\n"
      "    <sql-update callable=\"true\">{? = call updatePerson (?, ?)}</sql-update>\n"
      "</class>]]>"
msgstr ""

#: index.docbook:519
msgid "The order of the positional parameters are currently vital, as they must be in the same sequence as Hibernate expects them."
msgstr ""

#: index.docbook:522
msgid "You can see the expected order by enabling debug logging for the <literal>org.hibernate.persister.entity</literal> level. With this level enabled Hibernate will print out the static SQL that is used to create, update, delete etc. entities. (To see the expected sequence, remember to not include your custom SQL in the mapping files as that will override the Hibernate generated static sql.)"
msgstr ""

#: index.docbook:529
msgid "The stored procedures are in most cases (read: better do it than not) required to return the number of rows inserted/updated/deleted, as Hibernate has some runtime checks for the success of the statement. Hibernate always registers the first statement parameter as a numeric output parameter for the CUD operations:"
msgstr ""

#: index.docbook:535
msgid ""
      "<![CDATA[CREATE OR REPLACE FUNCTION updatePerson (uid IN NUMBER, uname IN VARCHAR2)\n"
      "    RETURN NUMBER IS\n"
      "BEGIN\n"
      "\n"
      "    update PERSON\n"
      "    set\n"
      "        NAME = uname,\n"
      "    where\n"
      "        ID = uid;\n"
      "\n"
      "    return SQL%ROWCOUNT;\n"
      "\n"
      "END updatePerson;]]>"
msgstr ""

#: index.docbook:539
msgid "Custom SQL for loading"
msgstr ""

#: index.docbook:541
msgid "You may also declare your own SQL (or HQL) queries for entity loading:"
msgstr ""

#: index.docbook:544
msgid ""
      "<![CDATA[<sql-query name=\"person\">\n"
      "    <return alias=\"pers\" class=\"Person\" lock-mode=\"upgrade\"/>\n"
      "    SELECT NAME AS {pers.name}, ID AS {pers.id}\n"
      "    FROM PERSON\n"
      "    WHERE ID=?\n"
      "    FOR UPDATE\n"
      "</sql-query>]]>"
msgstr ""

#: index.docbook:546
msgid "This is just a named query declaration, as discussed earlier. You may reference this named query in a class mapping:"
msgstr ""

#: index.docbook:549
msgid ""
      "<![CDATA[<class name=\"Person\">\n"
      "    <id name=\"id\">\n"
      "        <generator class=\"increment\"/>\n"
      "    </id>\n"
      "    <property name=\"name\" not-null=\"true\"/>\n"
      "    <loader query-ref=\"person\"/>\n"
      "</class>]]>"
msgstr ""

#: index.docbook:551
msgid "This even works with stored procedures."
msgstr ""

#: index.docbook:553
msgid "You may even define a query for collection loading:"
msgstr ""

#: index.docbook:555
msgid ""
      "<![CDATA[<set name=\"employments\" inverse=\"true\">\n"
      "    <key/>\n"
      "    <one-to-many class=\"Employment\"/>\n"
      "    <loader query-ref=\"employments\"/>\n"
      "</set>]]>"
msgstr ""

#: index.docbook:557
msgid ""
      "<![CDATA[<sql-query name=\"employments\">\n"
      "    <load-collection alias=\"emp\" role=\"Person.employments\"/>\n"
      "    SELECT {emp.*}\n"
      "    FROM EMPLOYMENT emp\n"
      "    WHERE EMPLOYER = :id\n"
      "    ORDER BY STARTDATE ASC, EMPLOYEE ASC\n"
      "</sql-query>]]>"
msgstr ""

#: index.docbook:559
msgid "You could even define an entity loader that loads a collection by join fetching:"
msgstr ""

#: index.docbook:562
msgid ""
      "<![CDATA[<sql-query name=\"person\">\n"
      "    <return alias=\"pers\" class=\"Person\"/>\n"
      "    <return-join alias=\"emp\" property=\"pers.employments\"/>\n"
      "    SELECT NAME AS {pers.*}, {emp.*}\n"
      "    FROM PERSON pers\n"
      "    LEFT OUTER JOIN EMPLOYMENT emp\n"
      "        ON pers.ID = emp.PERSON_ID\n"
      "    WHERE ID=?\n"
      "</sql-query>]]>"
msgstr ""

msgid "ROLES_OF_TRANSLATORS"
msgstr "<!--TRANS:ROLES_OF_TRANSLATORS-->"

msgid "CREDIT_FOR_TRANSLATORS"
msgstr "<!--TRANS:CREDIT_FOR_TRANSLATORS-->"

