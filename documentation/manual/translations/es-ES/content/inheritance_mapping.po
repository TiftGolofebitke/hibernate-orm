msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2007-10-25 07:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: inheritance_mapping.xml:5
#, no-c-format
msgid "Inheritance Mapping"
msgstr "Mapeo de Herencia"

#. Tag: title
#: inheritance_mapping.xml:8
#, no-c-format
msgid "The Three Strategies"
msgstr "Las Tres Estrategias"

#. Tag: para
#: inheritance_mapping.xml:10
#, no-c-format
msgid "Hibernate supports the three basic inheritance mapping strategies:"
msgstr "Hibernate soporta las tres estrategias básicas de mapeo de herencia:"

#. Tag: para
#: inheritance_mapping.xml:16
#, no-c-format
msgid "table per class hierarchy"
msgstr "tabla por jerarquía de clases"

#. Tag: para
#: inheritance_mapping.xml:21
#, fuzzy, no-c-format
msgid "<para>table per subclass</para>"
msgstr "tabla por subclase"

#. Tag: para
#: inheritance_mapping.xml:26
#, no-c-format
msgid "table per concrete class"
msgstr "tabla por clase concreta"

#. Tag: para
#: inheritance_mapping.xml:32
#, no-c-format
msgid ""
"In addition, Hibernate supports a fourth, slightly different kind of "
"polymorphism:"
msgstr ""
"En adición, Hibernate soporta un cuarto, ligeramente diferente tipo de "
"polimorfismo:"

#. Tag: para
#: inheritance_mapping.xml:39
#, no-c-format
msgid "implicit polymorphism"
msgstr "polimorfismo implícito"

#. Tag: para
#: inheritance_mapping.xml:45
#, no-c-format
msgid ""
"It is possible to use different mapping strategies for different branches of "
"the same inheritance hierarchy, and then make use of implicit polymorphism "
"to achieve polymorphism across the whole hierarchy. However, Hibernate does "
"not support mixing <literal>&lt;subclass&gt;</literal>, and <literal>&lt;"
"joined-subclass&gt;</literal> and <literal>&lt;union-subclass&gt;</literal> "
"mappings under the same root <literal>&lt;class&gt;</literal> element. It is "
"possible to mix together the table per hierarchy and table per subclass "
"strategies, under the the same <literal>&lt;class&gt;</literal> element, by "
"combining the <literal>&lt;subclass&gt;</literal> and <literal>&lt;join&gt;</"
"literal> elements (see below)."
msgstr ""
"UNTRANSLATED! It is possible to define <literal>subclass</literal>, "
"<literal>union-subclass</literal>, and <literal>joined-subclass</literal> "
"mappings in separate mapping documents, directly beneath <literal>hibernate-"
"mapping</literal>. This allows you to extend a class hierachy just by adding "
"a new mapping file. You must specify an <literal>extends</literal> attribute "
"in the subclass mapping, naming a previously mapped superclass. Note: "
"Previously this feature made the ordering of the mapping documents "
"important. Since Hibernate3, the ordering of mapping files does not matter "
"when using the extends keyword. The ordering inside a single mapping file "
"still needs to be defined as superclasses before subclasses."

#. Tag: para
#: inheritance_mapping.xml:59
#, no-c-format
msgid ""
"It is possible to define <literal>subclass</literal>, <literal>union-"
"subclass</literal>, and <literal>joined-subclass</literal> mappings in "
"separate mapping documents, directly beneath <literal>hibernate-mapping</"
"literal>. This allows you to extend a class hierachy just by adding a new "
"mapping file. You must specify an <literal>extends</literal> attribute in "
"the subclass mapping, naming a previously mapped superclass. Note: "
"Previously this feature made the ordering of the mapping documents "
"important. Since Hibernate3, the ordering of mapping files does not matter "
"when using the extends keyword. The ordering inside a single mapping file "
"still needs to be defined as superclasses before subclasses."
msgstr ""
"Es posible usar estrategias de mapeo diferentes para diferentes "
"ramificaciones de la misma jerarquía de herencia, y entonces usar "
"polimorfismo implícito para conseguir polimorfismo a través de toda la "
"jerarquía. Sin embargo, Hibernate no soporta la mezcla de mapeos "
"<literal>&lt;subclass&gt;</literal>, y <literal>&lt;joined-subclass&gt;</"
"literal> y <literal>&lt;union-subclass&gt;</literal> bajo el mismo elemento "
"<literal>&lt;class&gt;</literal> raíz. Es posible mezclar juntas las "
"estrategias de tabla por jerarquía y tabla por subclase, bajo el mismo "
"elemento <literal>&lt;class&gt;</literal>, combinando los elementos "
"<literal>&lt;subclass&gt;</literal> y <literal>&lt;join&gt;</literal> (ver "
"debajo)."

#. Tag: programlisting
#: inheritance_mapping.xml:70
#, no-c-format
msgid ""
"<![CDATA[\n"
" <hibernate-mapping>\n"
"     <subclass name=\"DomesticCat\" extends=\"Cat\" discriminator-value=\"D"
"\">\n"
"          <property name=\"name\" type=\"string\"/>\n"
"     </subclass>\n"
" </hibernate-mapping>]]>"
msgstr ""

#. Tag: title
#: inheritance_mapping.xml:74
#, no-c-format
msgid "Table per class hierarchy"
msgstr "Tabla por jerarquía de clases"

#. Tag: para
#: inheritance_mapping.xml:76
#, no-c-format
msgid ""
"Suppose we have an interface <literal>Payment</literal>, with implementors "
"<literal>CreditCardPayment</literal>, <literal>CashPayment</literal>, "
"<literal>ChequePayment</literal>. The table per hierarchy mapping would look "
"like:"
msgstr ""
"Supón que tenemos una interface <literal>Payment</literal>, con los "
"implementadores <literal>CreditCardPayment</literal>, <literal>CashPayment</"
"literal>, <literal>ChequePayment</literal>. El mapeo de tabla por jerarquía "
"se vería así:"

#. Tag: programlisting
#: inheritance_mapping.xml:83
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n"
"        <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"        ...\n"
"    </subclass>\n"
"    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n"
"        ...\n"
"    </subclass>\n"
"    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n"
"        ...\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:85
#, no-c-format
msgid ""
"Exactly one table is required. There is one big limitation of this mapping "
"strategy: columns declared by the subclasses, such as <literal>CCTYPE</"
"literal>, may not have <literal>NOT NULL</literal> constraints."
msgstr ""
"Se requiere exactamente una tabla. Hay una gran limitación de esta "
"estrategia de mapeo: las columnas declaradas por las subclases, como "
"<literal>CCTYPE</literal>, no pueden tener restricciones <literal>NOT NULL</"
"literal>."

#. Tag: title
#: inheritance_mapping.xml:94
#, no-c-format
msgid "Table per subclass"
msgstr "Tabla por subclase"

#. Tag: para
#: inheritance_mapping.xml:96
#, no-c-format
msgid "A table per subclass mapping would look like:"
msgstr "Un mapeo de tabla por sublclase se vería así:"

#. Tag: programlisting
#: inheritance_mapping.xml:100
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <joined-subclass name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"    <joined-subclass name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"    <joined-subclass name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:102
#, no-c-format
msgid ""
"Four tables are required. The three subclass tables have primary key "
"associations to the superclass table (so the relational model is actually a "
"one-to-one association)."
msgstr ""
"Se requieren cuatro tablas. Las tres tablas de subclase tienen asociaciones "
"de clave primaria a la tabla de superclase (de modo que en el modelo "
"relacional es realmente una asociación uno-a-uno)."

#. Tag: title
#: inheritance_mapping.xml:111
#, no-c-format
msgid "Table per subclass, using a discriminator"
msgstr "Tabla por subclase, usando un discriminador"

#. Tag: para
#: inheritance_mapping.xml:113
#, no-c-format
msgid ""
"Note that Hibernate's implementation of table per subclass requires no "
"discriminator column. Other object/relational mappers use a different "
"implementation of table per subclass which requires a type discriminator "
"column in the superclass table. The approach taken by Hibernate is much more "
"difficult to implement but arguably more correct from a relational point of "
"view. If you would like to use a discriminator column with the table per "
"subclass strategy, you may combine the use of <literal>&lt;subclass&gt;</"
"literal> and <literal>&lt;join&gt;</literal>, as follow:"
msgstr ""
"Observa que la implementación de Hibernate de tabla por subclase no requiere "
"ninguna columna discriminadora. Otros mapeadores objeto/relacional usan una "
"implementación diferente de tabla por subclase que requiere una columna "
"discriminadora de tipo en la tabla de superclase. Este enfoque es mucho más "
"difícil de implementar pero discutiblemente más correcto desde un punto de "
"vista relacional. Si quisieras usar una columna discriminadora con la "
"estrategia de tabla por subclase, puedes combinar el uso de <literal>&lt;"
"subclass&gt;</literal> y <literal>&lt;join&gt;</literal>, como sigue:"

#. Tag: programlisting
#: inheritance_mapping.xml:125
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n"
"        <join table=\"CREDIT_PAYMENT\">\n"
"            <key column=\"PAYMENT_ID\"/>\n"
"            <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n"
"        <join table=\"CASH_PAYMENT\">\n"
"            <key column=\"PAYMENT_ID\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n"
"        <join table=\"CHEQUE_PAYMENT\" fetch=\"select\">\n"
"            <key column=\"PAYMENT_ID\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:127
#, no-c-format
msgid ""
"The optional <literal>fetch=\"select\"</literal> declaration tells Hibernate "
"not to fetch the <literal>ChequePayment</literal> subclass data using an "
"outer join when querying the superclass."
msgstr ""
"la declaración opcional <literal>fetch=\"select\"</literal> dice a Hibernate "
"que no recupere los datos de la subclase <literal>ChequePayment</literal> "
"usando una unión externa (outer join) al consultar la superclase."

#. Tag: title
#: inheritance_mapping.xml:136
#, no-c-format
msgid "Mixing table per class hierarchy with table per subclass"
msgstr "Mezclando tabla por jerarquía de clases con tabla por subclase"

#. Tag: para
#: inheritance_mapping.xml:138
#, no-c-format
msgid ""
"You may even mix the table per hierarchy and table per subclass strategies "
"using this approach:"
msgstr ""
"Puedes incluso mezclar las estrategias de tabla po jerarquía y tabla por "
"subclase usando este enfoque:"

#. Tag: programlisting
#: inheritance_mapping.xml:143
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n"
"        <join table=\"CREDIT_PAYMENT\">\n"
"            <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n"
"        ...\n"
"    </subclass>\n"
"    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n"
"        ...\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:145
#, no-c-format
msgid ""
"For any of these mapping strategies, a polymorphic association to the root "
"<literal>Payment</literal> class is mapped using <literal>&lt;many-to-one&gt;"
"</literal>."
msgstr ""
"Para cualquiera de estas estrategias de mapeo, una asociación polimórfica a "
"la clase raíz <literal>Payment</literal> es mapeada usando <literal>&lt;many-"
"to-one&gt;</literal>."

#. Tag: programlisting
#: inheritance_mapping.xml:151
#, no-c-format
msgid ""
"<![CDATA[<many-to-one name=\"payment\" column=\"PAYMENT_ID\" class=\"Payment"
"\"/>]]>"
msgstr ""

#. Tag: title
#: inheritance_mapping.xml:156
#, no-c-format
msgid "Table per concrete class"
msgstr "Tabla por clase concreta"

#. Tag: para
#: inheritance_mapping.xml:158
#, no-c-format
msgid ""
"There are two ways we could go about mapping the table per concrete class "
"strategy. The first is to use <literal>&lt;union-subclass&gt;</literal>."
msgstr ""
"Podríamos ir de dos maneras a la estrategia de mapeo de tabla por clase "
"concreta. La primera es usar <literal>&lt;union-subclass&gt;</literal>."

#. Tag: programlisting
#: inheritance_mapping.xml:163
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"sequence\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <union-subclass name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"        <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"        ...\n"
"    </union-subclass>\n"
"    <union-subclass name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"        ...\n"
"    </union-subclass>\n"
"    <union-subclass name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"        ...\n"
"    </union-subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:165
#, no-c-format
msgid ""
"Three tables are involved for the subclasses. Each table defines columns for "
"all properties of the class, including inherited properties."
msgstr ""
"Están implicadas tres tablas. Cada tabla define columnas para todas las "
"propiedades de la clase, inccluyendo las propiedades heredadas."

#. Tag: para
#: inheritance_mapping.xml:170
#, no-c-format
msgid ""
"The limitation of this approach is that if a property is mapped on the "
"superclass, the column name must be the same on all subclass tables. (We "
"might relax this in a future release of Hibernate.) The identity generator "
"strategy is not allowed in union subclass inheritance, indeed the primary "
"key seed has to be shared accross all unioned subclasses of a hierarchy."
msgstr ""
"La limitación de este enfoque es que si una propiedad es mapeada en la "
"superclase, el nombre de columna debe ser el mismo en todas las tablas de "
"subclase. (Podríamos relajar esto en un lanzamiento futuro de Hibernate.) La "
"estrategia de generador de indentidad no está permitida en la herencia de "
"unión de subclase, de hecho la semilla de clave primaria tiene que ser "
"compartida a través de todas las subclases unidas de una jerarquía."

#. Tag: para
#: inheritance_mapping.xml:179
#, no-c-format
msgid ""
"If your superclass is abstract, map it with <literal>abstract=\"true\"</"
"literal>. Of course, if it is not abstract, an additional table (defaults to "
"<literal>PAYMENT</literal> in the example above) is needed to hold instances "
"of the superclass."
msgstr ""
"UNTRANSLATED! If your superclass is abstract, map it with <literal>abstract="
"\"true\"</literal>. Of course, if it is not abstract, an additional table "
"(defaults to <literal>PAYMENT</literal> in the example above) is needed to "
"hold instances of the superclass."

#. Tag: title
#: inheritance_mapping.xml:189
#, no-c-format
msgid "Table per concrete class, using implicit polymorphism"
msgstr "Tabla por clase concreta, usando polimorfismo implícito"

#. Tag: para
#: inheritance_mapping.xml:191
#, no-c-format
msgid "An alternative approach is to make use of implicit polymorphism:"
msgstr "Un enfoque alternativo es hacer uso de polimorfismo implícito:"

#. Tag: programlisting
#: inheritance_mapping.xml:195
#, no-c-format
msgid ""
"<![CDATA[<class name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CREDIT_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"CREDIT_AMOUNT\"/>\n"
"    ...\n"
"</class>\n"
"\n"
"<class name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CASH_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"CASH_AMOUNT\"/>\n"
"    ...\n"
"</class>\n"
"\n"
"<class name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CHEQUE_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"CHEQUE_AMOUNT\"/>\n"
"    ...\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:197
#, no-c-format
msgid ""
"Notice that nowhere do we mention the <literal>Payment</literal> interface "
"explicitly. Also notice that properties of <literal>Payment</literal> are "
"mapped in each of the subclasses. If you want to avoid duplication, consider "
"using XML entities (e.g. <literal>[ &lt;!ENTITY allproperties SYSTEM "
"\"allproperties.xml\"&gt; ]</literal> in the <literal>DOCTYPE</literal> "
"declartion and <literal>&amp;allproperties;</literal> in the mapping)."
msgstr ""
"Nota que en ningún sitio mencionamos la interface <literal>Payment</literal> "
"explícitamente. Nota además que las propiedades de <literal>Payment</"
"literal> son mapeadas en cada una de las subclases. Si quieres evitar "
"duplicación, considera usar entidades XML. (por ejemplo, <literal>[ &lt;!"
"ENTITY allproperties SYSTEM \"allproperties.xml\"&gt; ]</literal> en la "
"declaración <literal>DOCTYPE</literal> y <literal>&amp;allproperties;</"
"literal> en el mapeo)."

#. Tag: para
#: inheritance_mapping.xml:207
#, no-c-format
msgid ""
"The disadvantage of this approach is that Hibernate does not generate SQL "
"<literal>UNION</literal>s when performing polymorphic queries."
msgstr ""
"La desventaja de este enfoque es que Hibernate no genera <literal>UNION</"
"literal>s de SQL al realizar consultas polimórficas."

#. Tag: para
#: inheritance_mapping.xml:212
#, no-c-format
msgid ""
"For this mapping strategy, a polymorphic association to <literal>Payment</"
"literal> is usually mapped using <literal>&lt;any&gt;</literal>."
msgstr ""
"Para esta estrategia de mapeo, una asociación polimórfica a "
"<literal>Payment</literal> es mapeada generalmente usando <literal>&lt;"
"any&gt;</literal>."

#. Tag: programlisting
#: inheritance_mapping.xml:217
#, no-c-format
msgid ""
"<![CDATA[<any name=\"payment\" meta-type=\"string\" id-type=\"long\">\n"
"    <meta-value value=\"CREDIT\" class=\"CreditCardPayment\"/>\n"
"    <meta-value value=\"CASH\" class=\"CashPayment\"/>\n"
"    <meta-value value=\"CHEQUE\" class=\"ChequePayment\"/>\n"
"    <column name=\"PAYMENT_CLASS\"/>\n"
"    <column name=\"PAYMENT_ID\"/>\n"
"</any>]]>"
msgstr ""

#. Tag: title
#: inheritance_mapping.xml:222
#, no-c-format
msgid "Mixing implicit polymorphism with other inheritance mappings"
msgstr "Mezclando polimorfismo implícito con otros mapeos de herencia"

#. Tag: para
#: inheritance_mapping.xml:224
#, no-c-format
msgid ""
"There is one further thing to notice about this mapping. Since the "
"subclasses are each mapped in their own <literal>&lt;class&gt;</literal> "
"element (and since <literal>Payment</literal> is just an interface), each of "
"the subclasses could easily be part of another inheritance hierarchy! (And "
"you can still use polymorphic queries against the <literal>Payment</literal> "
"interface.)"
msgstr ""
"Hay una cosa más por notar acerca de este mapeo. Ya que las subclases se "
"mapean cada una en su propio elemento <literal>&lt;class&gt;</literal> (y ya "
"que <literal>Payment</literal> es sólo una interface), cada una de las "
"subclases podría ser parte de otra jerarquía de herencia! (Y todavía puedes "
"seguir usando consultas polimórficas contra la interface <literal>Payment</"
"literal>.)"

#. Tag: programlisting
#: inheritance_mapping.xml:232
#, no-c-format
msgid ""
"<![CDATA[<class name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CREDIT_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"CREDIT_CARD\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"CREDIT_AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"MasterCardPayment\" discriminator-value=\"MDC\"/>\n"
"    <subclass name=\"VisaPayment\" discriminator-value=\"VISA\"/>\n"
"</class>\n"
"\n"
"<class name=\"NonelectronicTransaction\" table=\"NONELECTRONIC_TXN\">\n"
"    <id name=\"id\" type=\"long\" column=\"TXN_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    ...\n"
"    <joined-subclass name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        <property name=\"amount\" column=\"CASH_AMOUNT\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"    <joined-subclass name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        <property name=\"amount\" column=\"CHEQUE_AMOUNT\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:234
#, no-c-format
msgid ""
"Once again, we don't mention <literal>Payment</literal> explicitly. If we "
"execute a query against the <literal>Payment</literal> interface - for "
"example, <literal>from Payment</literal> - Hibernate automatically returns "
"instances of <literal>CreditCardPayment</literal> (and its subclasses, since "
"they also implement <literal>Payment</literal>), <literal>CashPayment</"
"literal> and <literal>ChequePayment</literal> but not instances of "
"<literal>NonelectronicTransaction</literal>."
msgstr ""
"Una vez más, no mencionamos a <literal>Payment</literal> explícitamente. Si "
"ejecutamos una consulta contra la interface <literal>Payment</literal> - por "
"ejemplo, <literal>from Payment</literal> - Hibernate devuelve "
"automáticamente instancias de <literal>CreditCardPayment</literal> (y sus "
"subclases, ya que ellas también implementan <literal>Payment</literal>), "
"<literal>CashPayment</literal> y <literal>ChequePayment</literal> pero no "
"instancias de <literal>NonelectronicTransaction</literal>."

#. Tag: title
#: inheritance_mapping.xml:249
#, no-c-format
msgid "Limitations"
msgstr "Limitaciones"

#. Tag: para
#: inheritance_mapping.xml:251
#, no-c-format
msgid ""
"There are certain limitations to the \"implicit polymorphism\" approach to "
"the table per concrete-class mapping strategy. There are somewhat less "
"restrictive limitations to <literal>&lt;union-subclass&gt;</literal> "
"mappings."
msgstr ""
"Existen ciertas limitaciones al enfoque de \"polimorfismo implícito\" en la "
"estrategia de mapeo de tabla por clase concreta. Existen limitaciones algo "
"menos restrictivas a los mapeos <literal>&lt;union-subclass&gt;</literal>."

#. Tag: para
#: inheritance_mapping.xml:258
#, no-c-format
msgid ""
"The following table shows the limitations of table per concrete-class "
"mappings, and of implicit polymorphism, in Hibernate."
msgstr ""
"La siguiente tabla muestra las limitaciones de mapeos de tabla por clase "
"concreta, y de polmorfismo implícito, en Hibernate."

#. Tag: title
#: inheritance_mapping.xml:264
#, no-c-format
msgid "Features of inheritance mappings"
msgstr "Funcionalidades de mapeo de herencia"

#. Tag: entry
#: inheritance_mapping.xml:276
#, no-c-format
msgid "Inheritance strategy"
msgstr "Estrategia de herencia"

#. Tag: entry
#: inheritance_mapping.xml:277
#, no-c-format
msgid "Polymorphic many-to-one"
msgstr "muchos-a-uno polimórfica"

#. Tag: entry
#: inheritance_mapping.xml:278
#, no-c-format
msgid "Polymorphic one-to-one"
msgstr "uno-a-uno polimórfica"

#. Tag: entry
#: inheritance_mapping.xml:279
#, no-c-format
msgid "Polymorphic one-to-many"
msgstr "uno-a-muchos polimórfica"

#. Tag: entry
#: inheritance_mapping.xml:280
#, no-c-format
msgid "Polymorphic many-to-many"
msgstr "mushos-a-muchos polimórfica"

#. Tag: entry
#: inheritance_mapping.xml:281
#, no-c-format
msgid "Polymorphic <literal>load()/get()</literal>"
msgstr ""

#. Tag: entry
#: inheritance_mapping.xml:282
#, no-c-format
msgid "Polymorphic queries"
msgstr "Consultas polimórficas"

#. Tag: entry
#: inheritance_mapping.xml:283
#, no-c-format
msgid "Polymorphic joins"
msgstr "Uniones polimórficas"

#. Tag: entry
#: inheritance_mapping.xml:284
#, no-c-format
msgid "Outer join fetching"
msgstr "Recuperación por unión externa (outer join)"

#. Tag: entry
#: inheritance_mapping.xml:289
#, no-c-format
msgid "table per class-hierarchy"
msgstr "tabla por jerarquía de clases"

#. Tag: literal
#: inheritance_mapping.xml:290 inheritance_mapping.xml:301
#: inheritance_mapping.xml:312
#, no-c-format
msgid "&lt;many-to-one&gt;"
msgstr "&lt;many-to-one&gt;"

#. Tag: literal
#: inheritance_mapping.xml:291 inheritance_mapping.xml:302
#: inheritance_mapping.xml:313
#, no-c-format
msgid "&lt;one-to-one&gt;"
msgstr "&lt;one-to-one&gt;"

#. Tag: literal
#: inheritance_mapping.xml:292 inheritance_mapping.xml:303
#, no-c-format
msgid "&lt;one-to-many&gt;"
msgstr "&lt;one-to-many&gt;"

#. Tag: literal
#: inheritance_mapping.xml:293 inheritance_mapping.xml:304
#: inheritance_mapping.xml:315
#, no-c-format
msgid "&lt;many-to-many&gt;"
msgstr "&lt;many-to-many&gt;"

#. Tag: literal
#: inheritance_mapping.xml:294 inheritance_mapping.xml:305
#: inheritance_mapping.xml:316
#, no-c-format
msgid "s.get(Payment.class, id)"
msgstr "s.get(Payment.class, id)"

#. Tag: literal
#: inheritance_mapping.xml:295 inheritance_mapping.xml:306
#: inheritance_mapping.xml:317 inheritance_mapping.xml:328
#, no-c-format
msgid "from Payment p"
msgstr "from Payment p"

#. Tag: literal
#: inheritance_mapping.xml:296 inheritance_mapping.xml:307
#: inheritance_mapping.xml:318
#, no-c-format
msgid "from Order o join o.payment p"
msgstr "from Order o join o.payment p"

#. Tag: emphasis
#: inheritance_mapping.xml:297 inheritance_mapping.xml:308
#: inheritance_mapping.xml:319
#, no-c-format
msgid "supported"
msgstr "soportada"

#. Tag: entry
#: inheritance_mapping.xml:300
#, fuzzy, no-c-format
msgid "<entry>table per subclass</entry>"
msgstr "tabla por subclase"

#. Tag: entry
#: inheritance_mapping.xml:311
#, no-c-format
msgid "table per concrete-class (union-subclass)"
msgstr "tabla por clase concreta (union-subclass)"

#. Tag: entry
#: inheritance_mapping.xml:314
#, no-c-format
msgid ""
"<literal>&lt;one-to-many&gt;</literal> (for <literal>inverse=\"true\"</"
"literal> only)"
msgstr ""

#. Tag: entry
#: inheritance_mapping.xml:322
#, no-c-format
msgid "table per concrete class (implicit polymorphism)"
msgstr "tabla por clase concreta (polimorfismo implícito)"

#. Tag: literal
#: inheritance_mapping.xml:323
#, no-c-format
msgid "&lt;any&gt;"
msgstr "&lt;any&gt;"

#. Tag: emphasis
#: inheritance_mapping.xml:324 inheritance_mapping.xml:325
#: inheritance_mapping.xml:329 inheritance_mapping.xml:330
#, fuzzy, no-c-format
msgid "not supported"
msgstr ""
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"no soportada\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"no soportada\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"no suportadas\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"no soportada"

#. Tag: literal
#: inheritance_mapping.xml:326
#, no-c-format
msgid "&lt;many-to-any&gt;"
msgstr "&lt;many-to-any&gt;"

#. Tag: literal
#: inheritance_mapping.xml:327
#, no-c-format
msgid ""
"s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()"
msgstr ""
"s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()"

#~ msgid "load()/get()"
#~ msgstr "load()/get()"

#~ msgid "Polymorphic <placeholder-1/>"
#~ msgstr "<placeholder-1/> polimórficos"

#~ msgid "inverse=\"true\""
#~ msgstr "inverse=\"true\""

#~ msgid "<placeholder-1/> (for <placeholder-2/> only)"
#~ msgstr "<placeholder-1/> (para <placeholder-2/> solamente)"
