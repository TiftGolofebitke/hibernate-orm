msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2007-10-19 10:34-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: session_api.xml:5(title) 
msgid "Working with objects"
msgstr ""

#: session_api.xml:7(para) 
msgid "Hibernate is a full object/relational mapping solution that not only shields the developer from the details of the underlying database management system, but also offers <emphasis>state management</emphasis> of objects. This is, contrary to the management of SQL <literal>statements</literal> in common JDBC/SQL persistence layers, a very natural object-oriented view of persistence in Java applications."
msgstr ""

#: session_api.xml:16(para) 
msgid "In other words, Hibernate application developers should always think about the <emphasis>state</emphasis> of their objects, and not necessarily about the execution of SQL statements. This part is taken care of by Hibernate and is only relevant for the application developer when tuning the performance of the system."
msgstr ""

#: session_api.xml:24(title) 
msgid "Hibernate object states"
msgstr ""

#: session_api.xml:26(para) 
msgid "Hibernate defines and supports the following object states:"
msgstr ""

#: session_api.xml:32(para) 
msgid "<emphasis>Transient</emphasis> - an object is transient if it has just been instantiated using the <literal>new</literal> operator, and it is not associated with a Hibernate <literal>Session</literal>. It has no persistent representation in the database and no identifier value has been assigned. Transient instances will be destroyed by the garbage collector if the application doesn't hold a reference anymore. Use the Hibernate <literal>Session</literal> to make an object persistent (and let Hibernate take care of the SQL statements that need to be executed for this transition)."
msgstr ""

#: session_api.xml:44(para) 
msgid "<emphasis>Persistent</emphasis> - a persistent instance has a representation in the database and an identifier value. It might just have been saved or loaded, however, it is by definition in the scope of a <literal>Session</literal>. Hibernate will detect any changes made to an object in persistent state and synchronize the state with the database when the unit of work completes. Developers don't execute manual <literal>UPDATE</literal> statements, or <literal>DELETE</literal> statements when an object should be made transient."
msgstr ""

#: session_api.xml:55(para) 
msgid "<emphasis>Detached</emphasis> - a detached instance is an object that has been persistent, but its <literal>Session</literal> has been closed. The reference to the object is still valid, of course, and the detached instance might even be modified in this state. A detached instance can be reattached to a new <literal>Session</literal> at a later point in time, making it (and all the modifications) persistent again. This feature enables a programming model for long running units of work that require user think-time. We call them <emphasis>application transactions</emphasis>, i.e. a unit of work from the point of view of the user."
msgstr ""

#: session_api.xml:69(para) 
msgid "We'll now discuss the states and state transitions (and the Hibernate methods that trigger a transition) in more detail."
msgstr ""

#: session_api.xml:77(title) 
msgid "Making objects persistent"
msgstr ""

#: session_api.xml:79(para) 
msgid "Newly instantiated instances of a a persistent class are considered <emphasis>transient</emphasis> by Hibernate. We can make a transient instance <emphasis>persistent</emphasis> by associating it with a session:"
msgstr ""

#: session_api.xml:92(para) 
msgid "If <literal>Cat</literal> has a generated identifier, the identifier is generated and assigned to the <literal>cat</literal> when <literal>save()</literal> is called. If <literal>Cat</literal> has an <literal>assigned</literal> identifier, or a composite key, the identifier should be assigned to the <literal>cat</literal> instance before calling <literal>save()</literal>. You may also use <literal>persist()</literal> instead of <literal>save()</literal>, with the semantics defined in the EJB3 early draft."
msgstr ""

#: session_api.xml:104(para) 
msgid "<literal>persist()</literal> makes a transient instance persistent. However, it doesn't guarantee that the identifier value will be assigned to the persistent instance immediately, the assignment might happen at flush time. <literal>persist()</literal> also guarantees that it will not execute an <literal>INSERT</literal> statement if it is called outside of transaction boundaries. This is useful in long-running conversations with an extended Session/persistence context."
msgstr ""

#: session_api.xml:115(para) 
msgid "<literal>save()</literal> does guarantee to return an identifier. If an INSERT has to be executed to get the identifier ( e.g. \"identity\" generator, not \"sequence\"), this INSERT happens immediately, no matter if you are inside or outside of a transaction. This is problematic in a long-running conversation with an extended Session/persistence context."
msgstr ""

#: session_api.xml:125(para) 
msgid "Alternatively, you may assign the identifier using an overloaded version of <literal>save()</literal>."
msgstr ""

#: session_api.xml:138(para) 
msgid "If the object you make persistent has associated objects (e.g. the <literal>kittens</literal> collection in the previous example), these objects may be made persistent in any order you like unless you have a <literal>NOT NULL</literal> constraint upon a foreign key column. There is never a risk of violating foreign key constraints. However, you might violate a <literal>NOT NULL</literal> constraint if you <literal>save()</literal> the objects in the wrong order."
msgstr ""

#: session_api.xml:148(para) 
msgid "Usually you don't bother with this detail, as you'll very likely use Hibernate's <emphasis>transitive persistence</emphasis> feature to save the associated objects automatically. Then, even <literal>NOT NULL</literal> constraint violations don't occur - Hibernate will take care of everything. Transitive persistence is discussed later in this chapter."
msgstr ""

#: session_api.xml:159(title) 
msgid "Loading an object"
msgstr ""

#: session_api.xml:161(para) 
msgid "The <literal>load()</literal> methods of <literal>Session</literal> gives you a way to retrieve a persistent instance if you already know its identifier. <literal>load()</literal> takes a class object and will load the state into a newly instantiated instance of that class, in persistent state."
msgstr ""

#: session_api.xml:174(para) 
msgid "Alternatively, you can load state into a given instance:"
msgstr ""

#: session_api.xml:183(para) 
msgid "Note that <literal>load()</literal> will throw an unrecoverable exception if there is no matching database row. If the class is mapped with a proxy, <literal>load()</literal> just returns an uninitialized proxy and does not actually hit the database until you invoke a method of the proxy. This behaviour is very useful if you wish to create an association to an object without actually loading it from the database. It also allows multiple instances to be loaded as a batch if <literal>batch-size</literal> is defined for the class mapping."
msgstr ""

#: session_api.xml:194(para) 
msgid "If you are not certain that a matching row exists, you should use the <literal>get()</literal> method, which hits the database immediately and returns null if there is no matching row."
msgstr ""

#: session_api.xml:207(para) 
msgid "You may even load an object using an SQL <literal>SELECT ... FOR UPDATE</literal>, using a <literal>LockMode</literal>. See the API documentation for more information."
msgstr ""

#: session_api.xml:214(para) 
msgid "Note that any associated instances or contained collections are <emphasis>not</emphasis> selected <literal>FOR UPDATE</literal>, unless you decide to specify <literal>lock</literal> or <literal>all</literal> as a cascade style for the association."
msgstr ""

#: session_api.xml:221(para) 
msgid "It is possible to re-load an object and all its collections at any time, using the <literal>refresh()</literal> method. This is useful when database triggers are used to initialize some of the properties of the object."
msgstr ""

#: session_api.xml:231(para) 
msgid "An important question usually appears at this point: How much does Hibernate load from the database and how many SQL <literal>SELECT</literal>s will it use? This depends on the <emphasis>fetching strategy</emphasis> and is explained in <xref linkend=\"performance-fetching\"/>."
msgstr ""

#: session_api.xml:241(title) 
msgid "Querying"
msgstr ""

#: session_api.xml:243(para) 
msgid "If you don't know the identifiers of the objects you are looking for, you need a query. Hibernate supports an easy-to-use but powerful object oriented query language (HQL). For programmatic query creation, Hibernate supports a sophisticated Criteria and Example query feature (QBC and QBE). You may also express your query in the native SQL of your database, with optional support from Hibernate for result set conversion into objects."
msgstr ""

#: session_api.xml:253(title) 
msgid "Executing queries"
msgstr ""

#: session_api.xml:255(para) 
msgid "HQL and native SQL queries are represented with an instance of <literal>org.hibernate.Query</literal>. This interface offers methods for parameter binding, result set handling, and for the execution of the actual query. You always obtain a <literal>Query</literal> using the current <literal>Session</literal>:"
msgstr ""

#: session_api.xml:286(para) 
msgid "A query is usually executed by invoking <literal>list()</literal>, the result of the query will be loaded completely into a collection in memory. Entity instances retrieved by a query are in persistent state. The <literal>uniqueResult()</literal> method offers a shortcut if you know your query will only return a single object. Note that queries that make use of eager fetching of collections usually return duplicates of the root objects (but with their collections initialized). You can filter these duplicates simply through a <literal>Set</literal>."
msgstr ""

#: session_api.xml:298(title) 
msgid "Iterating results"
msgstr ""

#: session_api.xml:300(para) 
msgid "Occasionally, you might be able to achieve better performance by executing the query using the <literal>iterate()</literal> method. This will only usually be the case if you expect that the actual entity instances returned by the query will already be in the session or second-level cache. If they are not already cached, <literal>iterate()</literal> will be slower than <literal>list()</literal> and might require many database hits for a simple query, usually <emphasis>1</emphasis> for the initial select which only returns identifiers, and <emphasis>n</emphasis> additional selects to initialize the actual instances."
msgstr ""

#: session_api.xml:327(title) 
msgid "Queries that return tuples"
msgstr ""

#: session_api.xml:329(para) 
msgid "Hibernate queries sometimes return tuples of objects, in which case each tuple is returned as an array:"
msgstr ""

#: session_api.xml:349(title) 
msgid "Scalar results"
msgstr ""

#: session_api.xml:351(para) 
msgid "Queries may specify a property of a class in the <literal>select</literal> clause. They may even call SQL aggregate functions. Properties or aggregates are considered \"scalar\" results (and not entities in persistent state)."
msgstr ""

#: session_api.xml:374(title) 
msgid "Bind parameters"
msgstr ""

#: session_api.xml:376(para) 
msgid "Methods on <literal>Query</literal> are provided for binding values to named parameters or JDBC-style <literal>?</literal> parameters. <emphasis>Contrary to JDBC, Hibernate numbers parameters from zero.</emphasis> Named parameters are identifiers of the form <literal>:name</literal> in the query string. The advantages of named parameters are:"
msgstr ""

#: session_api.xml:386(para) 
msgid "named parameters are insensitive to the order they occur in the query string"
msgstr ""

#: session_api.xml:392(para) 
msgid "they may occur multiple times in the same query"
msgstr ""

#: session_api.xml:397(para) 
msgid "they are self-documenting"
msgstr ""

#: session_api.xml:424(title) 
msgid "Pagination"
msgstr ""

#: session_api.xml:426(para) 
msgid "If you need to specify bounds upon your result set (the maximum number of rows you want to retrieve and / or the first row you want to retrieve) you should use methods of the <literal>Query</literal> interface:"
msgstr ""

#: session_api.xml:437(para) 
msgid "Hibernate knows how to translate this limit query into the native SQL of your DBMS."
msgstr ""

#: session_api.xml:445(title) 
msgid "Scrollable iteration"
msgstr ""

#: session_api.xml:447(para) 
msgid "If your JDBC driver supports scrollable <literal>ResultSet</literal>s, the <literal>Query</literal> interface may be used to obtain a <literal>ScrollableResults</literal> object, which allows flexible navigation of the query results."
msgstr ""

#: session_api.xml:476(para) 
msgid "Note that an open database connection (and cursor) is required for this functionality, use <literal>setMaxResult()</literal>/<literal>setFirstResult()</literal> if you need offline pagination functionality."
msgstr ""

#: session_api.xml:485(title) 
msgid "Externalizing named queries"
msgstr ""

#: session_api.xml:487(para) 
msgid "You may also define named queries in the mapping document. (Remember to use a <literal>CDATA</literal> section if your query contains characters that could be interpreted as markup.)"
msgstr ""

#: session_api.xml:499(para) 
msgid "Parameter binding and executing is done programatically:"
msgstr ""

#: session_api.xml:508(para) 
msgid "Note that the actual program code is independent of the query language that is used, you may also define native SQL queries in metadata, or migrate existing queries to Hibernate by placing them in mapping files."
msgstr ""

#: session_api.xml:514(para) 
msgid "Also note that a query declaration inside a <literal>&lt;hibernate-mapping&gt;</literal> element requires a global unique name for the query, while a query declaration inside a <literal>&lt;class&gt;</literal> element is made unique automatically by prepending the fully qualified name of the class, for example <literal>eg.Cat.ByNameAndMaximumWeight</literal>."
msgstr ""

#: session_api.xml:527(title) 
msgid "Filtering collections"
msgstr ""

#: session_api.xml:528(para) 
msgid "A collection <emphasis>filter</emphasis> is a special type of query that may be applied to a persistent collection or array. The query string may refer to <literal>this</literal>, meaning the current collection element."
msgstr ""

#: session_api.xml:541(para) 
msgid "The returned collection is considered a bag, and it's a copy of the given collection. The original collection is not modified (this is contrary to the implication of the name \"filter\", but consistent with expected behavior)."
msgstr ""

#: session_api.xml:547(para) 
msgid "Observe that filters do not require a <literal>from</literal> clause (though they may have one if required). Filters are not limited to returning the collection elements themselves."
msgstr ""

#: session_api.xml:557(para) 
msgid "Even an empty filter query is useful, e.g. to load a subset of elements in a huge collection:"
msgstr ""

#: session_api.xml:570(title) 
msgid "Criteria queries"
msgstr ""

#: session_api.xml:572(para) 
msgid "HQL is extremely powerful but some developers prefer to build queries dynamically, using an object-oriented API, rather than building query strings. Hibernate provides an intuitive <literal>Criteria</literal> query API for these cases:"
msgstr ""

#: session_api.xml:583(para) 
msgid "The <literal>Criteria</literal> and the associated <literal>Example</literal> API are discussed in more detail in <xref linkend=\"querycriteria\"/>."
msgstr ""

#: session_api.xml:591(title) 
msgid "Queries in native SQL"
msgstr ""

#: session_api.xml:593(para) 
msgid "You may express a query in SQL, using <literal>createSQLQuery()</literal> and let Hibernate take care of the mapping from result sets to objects. Note that you may at any time call <literal>session.connection()</literal> and use the JDBC <literal>Connection</literal> directly. If you chose to use the Hibernate API, you must enclose SQL aliases in braces:"
msgstr ""

#: session_api.xml:612(para) 
msgid "SQL queries may contain named and positional parameters, just like Hibernate queries. More information about native SQL queries in Hibernate can be found in <xref linkend=\"querysql\"/>."
msgstr ""

#: session_api.xml:623(title) 
msgid "Modifying persistent objects"
msgstr ""

#: session_api.xml:625(para) 
msgid "<emphasis>Transactional persistent instances</emphasis> (ie. objects loaded, saved, created or queried by the <literal>Session</literal>) may be manipulated by the application and any changes to persistent state will be persisted when the <literal>Session</literal> is <emphasis>flushed</emphasis> (discussed later in this chapter). There is no need to call a particular method (like <literal>update()</literal>, which has a different purpose) to make your modifications persistent. So the most straightforward way to update the state of an object is to <literal>load()</literal> it, and then manipulate it directly, while the <literal>Session</literal> is open:"
msgstr ""

#: session_api.xml:640(para) 
msgid "Sometimes this programming model is inefficient since it would require both an SQL <literal>SELECT</literal> (to load an object) and an SQL <literal>UPDATE</literal> (to persist its updated state) in the same session. Therefore Hibernate offers an alternate approach, using detached instances."
msgstr ""

#: session_api.xml:649(literal) 
msgid "UPDATE"
msgstr ""

#: session_api.xml:649(literal) 
msgid "DELETE"
msgstr ""

#: session_api.xml:650(emphasis) 
msgid "state management"
msgstr ""

#: session_api.xml:651(emphasis) 
msgid "statements"
msgstr ""

#: session_api.xml:652(literal) 
msgid "Connection"
msgstr ""

#: session_api.xml:653(literal) 
msgid "session.connection()"
msgstr ""

#: session_api.xml:648(emphasis) 
msgid "Note that Hibernate does not offer its own API for direct execution of <placeholder-1/> or <placeholder-2/> statements. Hibernate is a <placeholder-3/> service, you don't have to think in <placeholder-4/> to use it. JDBC is a perfect API for executing SQL statements, you can get a JDBC <placeholder-5/> at any time by calling <placeholder-6/>. Furthermore, the notion of mass operations conflicts with object/relational mapping for online transaction processing-oriented applications. Future versions of Hibernate may however provide special mass operation functions. See <xref linkend=\"batch\"/> for some possible batch operation tricks."
msgstr ""

#: session_api.xml:663(title) 
msgid "Modifying detached objects"
msgstr ""

#: session_api.xml:665(para) 
msgid "Many applications need to retrieve an object in one transaction, send it to the UI layer for manipulation, then save the changes in a new transaction. Applications that use this kind of approach in a high-concurrency environment usually use versioned data to ensure isolation for the \"long\" unit of work."
msgstr ""

#: session_api.xml:672(para) 
msgid "Hibernate supports this model by providing for reattachment of detached instances using the <literal>Session.update()</literal> or <literal>Session.merge()</literal> methods:"
msgstr ""

#: session_api.xml:690(para) 
msgid "If the <literal>Cat</literal> with identifier <literal>catId</literal> had already been loaded by <literal>secondSession</literal> when the application tried to reattach it, an exception would have been thrown."
msgstr ""

#: session_api.xml:696(para) 
msgid "Use <literal>update()</literal> if you are sure that the session does not contain an already persistent instance with the same identifier, and <literal>merge()</literal> if you want to merge your modifications at any time without consideration of the state of the session. In other words, <literal>update()</literal> is usually the first method you would call in a fresh session, ensuring that reattachment of your detached instances is the first operation that is executed."
msgstr ""

#: session_api.xml:705(para) 
msgid "The application should individually <literal>update()</literal> detached instances reachable from the given detached instance if and <emphasis>only</emphasis> if it wants their state also updated. This can be automated of course, using <emphasis>transitive persistence</emphasis>, see <xref linkend=\"objectstate-transitive\"/>."
msgstr ""

#: session_api.xml:712(para) 
msgid "The <literal>lock()</literal> method also allows an application to reassociate an object with a new session. However, the detached instance has to be unmodified!"
msgstr ""

#: session_api.xml:724(para) 
msgid "Note that <literal>lock()</literal> can be used with various <literal>LockMode</literal>s, see the API documentation and the chapter on transaction handling for more information. Reattachment is not the only usecase for <literal>lock()</literal>."
msgstr ""

#: session_api.xml:731(para) 
msgid "Other models for long units of work are discussed in <xref linkend=\"transactions-optimistic\"/>."
msgstr ""

#: session_api.xml:738(title) 
msgid "Automatic state detection"
msgstr ""

#: session_api.xml:740(para) 
msgid "Hibernate users have requested a general purpose method that either saves a transient instance by generating a new identifier or updates/reattaches the detached instances associated with its current identifier. The <literal>saveOrUpdate()</literal> method implements this functionality."
msgstr ""

#: session_api.xml:758(para) 
msgid "The usage and semantics of <literal>saveOrUpdate()</literal> seems to be confusing for new users. Firstly, so long as you are not trying to use instances from one session in another new session, you should not need to use <literal>update()</literal>, <literal>saveOrUpdate()</literal>, or <literal>merge()</literal>. Some whole applications will never use either of these methods."
msgstr ""

#: session_api.xml:766(para) 
msgid "Usually <literal>update()</literal> or <literal>saveOrUpdate()</literal> are used in the following scenario:"
msgstr ""

#: session_api.xml:773(para) 
msgid "the application loads an object in the first session"
msgstr ""

#: session_api.xml:778(para) 
msgid "the object is passed up to the UI tier"
msgstr ""

#: session_api.xml:783(para) 
msgid "some modifications are made to the object"
msgstr ""

#: session_api.xml:788(para) 
msgid "the object is passed back down to the business logic tier"
msgstr ""

#: session_api.xml:793(para) 
msgid "the application persists these modifications by calling <literal>update()</literal> in a second session"
msgstr ""

#: session_api.xml:800(para) 
msgid "<literal>saveOrUpdate()</literal> does the following:"
msgstr ""

#: session_api.xml:806(para) 
msgid "if the object is already persistent in this session, do nothing"
msgstr ""

#: session_api.xml:811(para) 
msgid "if another object associated with the session has the same identifier, throw an exception"
msgstr ""

#: session_api.xml:817(para) 
msgid "if the object has no identifier property, <literal>save()</literal> it"
msgstr ""

#: session_api.xml:822(para) 
msgid "if the object's identifier has the value assigned to a newly instantiated object, <literal>save()</literal> it"
msgstr ""

#: session_api.xml:828(para) 
msgid "if the object is versioned (by a <literal>&lt;version&gt;</literal> or <literal>&lt;timestamp&gt;</literal>), and the version property value is the same value assigned to a newly instantiated object, <literal>save()</literal> it"
msgstr ""

#: session_api.xml:836(para) 
msgid "otherwise <literal>update()</literal> the object"
msgstr ""

#: session_api.xml:842(para) 
msgid "and <literal>merge()</literal> is very different:"
msgstr ""

#: session_api.xml:848(para) 
msgid "if there is a persistent instance with the same identifier currently associated with the session, copy the state of the given object onto the persistent instance"
msgstr ""

#: session_api.xml:855(para) 
msgid "if there is no persistent instance currently associated with the session, try to load it from the database, or create a new persistent instance"
msgstr ""

#: session_api.xml:861(para) 
msgid "the persistent instance is returned"
msgstr ""

#: session_api.xml:866(para) 
msgid "the given instance does not become associated with the session, it remains detached"
msgstr ""

#: session_api.xml:876(title) 
msgid "Deleting persistent objects"
msgstr ""

#: session_api.xml:878(para) 
msgid "<literal>Session.delete()</literal> will remove an object's state from the database. Of course, your application might still hold a reference to a deleted object. It's best to think of <literal>delete()</literal> as making a persistent instance transient."
msgstr ""

#: session_api.xml:887(para) 
msgid "You may delete objects in any order you like, without risk of foreign key constraint violations. It is still possible to violate a <literal>NOT NULL</literal> constraint on a foreign key column by deleting objects in the wrong order, e.g. if you delete the parent, but forget to delete the children."
msgstr ""

#: session_api.xml:898(title) 
msgid "Replicating object between two different datastores"
msgstr ""

#: session_api.xml:900(para) 
msgid "It is occasionally useful to be able to take a graph of persistent instances and make them persistent in a different datastore, without regenerating identifier values."
msgstr ""

#: session_api.xml:920(para) 
msgid "The <literal>ReplicationMode</literal> determines how <literal>replicate()</literal> will deal with conflicts with existing rows in the database."
msgstr ""

#: session_api.xml:927(para) 
msgid "<literal>ReplicationMode.IGNORE</literal> - ignore the object when there is an existing database row with the same identifier"
msgstr ""

#: session_api.xml:933(para) 
msgid "<literal>ReplicationMode.OVERWRITE</literal> - overwrite any existing database row with the same identifier"
msgstr ""

#: session_api.xml:939(para) 
msgid "<literal>ReplicationMode.EXCEPTION</literal> - throw an exception if there is an existing database row with the same identifier"
msgstr ""

#: session_api.xml:945(para) 
msgid "<literal>ReplicationMode.LATEST_VERSION</literal> - overwrite the row if its version number is earlier than the version number of the object, or ignore the object otherwise"
msgstr ""

#: session_api.xml:953(para) 
msgid "Usecases for this feature include reconciling data entered into different database instances, upgrading system configuration information during product upgrades, rolling back changes made during non-ACID transactions and more."
msgstr ""

#: session_api.xml:962(title) 
msgid "Flushing the Session"
msgstr ""

#: session_api.xml:964(para) 
msgid "From time to time the <literal>Session</literal> will execute the SQL statements needed to synchronize the JDBC connection's state with the state of objects held in memory. This process, <emphasis>flush</emphasis>, occurs by default at the following points"
msgstr ""

#: session_api.xml:973(para) 
msgid "before some query executions"
msgstr ""

#: session_api.xml:978(para) 
msgid "from <literal>org.hibernate.Transaction.commit()</literal>"
msgstr ""

#: session_api.xml:983(para) 
msgid "from <literal>Session.flush()</literal>"
msgstr ""

#: session_api.xml:989(para) 
msgid "The SQL statements are issued in the following order"
msgstr ""

#: session_api.xml:995(para) 
msgid "all entity insertions, in the same order the corresponding objects were saved using <literal>Session.save()</literal>"
msgstr ""

#: session_api.xml:1001(para) 
msgid "all entity updates"
msgstr ""

#: session_api.xml:1006(para) 
msgid "all collection deletions"
msgstr ""

#: session_api.xml:1011(para) 
msgid "all collection element deletions, updates and insertions"
msgstr ""

#: session_api.xml:1016(para) 
msgid "all collection insertions"
msgstr ""

#: session_api.xml:1021(para) 
msgid "all entity deletions, in the same order the corresponding objects were deleted using <literal>Session.delete()</literal>"
msgstr ""

#: session_api.xml:1028(para) 
msgid "(An exception is that objects using <literal>native</literal> ID generation are inserted when they are saved.)"
msgstr ""

#: session_api.xml:1033(para) 
msgid "Except when you explicity <literal>flush()</literal>, there are absolutely no guarantees about <emphasis>when</emphasis> the <literal>Session</literal> executes the JDBC calls, only the <emphasis>order</emphasis> in which they are executed. However, Hibernate does guarantee that the <literal>Query.list(..)</literal> will never return stale data; nor will they return the wrong data."
msgstr ""

#: session_api.xml:1041(para) 
msgid "It is possible to change the default behavior so that flush occurs less frequently. The <literal>FlushMode</literal> class defines three different modes: only flush at commit time (and only when the Hibernate <literal>Transaction</literal> API is used), flush automatically using the explained routine, or never flush unless <literal>flush()</literal> is called explicitly. The last mode is useful for long running units of work, where a <literal>Session</literal> is kept open and disconnected for a long time (see <xref linkend=\"transactions-optimistic-longsession\"/>)."
msgstr ""

#: session_api.xml:1066(para) 
msgid "During flush, an exception might occur (e.g. if a DML operation violates a constraint). Since handling exceptions involves some understanding of Hibernate's transactional behavior, we discuss it in <xref linkend=\"transactions\"/>."
msgstr ""

#: session_api.xml:1075(title) 
msgid "Transitive persistence"
msgstr ""

#: session_api.xml:1077(para) 
msgid "It is quite cumbersome to save, delete, or reattach individual objects, especially if you deal with a graph of associated objects. A common case is a parent/child relationship. Consider the following example:"
msgstr ""

#: session_api.xml:1083(para) 
msgid "If the children in a parent/child relationship would be value typed (e.g. a collection of addresses or strings), their life cycle would depend on the parent and no further action would be required for convenient \"cascading\" of state changes. When the parent is saved, the value-typed child objects are saved as well, when the parent is deleted, the children will be deleted, etc. This even works for operations such as the removal of a child from the collection; Hibernate will detect this and, since value-typed objects can't have shared references, delete the child from the database."
msgstr ""

#: session_api.xml:1094(para) 
msgid "Now consider the same scenario with parent and child objects being entities, not value-types (e.g. categories and items, or parent and child cats). Entities have their own life cycle, support shared references (so removing an entity from the collection does not mean it can be deleted), and there is by default no cascading of state from one entity to any other associated entities. Hibernate does not implement <emphasis>persistence by reachability</emphasis> by default."
msgstr ""

#: session_api.xml:1103(para) 
msgid "For each basic operation of the Hibernate session - including <literal>persist(), merge(), saveOrUpdate(), delete(), lock(), refresh(), evict(), replicate()</literal> - there is a corresponding cascade style. Respectively, the cascade styles are named <literal>create, merge, save-update, delete, lock, refresh, evict, replicate</literal>. If you want an operation to be cascaded along an association, you must indicate that in the mapping document. For example:"
msgstr ""

#: session_api.xml:1114(para) 
msgid "Cascade styles my be combined:"
msgstr ""

#: session_api.xml:1120(para) 
msgid "You may even use <literal>cascade=\"all\"</literal> to specify that <emphasis>all</emphasis> operations should be cascaded along the association. The default <literal>cascade=\"none\"</literal> specifies that no operations are to be cascaded."
msgstr ""

#: session_api.xml:1126(para) 
msgid "A special cascade style, <literal>delete-orphan</literal>, applies only to one-to-many associations, and indicates that the <literal>delete()</literal> operation should be applied to any child object that is removed from the association."
msgstr ""

#: session_api.xml:1133(para) 
msgid "Recommendations:"
msgstr ""

#: session_api.xml:1139(para) 
msgid "It doesn't usually make sense to enable cascade on a <literal>&lt;many-to-one&gt;</literal> or <literal>&lt;many-to-many&gt;</literal> association. Cascade is often useful for <literal>&lt;one-to-one&gt;</literal> and <literal>&lt;one-to-many&gt;</literal> associations."
msgstr ""

#: session_api.xml:1147(para) 
msgid "If the child object's lifespan is bounded by the lifespan of the parent object, make it a <emphasis>life cycle object</emphasis> by specifying <literal>cascade=\"all,delete-orphan\"</literal>."
msgstr ""

#: session_api.xml:1154(para) 
msgid "Otherwise, you might not need cascade at all. But if you think that you will often be working with the parent and children together in the same transaction, and you want to save yourself some typing, consider using <literal>cascade=\"persist,merge,save-update\"</literal>."
msgstr ""

#: session_api.xml:1162(para) 
msgid "Mapping an association (either a single valued association, or a collection) with <literal>cascade=\"all\"</literal> marks the association as a <emphasis>parent/child</emphasis> style relationship where save/update/delete of the parent results in save/update/delete of the child or children."
msgstr ""

#: session_api.xml:1168(para) 
msgid "Futhermore, a mere reference to a child from a persistent parent will result in save/update of the child. This metaphor is incomplete, however. A child which becomes unreferenced by its parent is <emphasis>not</emphasis> automatically deleted, except in the case of a <literal>&lt;one-to-many&gt;</literal> association mapped with <literal>cascade=\"delete-orphan\"</literal>. The precise semantics of cascading operations for a parent/child relationship are as follows:"
msgstr ""

#: session_api.xml:1179(para) 
msgid "If a parent is passed to <literal>persist()</literal>, all children are passed to <literal>persist()</literal>"
msgstr ""

#: session_api.xml:1185(para) 
msgid "If a parent is passed to <literal>merge()</literal>, all children are passed to <literal>merge()</literal>"
msgstr ""

#: session_api.xml:1191(para) 
msgid "If a parent is passed to <literal>save()</literal>, <literal>update()</literal> or <literal>saveOrUpdate()</literal>, all children are passed to <literal>saveOrUpdate()</literal>"
msgstr ""

#: session_api.xml:1197(para) 
msgid "If a transient or detached child becomes referenced by a persistent parent, it is passed to <literal>saveOrUpdate()</literal>"
msgstr ""

#: session_api.xml:1203(para) 
msgid "If a parent is deleted, all children are passed to <literal>delete()</literal>"
msgstr ""

#: session_api.xml:1208(para) 
msgid "If a child is dereferenced by a persistent parent, <emphasis>nothing special happens</emphasis> - the application should explicitly delete the child if necessary - unless <literal>cascade=\"delete-orphan\"</literal>, in which case the \"orphaned\" child is deleted."
msgstr ""

#: session_api.xml:1217(para) 
msgid "Finally, note that cascading of operations can be applied to an object graph at <emphasis>call time</emphasis> or at <emphasis>flush time</emphasis>. All operations, if enabled, are cascaded to associated entities reachable when the operation is executed. However, <literal>save-upate</literal> and <literal>delete-orphan</literal> are transitive for all associated entities reachable during flush of the <literal>Session</literal>."
msgstr ""

#: session_api.xml:1229(title) 
msgid "Using metadata"
msgstr ""

#: session_api.xml:1231(para) 
msgid "Hibernate requires a very rich meta-level model of all entity and value types. From time to time, this model is very useful to the application itself. For example, the application might use Hibernate's metadata to implement a \"smart\" deep-copy algorithm that understands which objects should be copied (eg. mutable value types) and which should not (eg. immutable value types and, possibly, associated entities)."
msgstr ""

#: session_api.xml:1238(para) 
msgid "Hibernate exposes metadata via the <literal>ClassMetadata</literal> and <literal>CollectionMetadata</literal> interfaces and the <literal>Type</literal> hierarchy. Instances of the metadata interfaces may be obtained from the <literal>SessionFactory</literal>."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: session_api.xml:0(None) 
msgid "translator-credits"
msgstr ""

