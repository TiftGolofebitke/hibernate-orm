msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2007-10-25 07:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: tutorial.xml:7
#, no-c-format
msgid "Introduction to Hibernate"
msgstr "Introducción a Hibernate"

#. Tag: title
#: tutorial.xml:10
#, no-c-format
msgid "Preface"
msgstr "Prefacio"

#. Tag: para
#: tutorial.xml:12
#, no-c-format
msgid ""
"This chapter is an introductory tutorial for new users of Hibernate. We "
"start with a simple command line application using an in-memory database and "
"develop it in easy to understand steps."
msgstr ""
"Este capítulo es un tutorial introductorio de Hibernate. Comenzamos con una "
"aplicación simple de línea de comandos usando un base de datos en-memoria y "
"desarrollándola en fácil para entender los pasos."

#. Tag: para
#: tutorial.xml:18
#, no-c-format
msgid ""
"This tutorial is intended for new users of Hibernate but requires Java and "
"SQL knowledge. It is based on a tutorial by Michael Gloegl, the third-party "
"libraries we name are for JDK 1.4 and 5.0. You might need others for JDK 1.3."
msgstr ""
"Este tutorial está concebido para usuarios nuevos de Hibernate pero requiere "
"conocimiento en Java y SQL. Está basado en un tutorial de Michael Gloegl. "
"Las bibliotecas de terceros que mencionamos son para JDK 1.4 y 5.0. Podrías "
"necesitar otras para JDK 1.3."

#. Tag: para
#: tutorial.xml:24
#, no-c-format
msgid ""
"The source code for the tutorial is included in the distribution in the "
"<literal>doc/reference/tutorial/</literal> directory."
msgstr ""
"UNTRANSLATED!!! The source code for the tutorial is included in the "
"distribution in the <literal>doc/reference/tutorial/</literal> directory."

#. Tag: title
#: tutorial.xml:32
#, no-c-format
msgid "Part 1 - The first Hibernate Application"
msgstr "Parte 1 - La primera Aplicación Hibernate"

#. Tag: para
#: tutorial.xml:34
#, no-c-format
msgid ""
"First, we'll create a simple console-based Hibernate application. We use an "
"Java database (HSQL DB), so we do not have to install any database server."
msgstr ""
"Primero, crearemos una aplicación simple de Hibenate basada en consola. "
"Usamos usamos una base de datos en-memoria (HSQL DB), de modo que no "
"necesitamos instalar ningún servidor de base de datos."

#. Tag: para
#: tutorial.xml:39
#, no-c-format
msgid ""
"Let's assume we need a small database application that can store events we "
"want to attend, and information about the hosts of these events."
msgstr ""
"Asumamos que necesitamos una aplicación pequeña de base de datos que pueda "
"almacenar eventos que queremos atender, e información acerca de los hostales "
"de estos eventos."

#. Tag: para
#: tutorial.xml:44
#, no-c-format
msgid ""
"The first thing we do, is set up our development directory and put all the "
"Java libraries we need into it. Download the Hibernate distribution from the "
"Hibernate website. Extract the package and place all required libraries "
"found in <literal>/lib</literal> into into the <literal>/lib</literal> "
"directory of your new development working directory. It should look like "
"this:"
msgstr ""
"La primera cosa que hacemos, es armar nuestro directorio de desarrollo y "
"poner en él todas las bibliotecas Java que necesitamos. Descarga la "
"distribución de Hibernate del sitio web de Hibernate. Extrae el paquete y "
"coloca todas las bibliotecas requeridas encontradas en <literal>/lib</"
"literal> dentro del directorio <literal>/lib</literal> de nuestro nuevo "
"directorio de desarrollo de trabajo. Debe asemejarse a esto:"

#. Tag: programlisting
#: tutorial.xml:52
#, no-c-format
msgid ""
"<![CDATA[.\n"
"+lib\n"
"  antlr.jar\n"
"  cglib.jar\n"
"  asm.jar\n"
"  asm-attrs.jars\n"
"  commons-collections.jar\n"
"  commons-logging.jar\n"
"  hibernate3.jar\n"
"  jta.jar\n"
"  dom4j.jar\n"
"  log4j.jar ]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:54
#, no-c-format
msgid ""
"This is the minimum set of required libraries (note that we also copied "
"hibernate3.jar, the main archive) for Hibernate <emphasis>at the time of "
"writing</emphasis>. The Hibernate release you are using might require more "
"or less libraries. See the <literal>README.txt</literal> file in the "
"<literal>lib/</literal> directory of the Hibernate distribution for more "
"information about required and optional third-party libraries. (Actually, "
"Log4j is not required but preferred by many developers.)"
msgstr ""
"Este es el conjunto mínimo de bibliotecas requeridas para Hibernate (observa "
"que también hemos copiado hibernate3.jar, el fichero principal). Ver el "
"fichero <literal>README.txt</literal> en el directorio <literal>lib/</"
"literal> de la distribución de Hibernate para más información sobre "
"bibliotecas de terceros requeridas y opcionales. (Realmente, Log4J no es "
"requerida aunque preferida por muchos desarrolladores)."

#. Tag: para
#: tutorial.xml:63
#, no-c-format
msgid ""
"Next we create a class that represents the event we want to store in "
"database."
msgstr ""
"Por siguiente, creamos una clase que represente el evento que queremos "
"almacenar en base de datos."

#. Tag: title
#: tutorial.xml:68
#, no-c-format
msgid "The first class"
msgstr "La primera clase"

#. Tag: para
#: tutorial.xml:70
#, no-c-format
msgid ""
"Our first persistent class is a simple JavaBean class with some properties:"
msgstr ""
"Nuestra primera clase persistente es un JavaBean simple con algunas "
"propiedades:"

#. Tag: programlisting
#: tutorial.xml:74
#, no-c-format
msgid ""
"<![CDATA[package events;\n"
"\n"
"import java.util.Date;\n"
"\n"
"public class Event {\n"
"    private Long id;\n"
"\n"
"    private String title;\n"
"    private Date date;\n"
"\n"
"    public Event() {}\n"
"\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
"\n"
"    private void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
"\n"
"    public Date getDate() {\n"
"        return date;\n"
"    }\n"
"\n"
"    public void setDate(Date date) {\n"
"        this.date = date;\n"
"    }\n"
"\n"
"    public String getTitle() {\n"
"        return title;\n"
"    }\n"
"\n"
"    public void setTitle(String title) {\n"
"        this.title = title;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:76
#, no-c-format
msgid ""
"You can see that this class uses standard JavaBean naming conventions for "
"property getter and setter methods, as well as private visibility for the "
"fields. This is a recommended design - but not required. Hibernate can also "
"access fields directly, the benefit of accessor methods is robustness for "
"refactoring. The no-argument constructor is required to instantiate an "
"object of this class through reflection."
msgstr ""
"Puedes ver que esta clase usa las convenciones de nombrado estándar de "
"JavaBean para métodos getter y setter de propiedad, así como visibilidad "
"privada para los campos. Esto es un diseño recomendado, aunque no requerido. "
"Hibernate también puede acceder a los campos directamente; el beneficio de "
"los métodos de acceso es la robustez para la refactorización."

#. Tag: para
#: tutorial.xml:84
#, no-c-format
msgid ""
"The <literal>id</literal> property holds a unique identifier value for a "
"particular event. All persistent entity classes (there are less important "
"dependent classes as well) will need such an identifier property if we want "
"to use the full feature set of Hibernate. In fact, most applications (esp. "
"web applications) need to distinguish objects by identifier, so you should "
"consider this a feature rather than a limitation. However, we usually don't "
"manipulate the identity of an object, hence the setter method should be "
"private. Only Hibernate will assign identifiers when an object is saved. You "
"can see that Hibernate can access public, private, and protected accessor "
"methods, as well as (public, private, protected) fields directly. The choice "
"is up to you and you can match it to fit your application design."
msgstr ""
"La propiedad <literal>id</literal> tiene un valor único de identificador "
"para un evento en particular. Todas las clase de entidad persistentes "
"( también hay clases dependientes menos importantes) necesitarán una "
"propiedad identificadora similar si queremos usar el conjunto completo de "
"funcionalidades de Hibernate. De hecho, la mayoría de las aplicaciones (esp. "
"aplicaciones web) necesitan distinguir objetos por identificador, de modo "
"que debes considerar esto como un aspecto en vez de una limitación. Sin "
"embargo, usualmente no manipulamos la identidad de un objeto, por lo tanto "
"el método setter debe ser privado. Sólo Hibernate asignará identificadores "
"cuando un objeto sea salvado. Puedes ver que Hibernate puede acceder a "
"métodos de acceso públicos, privados y protegidos, tanto como directamente a "
"campos (públicos, privados y protegidos). La elección está en ti, y puedes "
"ajustarla a tu diseño de aplicación."

#. Tag: para
#: tutorial.xml:96
#, no-c-format
msgid ""
"The no-argument constructor is a requirement for all persistent classes; "
"Hibernate has to create objects for you, using Java Reflection. The "
"constructor can be private, however, package visibility is required for "
"runtime proxy generation and efficient data retrieval without bytecode "
"instrumentation."
msgstr ""
"El constructor sin argumentos es un requerimiento para todas las clases "
"persistentes. Hibernate tiene que crear objetos para ti, usando reflección "
"Java. El constructor puede ser privado, sin embargo, la visibilidad de "
"paquete es requerida para la generación de proxies en tiempo de ejecución y "
"la recuperación de datos sin instrumentación del bytecode."

#. Tag: para
#: tutorial.xml:103
#, no-c-format
msgid ""
"Place this Java source file in a directory called <literal>src</literal> in "
"the development folder, and in its correct package. The directory should now "
"look like this:"
msgstr ""
"Coloca este fichero de código Java en un directorio llamado <literal>src</"
"literal> en la carpeta de desarrollo. El directorio ahora debe verse como "
"esto:"

#. Tag: programlisting
#: tutorial.xml:108
#, no-c-format
msgid ""
"<![CDATA[.\n"
"+lib\n"
"  <Hibernate and third-party libraries>\n"
"+src\n"
"  +events\n"
"    Event.java]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:110
#, no-c-format
msgid "In the next step, we tell Hibernate about this persistent class."
msgstr ""
"En el próximo paso, le decimos a Hibernate sobre esta clase persistente."

#. Tag: title
#: tutorial.xml:117
#, no-c-format
msgid "The mapping file"
msgstr "El fichero de mapeo"

#. Tag: para
#: tutorial.xml:119
#, no-c-format
msgid ""
"Hibernate needs to know how to load and store objects of the persistent "
"class. This is where the Hibernate mapping file comes into play. The mapping "
"file tells Hibernate what table in the database it has to access, and what "
"columns in that table it should use."
msgstr ""
"Hibernate necesita saber cómo cargar y almacenar objetos de la clase "
"persistente. Aquí es donde el fichero de mapeo de Hibernate entra en juego. "
"El fichero de mapeo le dice a Hibernate a qué tabla en la base de datos "
"tiene que acceder, y qué columnas en esta tabla debe usar."

#. Tag: para
#: tutorial.xml:126
#, no-c-format
msgid "The basic structure of a mapping file looks like this:"
msgstr "La estructura básica de un fichero de mapeo se parece a esto:"

#. Tag: programlisting
#: tutorial.xml:130
#, no-c-format
msgid ""
"<![CDATA[<?xml version=\"1.0\"?>\n"
"<!DOCTYPE hibernate-mapping PUBLIC\n"
"        \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n"
"        \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\">\n"
"\n"
"<hibernate-mapping>\n"
"[...]\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:132
#, no-c-format
msgid ""
"Note that the Hibernate DTD is very sophisticated. You can use it for auto-"
"completion of XML mapping elements and attributes in your editor or IDE. You "
"also should open up the DTD file in your text editor - it's the easiest way "
"to get an overview of all elements and attributes and to see the defaults, "
"as well as some comments. Note that Hibernate will not load the DTD file "
"from the web, but first look it up from the classpath of the application. "
"The DTD file is included in <literal>hibernate3.jar</literal> as well as in "
"the <literal>src/</literal> directory of the Hibernate distribution."
msgstr ""
"Observa que el DTD de Hibernate es muy sofisticado. Puedes usarlo para "
"autocompleción de los elementos y atributos XML de mapeo en tu editor o IDE. "
"Debes también abrir el fichero DTD en tu editor de texto. Es la forma más "
"fácil para tener un panorama de todos los elementos y atributos y ver los "
"valores por defectos, así como algunos comentarios. Nota que Hibernate no "
"cargará el fichero DTD de la web, sino que primero buscará en el classpath "
"de la aplicación. El fichero DTD está incluído en <literal>hibernate3.jar</"
"literal> así como también en el directorio <literal>src/</literal> de la "
"distribución de Hibernate."

#. Tag: para
#: tutorial.xml:143
#, no-c-format
msgid ""
"We will omit the DTD declaration in future examples to shorten the code. It "
"is of course not optional."
msgstr ""
"Omitiremos la declaración de DTD en futuros ejemplos para acortar el código. "
"Por supuesto, no es opcional."

#. Tag: para
#: tutorial.xml:148
#, no-c-format
msgid ""
"Between the two <literal>hibernate-mapping</literal> tags, include a "
"<literal>class</literal> element. All persistent entity classes (again, "
"there might be dependent classes later on, which are not first-class "
"entities) need such a mapping, to a table in the SQL database:"
msgstr ""
"Entre las dos etiquetas <literal>hibernate-mapping</literal>, incluye un "
"elemento <literal>class</literal>. Todas las clases de entidad persistentes "
"(de nuevo, podría haber más adelante clases dependientes, que no sean "
"entidades de-primera-clase) necesitan dicho mapeo a una tabla en la base de "
"datos SQL:"

#. Tag: programlisting
#: tutorial.xml:155
#, no-c-format
msgid ""
"<![CDATA[<hibernate-mapping>\n"
"\n"
"    <class name=\"events.Event\" table=\"EVENTS\">\n"
"\n"
"    </class>\n"
"\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:157
#, no-c-format
msgid ""
"So far we told Hibernate how to persist and load object of class "
"<literal>Event</literal> to the table <literal>EVENTS</literal>, each "
"instance represented by a row in that table. Now we continue with a mapping "
"of the unique identifier property to the tables primary key. In addition, as "
"we don't want to care about handling this identifier, we configure "
"Hibernate's identifier generation strategy for a surrogate primary key "
"column:"
msgstr ""
"Hasta ahora dijimos a Hibernate cómo persistir y cargar el objeto de clase "
"<literal>Event</literal> a la tabla <literal>EVENTS</literal>, cada "
"instancia representada por una fila en esta tabla. Ahora continuamos con un "
"mapeo de la propiedad de identificado único a la clave primaria de la tabla. "
"Además, como no queremos cuidar del manejo de este identificador, "
"configuramos la estrategia de generación de identificadores para una columna "
"clave primaria delegada:"

#. Tag: programlisting
#: tutorial.xml:165
#, no-c-format
msgid ""
"<![CDATA[<hibernate-mapping>\n"
"\n"
"    <class name=\"events.Event\" table=\"EVENTS\">\n"
"        <id name=\"id\" column=\"EVENT_ID\">\n"
"            <generator class=\"native\"/>\n"
"        </id>\n"
"    </class>\n"
"\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:167
#, no-c-format
msgid ""
"The <literal>id</literal> element is the declaration of the identifer "
"property, <literal>name=\"id\"</literal> declares the name of the Java "
"property - Hibernate will use the getter and setter methods to access the "
"property. The column attribute tells Hibernate which column of the "
"<literal>EVENTS</literal> table we use for this primary key. The nested "
"<literal>generator</literal> element specifies the identifier generation "
"strategy, in this case we used <literal>native</literal>, which picks the "
"best strategy depending on the configured database (dialect). Hibernate "
"supports database generated, globally unique, as well as application "
"assigned identifiers (or any strategy you have written an extension for)."
msgstr ""
"El elemento <literal>id</literal> el la declaración de la propiedad "
"identificadora, <literal>name=\"id\"</literal> declara el nombre de la "
"propiedad Java. Hibernate usará los métodos getter y setter para acceder a "
"la propiedad. El attributo de columna dice a Hibernate cuál columna de la "
"tabla <literal>EVENTS</literal> usamos para esta clave primaria. El elemento "
"anidado <literal>generator</literal> especifica la estrategia de generación "
"de identificadores, en este caso usamos <literal>increment</literal>, que es "
"un método muy simple de incremento de número en-memoria útil mayormente para "
"testeo (y tutoriales). Hibernate también soporta identificadores generados "
"por base de datos, globalmente únicos, así como también asignados por "
"aplicación (o cualquier estrategia para la que hayas escrito una extensión)."

#. Tag: para
#: tutorial.xml:180
#, no-c-format
msgid ""
"Finally we include declarations for the persistent properties of the class "
"in the mapping file. By default, no properties of the class are considered "
"persistent:"
msgstr ""
"Finalmente incluímos declaraciones para las propiedades persistentes de la "
"clases en el fichero de mapeo. Por defecto, ninguna propiedad de la clase se "
"considera persistente:"

#. Tag: programlisting
#: tutorial.xml:186
#, no-c-format
msgid ""
"<![CDATA[\n"
"<hibernate-mapping>\n"
"\n"
"    <class name=\"events.Event\" table=\"EVENTS\">\n"
"        <id name=\"id\" column=\"EVENT_ID\">\n"
"            <generator class=\"native\"/>\n"
"        </id>\n"
"        <property name=\"date\" type=\"timestamp\" column=\"EVENT_DATE\"/>\n"
"        <property name=\"title\"/>\n"
"    </class>\n"
"\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:188
#, no-c-format
msgid ""
"Just as with the <literal>id</literal> element, the <literal>name</literal> "
"attribute of the <literal>property</literal> element tells Hibernate which "
"getter and setter methods to use. So, in this case, Hibernate will look for "
"<literal>getDate()/setDate()</literal>, as well as <literal>getTitle()/"
"setTitle()</literal>."
msgstr ""
"Al igual que con el elemento <literal>id</literal>, el atributo "
"<literal>name</literal> del elemento <literal>property</literal> dice a "
"Hibernate cáles métodos getter y setter usar."

#. Tag: para
#: tutorial.xml:195
#, no-c-format
msgid ""
"Why does the <literal>date</literal> property mapping include the "
"<literal>column</literal> attribute, but the <literal>title</literal> "
"doesn't? Without the <literal>column</literal> attribute Hibernate by "
"default uses the property name as the column name. This works fine for "
"<literal>title</literal>. However, <literal>date</literal> is a reserved "
"keyword in most database, so we better map it to a different name."
msgstr ""
"¿Por qué el mapeo de la propiedad <literal>date</literal> incluye el "
"atributo <literal>column</literal>, pero el de la de <literal>title</"
"literal> no? Sin el atributo <literal>column</literal> Hibernate usa por "
"defecto el nombre de propiedad como nombre de columna. Esto funciona bien "
"para <literal>title</literal>. Sin embargo, However, <literal>date</literal> "
"es una palabra reservada en la mayoría de las bases de datos, así que mejor "
"la mapeamos a un nombre diferente."

#. Tag: para
#: tutorial.xml:204
#, no-c-format
msgid ""
"The next interesting thing is that the <literal>title</literal> mapping also "
"lacks a <literal>type</literal> attribute. The types we declare and use in "
"the mapping files are not, as you might expect, Java data types. They are "
"also not SQL database types. These types are so called <emphasis>Hibernate "
"mapping types</emphasis>, converters which can translate from Java to SQL "
"data types and vice versa. Again, Hibernate will try to determine the "
"correct conversion and mapping type itself if the <literal>type</literal> "
"attribute is not present in the mapping. In some cases this automatic "
"detection (using Reflection on the Java class) might not have the default "
"you expect or need. This is the case with the <literal>date</literal> "
"property. Hibernate can't know if the property (which is of <literal>java."
"util.Date</literal>) should map to a SQL <literal>date</literal>, "
"<literal>timestamp</literal>, or <literal>time</literal> column. We preserve "
"full date and time information by mapping the property with a "
"<literal>timestamp</literal> converter."
msgstr ""
"La próxima cosa interesante es que el mapeo de <literal>title</literal> "
"carece de un atributo <literal>type</literal>. Los tipos que declaramos y "
"usamos en el fichero de mapeo no son, como podrías esperar, tipos de datos "
"Java. Tampoco son tipos de base de datos SQL. Estos tipos son los llamados "
"así <emphasis>Tipos de mapeo de Hibernate</emphasis>, convertidores que "
"pueden traducir de tipos Java a SQL y vice versa. De nuevo, Hibernate "
"intentará determinar la conversión y el mapeo mismo de tipo correctos si el "
"atributo <literal>type</literal> no estuviese presente en el mapeo. En "
"algunos casos esta detección automática (usando reflección en la clase Java) "
"puede no tener lo que esperas o necesitas. Este es el caso de la propiedad "
"<literal>date</literal>. Hibernate no puede saber is la propiedad mapeará a "
"una columna <literal>date</literal>, <literal>timestamp</literal> o "
"<literal>time</literal>. Declaramos que queremos preservar la información "
"completa de fecha y hora mapeando la propiedad con un <literal>timestamp</"
"literal>."

#. Tag: para
#: tutorial.xml:220
#, no-c-format
msgid ""
"This mapping file should be saved as <literal>Event.hbm.xml</literal>, right "
"in the directory next to the <literal>Event</literal> Java class source "
"file. The naming of mapping files can be arbitrary, however the <literal>hbm."
"xml</literal> suffix is a convention in the Hibernate developer community. "
"The directory structure should now look like this:"
msgstr ""
"Este fichero de mapeo debe ser salvado como <literal>Event.hbm.xml</"
"literal>, justo en el directorio próximo al fichero de código fuente de la "
"clase Java <literal>Event</literal>. El nombrado de los ficheros de mapeo "
"puede ser arbitrario, sin embargo, el sufijo <literal>hbm.xml</literal> se "
"ha vuelto una convención el la comunidad de desarrolladores de Hibernate. La "
"estructura de directorio debe ahora verse como esto:"

#. Tag: programlisting
#: tutorial.xml:228
#, no-c-format
msgid ""
"<![CDATA[.\n"
"+lib\n"
"  <Hibernate and third-party libraries>\n"
"+src\n"
"  +events\n"
"    Event.java\n"
"    Event.hbm.xml]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:230
#, no-c-format
msgid "We continue with the main configuration of Hibernate."
msgstr "Continuamos con la configuración principal de Hibernate."

#. Tag: title
#: tutorial.xml:237
#, no-c-format
msgid "Hibernate configuration"
msgstr "Configuración de Hibernate"

#. Tag: para
#: tutorial.xml:239
#, no-c-format
msgid ""
"We now have a persistent class and its mapping file in place. It is time to "
"configure Hibernate. Before we do this, we will need a database. HSQL DB, a "
"java-based SQL DBMS, can be downloaded from the HSQL DB website(http://"
"hsqldb.org/). Actually, you only need the <literal>hsqldb.jar</literal> from "
"this download. Place this file in the <literal>lib/</literal> directory of "
"the development folder."
msgstr ""
"Tenemos ahora una clase persistente y su fichero de mapeo en su sitio. Es "
"momento de configurar Hibernate. Antes que hagamos esto, necesitaremos una "
"base de datos. HSQL DB, un DBMS SQL en-memoria basado en Java, puede ser "
"descargado del sitio web de HSQL DB. Realmente, de esta descarga sólo "
"necesitas el <literal>hsqldb.jar</literal>. Coloca este fichero en el "
"directorio <literal>lib/</literal> de la carpeta de desarrollo."

#. Tag: para
#: tutorial.xml:247
#, no-c-format
msgid ""
"Create a directory called <literal>data</literal> in the root of the "
"development directory - this is where HSQL DB will store its data files. Now "
"start the database by running <literal>java -classpath ../lib/hsqldb.jar org."
"hsqldb.Server</literal> in this data directory. You can see it start up and "
"bind to a TCP/IP socket, this is where our application will connect later. "
"If you want to start with a fresh database during this tutorial, shutdown "
"HSQL DB (press <literal>CTRL + C</literal> in the window), delete all files "
"in the <literal>data/</literal> directory, and start HSQL DB again."
msgstr ""
"Crea un directorio llamado <literal>data</literal> en la raíz del directorio "
"de desarrollo. Allí es donde HSQL DB almacenará sus ficheros de datos."

#. Tag: para
#: tutorial.xml:257
#, no-c-format
msgid ""
"Hibernate is the layer in your application which connects to this database, "
"so it needs connection information. The connections are made through a JDBC "
"connection pool, which we also have to configure. The Hibernate distribution "
"contains several open source JDBC connection pooling tools, but will use the "
"Hibernate built-in connection pool for this tutorial. Note that you have to "
"copy the required library into your classpath and use different connection "
"pooling settings if you want to use a production-quality third party JDBC "
"pooling software."
msgstr ""
"Hibernate es la capa en tu aplicación que se conecta a esta base de datos, "
"de modo que necesita información de conexión. Las conexiones se hacen a "
"través de un pool de conexiones JDBC, que tambén tenemos que configurar. La "
"distribución de Hibernate contiene muchas herramientas de pooling de "
"conexiones JDBC de código abierto, pero para este tutorial usaremos el pool "
"de conexiones prefabricado dentro de Hibernate. Observa que tienes que "
"copiar la biblioteca requerida en tu classpath y usar diferentes "
"configuraciones de pooling de conexiones si quieres usar un software de "
"pooling JDBC de terceros de calidad de producción."

#. Tag: para
#: tutorial.xml:267
#, no-c-format
msgid ""
"For Hibernate's configuration, we can use a simple <literal>hibernate."
"properties</literal> file, a slightly more sophisticated <literal>hibernate."
"cfg.xml</literal> file, or even complete programmatic setup. Most users "
"prefer the XML configuration file:"
msgstr ""
"Para la configuración de Hibernate, podemos usar un fichero "
"<literal>hibernate.properties</literal> simple, un fichero "
"<literal>hibernate.cfg.xml</literal> ligeramente más sofisticado, o incluso "
"una configuración completamente programática. La mayoría de los usuarios "
"prefieren el fichero de configuración XML:"

#. Tag: programlisting
#: tutorial.xml:273
#, no-c-format
msgid ""
"<![CDATA[<?xml version='1.0' encoding='utf-8'?>\n"
"<!DOCTYPE hibernate-configuration PUBLIC\n"
"        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n"
"        \"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"
"\">\n"
"\n"
"<hibernate-configuration>\n"
"\n"
"    <session-factory>\n"
"\n"
"        <!-- Database connection settings -->\n"
"        <property name=\"connection.driver_class\">org.hsqldb.jdbcDriver</"
"property>\n"
"        <property name=\"connection.url\">jdbc:hsqldb:hsql://localhost</"
"property>\n"
"        <property name=\"connection.username\">sa</property>\n"
"        <property name=\"connection.password\"></property>\n"
"\n"
"        <!-- JDBC connection pool (use the built-in) -->\n"
"        <property name=\"connection.pool_size\">1</property>\n"
"\n"
"        <!-- SQL dialect -->\n"
"        <property name=\"dialect\">org.hibernate.dialect.HSQLDialect</"
"property>\n"
"\n"
"        <!-- Enable Hibernate's automatic session context management -->\n"
"        <property name=\"current_session_context_class\">thread</property>\n"
"\n"
"        <!-- Disable the second-level cache  -->\n"
"        <property name=\"cache.provider_class\">org.hibernate.cache."
"NoCacheProvider</property>\n"
"\n"
"        <!-- Echo all executed SQL to stdout -->\n"
"        <property name=\"show_sql\">true</property>\n"
"\n"
"        <!-- Drop and re-create the database schema on startup -->\n"
"        <property name=\"hbm2ddl.auto\">create</property>\n"
"\n"
"        <mapping resource=\"events/Event.hbm.xml\"/>\n"
"\n"
"    </session-factory>\n"
"\n"
"</hibernate-configuration>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:275
#, no-c-format
msgid ""
"Note that this XML configuration uses a different DTD. We configure "
"Hibernate's <literal>SessionFactory</literal> - a global factory responsible "
"for a particular database. If you have several databases, use several "
"<literal>&lt;session-factory&gt;</literal> configurations, usually in "
"several configuration files (for easier startup)."
msgstr ""
"Observa que esta configuración XML usa un DTD diferente. Configuramos la "
"<literal>SessionFactory</literal> de Hibernate, una fábrica global "
"responsable de una base de datos en particular. Si tienes varias bases de "
"datos, usa varias configuraciones <literal>&lt;session-factory&gt;</"
"literal> , usualmente en varios ficheros de configuración (para un arranque "
"más fácil)."

#. Tag: para
#: tutorial.xml:283
#, no-c-format
msgid ""
"The first four <literal>property</literal> elements contain the necessary "
"configuration for the JDBC connection. The dialect <literal>property</"
"literal> element specifies the particular SQL variant Hibernate generates. "
"Hibernate's automatic session management for persistence contexts will come "
"in handy as you will soon see. The <literal>hbm2ddl.auto</literal> option "
"turns on automatic generation of database schemas - directly into the "
"database. This can of course also be turned off (by removing the config "
"option) or redirected to a file with the help of the <literal>SchemaExport</"
"literal> Ant task. Finally, we add the mapping file(s) for persistent "
"classes to the configuration."
msgstr ""
"Los primeros cuatro elementos <literal>property</literal> contienen la "
"configuración necesaria para la conexión JDBC. El elemento de dialecto "
"<literal>property</literal> especifica la variante de SQL en particular que "
"genera Hibernate. La opción <literal>hbm2ddl.auto</literal> activa la "
"generación automática de esquemas de base de datos, directamente en la base "
"de datos. Esto, por supuesto, puede desactivarse (quitando la opción config) "
"o redirigido a un fichero con la ayuda de la tarea de Ant "
"<literal>SchemaExport</literal>. Finalmente, agregamos el(los) fichero(s) de "
"mapeo para clases persistentes."

#. Tag: para
#: tutorial.xml:296
#, no-c-format
msgid ""
"Copy this file into the source directory, so it will end up in the root of "
"the classpath. Hibernate automatically looks for a file called "
"<literal>hibernate.cfg.xml</literal> in the root of the classpath, on "
"startup."
msgstr ""
"Copia este fichero dentro del directorio de código fuente, de modo que "
"termine ubicado en la raiíz del classpath. Hibernate busca automáticamente "
"un fichero llamado <literal>hibernate.cfg.xml</literal> en la raíz del "
"classpath al arrancar."

#. Tag: title
#: tutorial.xml:305
#, no-c-format
msgid "Building with Ant"
msgstr "Construyendo con Ant"

#. Tag: para
#: tutorial.xml:307
#, no-c-format
msgid ""
"We'll now build the tutorial with Ant. You will need to have Ant installed - "
"get it from the <ulink url=\"http://ant.apache.org/bindownload.cgi\">Ant "
"download page</ulink>. How to install Ant will not be covered here. Please "
"refer to the <ulink url=\"http://ant.apache.org/manual/index.html\">Ant "
"manual</ulink>. After you have installed Ant, we can start to create the "
"buildfile. It will be called <literal>build.xml</literal> and placed "
"directly in the development directory."
msgstr ""
"Construiremos ahora el tutorial con Ant. Necesitarás tener Ant instalado. "
"Obténlo de <ulink url=\"http://ant.apache.org/bindownload.cgi\">Página de "
"descarga de Ant</ulink>. No se cubrirá aquí cómo instalar Ant. Por favor "
"refiérete al <ulink url=\"http://ant.apache.org/manual/index.html\"> Manual "
"de Ant</ulink>. Después que hayas instalado Ant, podemos comenzar a crear el "
"buildfile. Será llamado <literal>build.xml</literal> y colocado directamente "
"en el directorio de desarrollo."

#. Tag: para
#: tutorial.xml:316
#, no-c-format
msgid "A basic build file looks like this:"
msgstr "Reparar Ant"

#. Tag: programlisting
#: tutorial.xml:320
#, no-c-format
msgid ""
"<![CDATA[<project name=\"hibernate-tutorial\" default=\"compile\">\n"
"\n"
"    <property name=\"sourcedir\" value=\"${basedir}/src\"/>\n"
"    <property name=\"targetdir\" value=\"${basedir}/bin\"/>\n"
"    <property name=\"librarydir\" value=\"${basedir}/lib\"/>\n"
"\n"
"    <path id=\"libraries\">\n"
"        <fileset dir=\"${librarydir}\">\n"
"            <include name=\"*.jar\"/>\n"
"        </fileset>\n"
"    </path>\n"
"\n"
"    <target name=\"clean\">\n"
"        <delete dir=\"${targetdir}\"/>\n"
"        <mkdir dir=\"${targetdir}\"/>\n"
"    </target>\n"
"\n"
"    <target name=\"compile\" depends=\"clean, copy-resources\">\n"
"      <javac srcdir=\"${sourcedir}\"\n"
"             destdir=\"${targetdir}\"\n"
"             classpathref=\"libraries\"/>\n"
"    </target>\n"
"\n"
"    <target name=\"copy-resources\">\n"
"        <copy todir=\"${targetdir}\">\n"
"            <fileset dir=\"${sourcedir}\">\n"
"                <exclude name=\"**/*.java\"/>\n"
"            </fileset>\n"
"        </copy>\n"
"    </target>\n"
"\n"
"</project>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:322
#, no-c-format
msgid ""
"This will tell Ant to add all files in the lib directory ending with "
"<literal>.jar</literal> to the classpath used for compilation. It will also "
"copy all non-Java source files to the target directory, e.g. configuration "
"and Hibernate mapping files. If you now run Ant, you should get this output:"
msgstr ""
"Observa que la distribución de Ant está por defecto rota (como se describe "
"en el FAQ de Ant) y tiene que ser reparado por ti, por ejemplo, si quisieras "
"usar JUnit desde dentro de tu fichero de construcción. Para hacer que "
"funcione la tarea de JUnit (no lo necesitaremos en este tutorial), copia "
"junit.jar a <literal>ANT_HOME/lib</literal> o quita el trozo de plugin "
"<literal>ANT_HOME/lib/ant-junit.jar</literal>."

#. Tag: programlisting
#: tutorial.xml:329
#, no-c-format
msgid ""
"<![CDATA[C:\\hibernateTutorial\\>ant\n"
"Buildfile: build.xml\n"
"\n"
"copy-resources:\n"
"     [copy] Copying 2 files to C:\\hibernateTutorial\\bin\n"
"\n"
"compile:\n"
"    [javac] Compiling 1 source file to C:\\hibernateTutorial\\bin\n"
"\n"
"BUILD SUCCESSFUL\n"
"Total time: 1 second ]]>"
msgstr ""

#. Tag: title
#: tutorial.xml:334
#, no-c-format
msgid "Startup and helpers"
msgstr "Un fichero de construcción básico se ve como esto:"

#. Tag: para
#: tutorial.xml:336
#, no-c-format
msgid ""
"It's time to load and store some <literal>Event</literal> objects, but first "
"we have to complete the setup with some infrastructure code. We have to "
"startup Hibernate. This startup includes building a global "
"<literal>SessionFactory</literal> object and to store it somewhere for easy "
"access in application code. A <literal>SessionFactory</literal> can open up "
"new <literal>Session</literal>'s. A <literal>Session</literal> represents a "
"single-threaded unit of work, the <literal>SessionFactory</literal> is a "
"thread-safe global object, instantiated once."
msgstr ""
"Esto dirá a Ant que agregue todos los ficheros en el directorio lib que "
"terminen con <literal>.jar</literal> al classpath usado para la compilación. "
"También copiará todos los ficheros que no sean código Java al directorio "
"objetivo, por ejemplo, ficheros de configuración y mapeos de Hibernate. Si "
"ahora corres Ant, debes obtener esta salida:"

#. Tag: para
#: tutorial.xml:346
#, no-c-format
msgid ""
"We'll create a <literal>HibernateUtil</literal> helper class which takes "
"care of startup and makes accessing a <literal>SessionFactory</literal> "
"convenient. Let's have a look at the implementation:"
msgstr "Arranque y ayudantes"

#. Tag: programlisting
#: tutorial.xml:352
#, no-c-format
msgid ""
"<![CDATA[package util;\n"
"\n"
"import org.hibernate.*;\n"
"import org.hibernate.cfg.*;\n"
"\n"
"public class HibernateUtil {\n"
"\n"
"    private static final SessionFactory sessionFactory;\n"
"\n"
"    static {\n"
"        try {\n"
"            // Create the SessionFactory from hibernate.cfg.xml\n"
"            sessionFactory = new Configuration().configure()."
"buildSessionFactory();\n"
"        } catch (Throwable ex) {\n"
"            // Make sure you log the exception, as it might be swallowed\n"
"            System.err.println(\"Initial SessionFactory creation failed.\" + "
"ex);\n"
"            throw new ExceptionInInitializerError(ex);\n"
"        }\n"
"    }\n"
"\n"
"    public static SessionFactory getSessionFactory() {\n"
"        return sessionFactory;\n"
"    }\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:354
#, no-c-format
msgid ""
"This class does not only produce the global <literal>SessionFactory</"
"literal> in its static initializer (called once by the JVM when the class is "
"loaded), but also hides the fact that it uses a static singleton. It might "
"as well lookup the <literal>SessionFactory</literal> from JNDI in an "
"application server."
msgstr ""
"Es momento de cargar y almacenar algunos objetos <literal>Event</literal>, "
"pero primero tenemos que completar la configuración de algún código de "
"infraestructura. Tenemos que arrancar Hibernate. Este arranque incluye "
"construir un objeto <literal>SessionFactory</literal> global y almacenarlo "
"en algún sitio de fácil acceso en el código de aplicación. Una "
"<literal>SessionFactory</literal> puede abrir nuevas <literal>Session</"
"literal>'s. Una <literal>Session</literal> representa un unidad de trabajo "
"mono-hebra. La <literal>SessionFactory</literal> es un objeto global seguro "
"entre hebras, instanciado una sola vez."

#. Tag: para
#: tutorial.xml:361
#, no-c-format
msgid ""
"If you give the <literal>SessionFactory</literal> a name in your "
"configuration file, Hibernate will in fact try to bind it to JNDI after it "
"has been built. To avoid this code completely you could also use JMX "
"deployment and let the JMX-capable container instantiate and bind a "
"<literal>HibernateService</literal> to JNDI. These advanced options are "
"discussed in the Hibernate reference documentation."
msgstr ""
"Crearemos una clase de ayuda <literal>HibernateUtil</literal> que cuide del "
"arranque y haga conveniente el manejo de <literal>Session</literal>. El así "
"llamado patrón <emphasis>Sesión de Hebra Local (ThreadLocal Session)</"
"emphasis> es útil aquí; mantenemos la unidad de trabajo actual asociada a la "
"hebra actual. Echemos una mirada a la implementación:"

#. Tag: para
#: tutorial.xml:370
#, no-c-format
msgid ""
"Place <literal>HibernateUtil.java</literal> in the development source "
"directory, in a package next to <literal>events</literal>:"
msgstr ""
"Esta clase no ólo produce la <literal>SessionFactory</literal> global en su "
"inicializador static (llamado sólo una vez por la JVM al cargar la clase), "
"sino que también tiene una variable <literal>ThreadLocal</literal> para "
"tener la <literal>Session</literal> para la hebra actual. No importa cuándo "
"llames a <literal>HibernateUtil.currentSession()</literal>, siempre "
"devolverá la misma unidad de trabajo de Hibernate en la misma hebra. Una "
"llamada a <literal>HibernateUtil.closeSession()</literal> termina la unidad "
"de trabajo actualmente asociada a la hebra."

#. Tag: programlisting
#: tutorial.xml:375
#, no-c-format
msgid ""
"<![CDATA[.\n"
"+lib\n"
"  <Hibernate and third-party libraries>\n"
"+src\n"
"  +events\n"
"    Event.java\n"
"    Event.hbm.xml\n"
"  +util\n"
"    HibernateUtil.java\n"
"  hibernate.cfg.xml\n"
"+data\n"
"build.xml]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:377
#, no-c-format
msgid ""
"This should again compile without problems. We finally need to configure a "
"logging system - Hibernate uses commons logging and leaves you the choice "
"between Log4j and JDK 1.4 logging. Most developers prefer Log4j: copy "
"<literal>log4j.properties</literal> from the Hibernate distribution (it's in "
"the <literal>etc/</literal> directory) to your <literal>src</literal> "
"directory, next to <literal>hibernate.cfg.xml</literal>. Have a look at the "
"example configuration and change the settings if you like to have more "
"verbose output. By default, only Hibernate startup message are shown on "
"stdout."
msgstr ""
"Asegúrate de entender el concepto Java de una variable local a una hebra "
"antes de usar esta ayuda. Una clase <literal>HibernateUtil</literal> más "
"potente puede encontrarse en <literal>CaveatEmptor</literal>, http://"
"caveatemptor.hibernate.org/, así como en el libro \"Java Persistence with "
"Hibernate\". Observa que esta clase no es necesaria si despliegas Hibernate "
"en un servidor de aplicaciones J2EE: una <literal>Session</literal> será "
"automáticamente ligada a la transacción JTA actual, y puedes buscar la "
"<literal>SessionFactory</literal> a través de JNDI. Si usas JBoss AS, "
"Hibernate puede ser desplegado como un servicio de sistema manejado y "
"automáticamente ligará la <literal>SessionFactory</literal> a un nombre JNDI."

#. Tag: para
#: tutorial.xml:387
#, no-c-format
msgid ""
"The tutorial infrastructure is complete - and we are ready to do some real "
"work with Hibernate."
msgstr ""
"Coloca <literal>HibernateUtil.java</literal> en el directorio de fuentes de "
"desarrollo, junto a <literal>Event.java</literal>:"

#. Tag: title
#: tutorial.xml:395
#, no-c-format
msgid "Loading and storing objects"
msgstr ""
"Esto también debe compilar sin problemas. Finalmente necesitamos configurar "
"un sistema de logging (registro). Hibernate usa commons logging y te deja la "
"elección entre Log4J y logging de JDK 1.4. La mayoría de los desarrolladores "
"prefieren Log4J: copia <literal>log4j.properties</literal> de la "
"distribución de Hibernate (está en el directorio <literal>etc/</literal>) a "
"tu directorio <literal>src</literal>, junto a <literal>hibernate.cfg.xml</"
"literal>. Echa una mirada a la configuración de ejemplo y cambia los ajustes "
"si te gusta tener una salida más verborrágica. Por defecto, sólo se muestra "
"el mensaje de arranque de Hibernate en la salida."

#. Tag: para
#: tutorial.xml:397
#, no-c-format
msgid ""
"Finally, we can use Hibernate to load and store objects. We write an "
"<literal>EventManager</literal> class with a <literal>main()</literal> "
"method:"
msgstr ""
"La infraestructura del tutorial está completa, y estamos listos para hacer "
"algún trabajo real con Hibernate."

#. Tag: programlisting
#: tutorial.xml:402
#, no-c-format
msgid ""
"<![CDATA[package events;\n"
"import org.hibernate.Session;\n"
"\n"
"import java.util.Date;\n"
"\n"
"import util.HibernateUtil;\n"
"\n"
"public class EventManager {\n"
"\n"
"    public static void main(String[] args) {\n"
"        EventManager mgr = new EventManager();\n"
"\n"
"        if (args[0].equals(\"store\")) {\n"
"            mgr.createAndStoreEvent(\"My Event\", new Date());\n"
"        }\n"
"\n"
"        HibernateUtil.getSessionFactory().close();\n"
"    }\n"
"\n"
"    private void createAndStoreEvent(String title, Date theDate) {\n"
"\n"
"        Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"\n"
"        session.beginTransaction();\n"
"\n"
"        Event theEvent = new Event();\n"
"        theEvent.setTitle(title);\n"
"        theEvent.setDate(theDate);\n"
"\n"
"        session.save(theEvent);\n"
"\n"
"        session.getTransaction().commit();\n"
"    }\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:404
#, no-c-format
msgid ""
"We create a new <literal>Event</literal> object, and hand it over to "
"Hibernate. Hibernate now takes care of the SQL and executes <literal>INSERT</"
"literal>s on the database. Let's have a look at the <literal>Session</"
"literal> and <literal>Transaction</literal>-handling code before we run this."
msgstr "Cargando y almacenando objetos"

#. Tag: para
#: tutorial.xml:411
#, no-c-format
msgid ""
"A <literal>Session</literal> is a single unit of work. For now we'll keep "
"things simple and assume a one-to-one granularity between a Hibernate "
"<literal>Session</literal> and a database transaction. To shield our code "
"from the actual underlying transaction system (in this case plain JDBC, but "
"it could also run with JTA) we use the <literal>Transaction</literal> API "
"that is available on the Hibernate <literal>Session</literal>."
msgstr ""
"Finalmente, podemos usar Hibernate para cargar y almacenar objetos. "
"Escribimos una clase <literal>EventManager</literal> con un método "
"<literal>main()</literal>:"

#. Tag: para
#: tutorial.xml:419
#, no-c-format
msgid ""
"What does <literal>sessionFactory.getCurrentSession()</literal> do? First, "
"you can call it as many times and anywhere you like, once you get hold of "
"your <literal>SessionFactory</literal> (easy thanks to "
"<literal>HibernateUtil</literal>). The <literal>getCurrentSession()</"
"literal> method always returns the \"current\" unit of work. Remember that "
"we switched the configuration option for this mechanism to \"thread\" in "
"<literal>hibernate.cfg.xml</literal>? Hence, the current unit of work is "
"bound to the current Java thread that executes our application. However, "
"this is not the full picture, you also have to consider scope, when a unit "
"of work begins and when it ends."
msgstr ""
"Leemos algunos argumentos de la línea de comandos, y si el primer argumento "
"es \"store\", creamos y almacenamos un nuevo Event:"

#. Tag: para
#: tutorial.xml:430
#, no-c-format
msgid ""
"A <literal>Session</literal> begins when it is first needed, when the first "
"call to <literal>getCurrentSession()</literal> is made. It is then bound by "
"Hibernate to the current thread. When the transaction ends, either through "
"commit or rollback, Hibernate automatically unbinds the <literal>Session</"
"literal> from the thread and closes it for you. If you call "
"<literal>getCurrentSession()</literal> again, you get a new "
"<literal>Session</literal> and can start a new unit of work. This "
"<emphasis>thread-bound</emphasis> programming model is the most popular way "
"of using Hibernate, as it allows flexible layering of your code (transaction "
"demarcation code can be separated from data access code, we'll do this later "
"in this tutorial)."
msgstr ""
"Creamos un nuevo objeto <literal>Event</literal>, y se lo damos a Hibernate. "
"Hibernate cuida ahora del SQL y ejecuta <literal>INSERT</literal>s en la "
"base de datos. Echemos una mirada al código de manejo de <literal>Session</"
"literal> y <literal>Transaction</literal> antes de ejecutar esto."

#. Tag: para
#: tutorial.xml:441
#, no-c-format
msgid ""
"Related to the unit of work scope, should the Hibernate <literal>Session</"
"literal> be used to execute one or several database operations? The above "
"example uses one <literal>Session</literal> for one operation. This is pure "
"coincidence, the example is just not complex enough to show any other "
"approach. The scope of a Hibernate <literal>Session</literal> is flexible "
"but you should never design your application to use a new Hibernate "
"<literal>Session</literal> for <emphasis>every</emphasis> database "
"operation. So even if you see it a few more times in the following (very "
"trivial) examples, consider <emphasis>session-per-operation</emphasis> an "
"anti-pattern. A real (web) application is shown later in this tutorial."
msgstr ""
"Una <literal>Session</literal> es una sola unidad de trabajo. Podría "
"sorprenderte que tengamos una API adicional, <literal>Transaction</literal>. "
"Esto implica que una unidad de trabajo puede ser \"más larga\" que una sola "
"transacción de base de datos; imagina una unidad de trabajo que se abarca "
"varios ciclos petición/respuesta HTTP (por ejemplo, un diálogo asistente) en "
"una aplicación web. Separar las transacciones de base de datos de \"las "
"unidades de trabajo de la aplicación desde el punto de vista del usuario\" "
"es uno de los conceptos básicos de diseño de Hibernate. Llamamos una unidad "
"de trabajo larga <emphasis>Transacción de Aplicación</emphasis>, usualmente "
"encapsulando varias transacciones de base de datos más cortas. Por ahora "
"mantendremos las cosas simples y asumiremos una granularidad uno-a-uno entre "
"una <literal>Session</literal> y una <literal>Transaction</literal>."

#. Tag: para
#: tutorial.xml:452
#, no-c-format
msgid ""
"Have a look at <xref linkend=\"transactions\"/> for more information about "
"transaction handling and demarcation. We also skipped any error handling and "
"rollback in the previous example."
msgstr ""
"¿Qué es lo que hacen <literal>Transaction.begin()</literal> y <literal>commit"
"()</literal>? ¿Dónde está el rollback en caso que algo vaya mal? La API de "
"<literal>Transaction</literal> de Hibernate es opcional realmente, pero la "
"usamos por conveniencia y portabilidad. Si manejases la transacción de base "
"de datos por ti mismo (por ejemplo, llamando a <literal>session.connection."
"commit()</literal>), ligarías el código a un entorno de despliegue "
"particular, en este JDBC directo no manejado. Estableciendo la fábrica de "
"<literal>Transaction</literal> en tu configuración de Hibernate puedes "
"desplegar tu capa de persistencia en cualquier sitio. Echa una mirada al "
"<xref linkend=\"transactions\"/> para más información sobre manejo y "
"demarcación de transacciones. Hemos saltado también cualquier manejo de "
"excepciones y rollback en este ejemplo."

#. Tag: para
#: tutorial.xml:458
#, no-c-format
msgid ""
"To run this first routine we have to add a callable target to the Ant build "
"file:"
msgstr ""
"Para ejecutar la primera rutina tenemos que agregar un objetivo llamable al "
"fichero de construcción de Ant:"

#. Tag: programlisting
#: tutorial.xml:462
#, no-c-format
msgid ""
"<![CDATA[<target name=\"run\" depends=\"compile\">\n"
"    <java fork=\"true\" classname=\"events.EventManager\" classpathref="
"\"libraries\">\n"
"        <classpath path=\"${targetdir}\"/>\n"
"        <arg value=\"${action}\"/>\n"
"    </java>\n"
"</target>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:464
#, no-c-format
msgid ""
"The value of the <literal>action</literal> argument is set on the command "
"line when calling the target:"
msgstr ""
"El valor del argumento <literal>action</literal> es establecido por línea de "
"comandos al llamar al objetivo:"

#. Tag: programlisting
#: tutorial.xml:469
#, no-c-format
msgid "<![CDATA[C:\\hibernateTutorial\\>ant run -Daction=store]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:471
#, no-c-format
msgid ""
"You should see, after compilation, Hibernate starting up and, depending on "
"your configuration, lots of log output. At the end you will find the "
"following line:"
msgstr ""
"Debes ver, después de la compilación, a Hibernate arrancando y, dependiendo "
"de tu configuración mucha salida de registro (log). Al final encontrarás la "
"siguiente línea:"

#. Tag: programlisting
#: tutorial.xml:476
#, no-c-format
msgid ""
"<![CDATA[[java] Hibernate: insert into EVENTS (EVENT_DATE, title, EVENT_ID) "
"values (?, ?, ?)]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:478
#, no-c-format
msgid ""
"This is the <literal>INSERT</literal> executed by Hibernate, the question "
"marks represent JDBC bind parameters. To see the values bound as arguments, "
"or to reduce the verbosity of the log, check your <literal>log4j.properties</"
"literal>."
msgstr ""
"Esta es la <literal>INSERT</literal> ejecutada por Hibernate, los signos de "
"preguntas representan parámetros de ligado JDBC. Para ver los valores "
"ligados como argumentos, o para reducir la verborragia del registro, chequea "
"tu <literal>log4j.properties</literal>."

#. Tag: para
#: tutorial.xml:484
#, no-c-format
msgid ""
"Now we'd like to list stored events as well, so we add an option to the main "
"method:"
msgstr ""
"Ahora quisiéramos listar acontecimientos almacenados también, así que "
"agregamos una opción al método principal:"

#. Tag: programlisting
#: tutorial.xml:488
#, no-c-format
msgid ""
"<![CDATA[if (args[0].equals(\"store\")) {\n"
"    mgr.createAndStoreEvent(\"My Event\", new Date());\n"
"}\n"
"else if (args[0].equals(\"list\")) {\n"
"    List events = mgr.listEvents();\n"
"    for (int i = 0; i < events.size(); i++) {\n"
"        Event theEvent = (Event) events.get(i);\n"
"        System.out.println(\"Event: \" + theEvent.getTitle() +\n"
"                           \" Time: \" + theEvent.getDate());\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:490
#, no-c-format
msgid "We also add a new <literal>listEvents() method</literal>:"
msgstr "Agregamos también un nuevo método <literal>listEvents()</literal>:"

#. Tag: programlisting
#: tutorial.xml:494
#, no-c-format
msgid ""
"<![CDATA[private List listEvents() {\n"
"\n"
"    Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"\n"
"    session.beginTransaction();\n"
"\n"
"    List result = session.createQuery(\"from Event\").list();\n"
"\n"
"    session.getTransaction().commit();\n"
"\n"
"    return result;\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:496
#, no-c-format
msgid ""
"What we do here is use an HQL (Hibernate Query Language) query to load all "
"existing <literal>Event</literal> objects from the database. Hibernate will "
"generate the appropriate SQL, send it to the database and populate "
"<literal>Event</literal> objects with the data. You can create more complex "
"queries with HQL, of course."
msgstr ""
"Lo que hacemos aquí es usar una consulta HQL (Lenguaje de Consulta de "
"Hibernate o Hibernate Query Language) para cargar todos los objetos "
"<literal>Event</literal> existentes de la base de datos. Hibernate generará "
"el SQL apropiado, lo enviará a la base de datosy poblará los objetos "
"<literal>Event</literal> con datos. Puedes, por supuesto, crear consultas "
"más complejas con HQL."

#. Tag: para
#: tutorial.xml:503
#, no-c-format
msgid "Now, to execute and test all of this, follow these steps:"
msgstr "Now, to execute and test all of this, follow these steps:"

#. Tag: para
#: tutorial.xml:509
#, no-c-format
msgid ""
"Run <literal>ant run -Daction=store</literal> to store something into the "
"database and, of course, to generate the database schema before through "
"hbm2ddl."
msgstr ""
"Run <literal>ant run -Daction=store</literal> to store something into the "
"database and, of course, to generate the database schema before through "
"hbm2ddl."

#. Tag: para
#: tutorial.xml:515
#, no-c-format
msgid ""
"Now disable hbm2ddl by commenting out the property in your "
"<literal>hibernate.cfg.xml</literal> file. Usually you only leave it turned "
"on in continous unit testing, but another run of hbm2ddl would "
"<emphasis>drop</emphasis> everything you have stored - the <literal>create</"
"literal> configuration setting actually translates into \"drop all tables "
"from the schema, then re-create all tables, when the SessionFactory is build"
"\"."
msgstr ""
"Now disable hbm2ddl by commenting out the property in your "
"<literal>hibernate.cfg.xml</literal> file. Usually you only leave it turned "
"on in continous unit testing, but another run of hbm2ddl would "
"<emphasis>drop</emphasis> everything you have stored - the <literal>create</"
"literal> configuration setting actually translates into \"drop all tables "
"from the schema, then re-create all tables, when the SessionFactory is build"
"\"."

#. Tag: para
#: tutorial.xml:525
#, no-c-format
msgid ""
"If you now call Ant with <literal>-Daction=list</literal>, you should see "
"the events you have stored so far. You can of course also call the "
"<literal>store</literal> action a few times more."
msgstr ""
"If you now call Ant with <literal>-Daction=list</literal>, you should see "
"the events you have stored so far. You can of course also call the "
"<literal>store</literal> action a few times more."

#. Tag: para
#: tutorial.xml:531
#, no-c-format
msgid ""
"Note: Most new Hibernate users fail at this point and we see questions about "
"<emphasis>Table not found</emphasis> error messages regularly. However, if "
"you follow the steps outlined above you will not have this problem, as "
"hbm2ddl creates the database schema on the first run, and subsequent "
"application restarts will use this schema. If you change the mapping and/or "
"database schema, you have to re-enable hbm2ddl once again."
msgstr ""
"Note: Most new Hibernate users fail at this point and we see questions about "
"<emphasis>Table not found</emphasis> error messages regularly. However, if "
"you follow the steps outlined above you will not have this problem, as "
"hbm2ddl creates the database schema on the first run, and subsequent "
"application restarts will use this schema. If you change the mapping and/or "
"database schema, you have to re-enable hbm2ddl once again."

#. Tag: title
#: tutorial.xml:544
#, no-c-format
msgid "Part 2 - Mapping associations"
msgstr "Part 2 - Mapeando asociaciones"

#. Tag: para
#: tutorial.xml:546
#, no-c-format
msgid ""
"We mapped a persistent entity class to a table. Let's build on this and add "
"some class associations. First we'll add people to our application, and "
"store a list of events they participate in."
msgstr ""
"Hemos mapeado un clase de entidad persistente a una tabla. Construyamos "
"sobre esto y agreguemos algunas asociaciones de clase. Primero agregaremos "
"personas a nuestra aplicación, y almacenaremos una lista de eventos en las "
"que participan."

#. Tag: title
#: tutorial.xml:552
#, no-c-format
msgid "Mapping the Person class"
msgstr "Mapeando la clase Person"

#. Tag: para
#: tutorial.xml:554
#, no-c-format
msgid "The first cut of the <literal>Person</literal> class is simple:"
msgstr "El primer corte de la clase <literal>Person</literal> es simple:"

#. Tag: programlisting
#: tutorial.xml:558
#, no-c-format
msgid ""
"<![CDATA[package events;\n"
"\n"
"public class Person {\n"
"\n"
"    private Long id;\n"
"    private int age;\n"
"    private String firstname;\n"
"    private String lastname;\n"
"\n"
"    public Person() {}\n"
"\n"
"    // Accessor methods for all properties, private setter for 'id'\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:560
#, no-c-format
msgid ""
"Create a new mapping file called <literal>Person.hbm.xml</literal> (don't "
"forget the DTD reference at the top):"
msgstr "Crea un fichero de mapeo llamado <literal>Person.hbm.xml</literal>:"

#. Tag: programlisting
#: tutorial.xml:565
#, no-c-format
msgid ""
"<![CDATA[<hibernate-mapping>\n"
"\n"
"    <class name=\"events.Person\" table=\"PERSON\">\n"
"        <id name=\"id\" column=\"PERSON_ID\">\n"
"            <generator class=\"native\"/>\n"
"        </id>\n"
"        <property name=\"age\"/>\n"
"        <property name=\"firstname\"/>\n"
"        <property name=\"lastname\"/>\n"
"    </class>\n"
"\n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:567
#, no-c-format
msgid "Finally, add the new mapping to Hibernate's configuration:"
msgstr "Finalmente, agrega el nuevo mapeo a la configuración de Hibernate:"

#. Tag: programlisting
#: tutorial.xml:571
#, no-c-format
msgid ""
"<![CDATA[<mapping resource=\"events/Event.hbm.xml\"/>\n"
"<mapping resource=\"events/Person.hbm.xml\"/>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:573
#, no-c-format
msgid ""
"We'll now create an association between these two entities. Obviously, "
"persons can participate in events, and events have participants. The design "
"questions we have to deal with are: directionality, multiplicity, and "
"collection behavior."
msgstr ""
"Crearemos ahora una asociación entre estas dos entidades. Obviamente, las "
"personas pueden participar en eventos, y los eventos tienen participantes. "
"Las cuestiones de diseño con que tenemos que tratar son: direccionalidad, "
"multiplicidad y comportamiento de colección."

#. Tag: title
#: tutorial.xml:583
#, no-c-format
msgid "A unidirectional Set-based association"
msgstr "Una asociación unidireccional basada en Set"

#. Tag: para
#: tutorial.xml:585
#, no-c-format
msgid ""
"We'll add a collection of events to the <literal>Person</literal> class. "
"That way we can easily navigate to the events for a particular person, "
"without executing an explicit query - by calling <literal>aPerson.getEvents()"
"</literal>. We use a Java collection, a <literal>Set</literal>, because the "
"collection will not contain duplicate elements and the ordering is not "
"relevant for us."
msgstr ""
"Agregaremos una colección de eventos a la clase <literal>Person</literal>. "
"De esta forma podemos navegar facilmente a los eventos de una persona en "
"particular, sin ejecutar una consulta explícita, llamando a <literal>aPerson."
"getEvents()</literal>. Usamos una colección Java, un <literal>Set</literal>, "
"porque la colección no contendrá elementos duplicados y el ordenamiento no "
"nos es relevante."

#. Tag: para
#: tutorial.xml:592
#, no-c-format
msgid ""
"We need a unidirectional, many-valued associations, implemented with a "
"<literal>Set</literal>. Let's write the code for this in the Java classes "
"and then map it:"
msgstr ""
"Hasta ahora hemos diseñado asociaciones unidireccionales multivaluadas, "
"implementadas con un <literal>Set</literal>. Escribamos el código para esto "
"en las clases Java y luego lo mapeemos:"

#. Tag: programlisting
#: tutorial.xml:597
#, no-c-format
msgid ""
"<![CDATA[public class Person {\n"
"\n"
"    private Set events = new HashSet();\n"
"\n"
"    public Set getEvents() {\n"
"        return events;\n"
"    }\n"
"\n"
"    public void setEvents(Set events) {\n"
"        this.events = events;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:599
#, no-c-format
msgid ""
"Before we map this association, think about the other side. Clearly, we "
"could just keep this unidirectional. Or, we could create another collection "
"on the <literal>Event</literal>, if we want to be able to navigate it bi-"
"directional, i.e. <literal>anEvent.getParticipants()</literal>. This is not "
"necessary, from a functional perspective. You could always execute an "
"explicit query to retrieve the participants for a particular event. This is "
"a design choice left to you, but what is clear from this discussion is the "
"multiplicity of the association: \"many\" valued on both sides, we call this "
"a <emphasis>many-to-many</emphasis> association. Hence, we use Hibernate's "
"many-to-many mapping:"
msgstr ""
"Antes que mapeemos esta asociación, piensa sobre el otro lado. Claramente, "
"podemos mantener esto solamente unidireccional. O podemos crear otra "
"colección en el <literal>Event</literal>, si queremos ser capaces de "
"navegarlos bidireccionalmente; por ejemplo, <literal>anEvent.getParticipants"
"()</literal>. Esta es una elección de diseño que recae en ti, pero lo que "
"está claro de esta discusión es la multiplicidad de la asociación: \"multi\" "
"valuada a ambos lados, llamamos a esto una asociación <emphasis>muchos-a-"
"muchos</emphasis>. Por lo tanto, usamos un mapeo many-to-many de Hibernate:"

#. Tag: programlisting
#: tutorial.xml:610
#, no-c-format
msgid ""
"<![CDATA[<class name=\"events.Person\" table=\"PERSON\">\n"
"    <id name=\"id\" column=\"PERSON_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"age\"/>\n"
"    <property name=\"firstname\"/>\n"
"    <property name=\"lastname\"/>\n"
"\n"
"    <set name=\"events\" table=\"PERSON_EVENT\">\n"
"        <key column=\"PERSON_ID\"/>\n"
"        <many-to-many column=\"EVENT_ID\" class=\"events.Event\"/>\n"
"    </set>\n"
"\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:612
#, no-c-format
msgid ""
"Hibernate supports all kinds of collection mappings, a <literal>&lt;set&gt;</"
"literal> being most common. For a many-to-many association (or <emphasis>n:"
"m</emphasis> entity relationship), an association table is needed. Each row "
"in this table represents a link between a person and an event. The table "
"name is configured with the <literal>table</literal> attribute of the "
"<literal>set</literal> element. The identifier column name in the "
"association, for the person's side, is defined with the <literal>&lt;key&gt;"
"</literal> element, the column name for the event's side with the "
"<literal>column</literal> attribute of the <literal>&lt;many-to-many&gt;</"
"literal>. You also have to tell Hibernate the class of the objects in your "
"collection (correct: the class on the other side of the collection of "
"references)."
msgstr ""
"Hibernate soporta todo tipo de mapeos de colección, siendo el más común un "
"<literal>&lt;set&gt;</literal>. Para una asociación muchos-a-muchos (o "
"relación de entidad <emphasis>n:m</emphasis>), se necesita una tabla de "
"asociación. Cada fila en esta tabla representa un enlace entre una persona y "
"un evento. Esta tabla se configura con el atributo <literal>table</literal> "
"del elemento <literal>set</literal>. El nombre de la columna identificadora "
"en la asociación, para el lado de la persona, se define con el elemento "
"<literal>&lt;key&gt;</literal>. El nombre de columna para el lado del evento "
"se define con el atributo <literal>column</literal> del <literal>&lt;many-to-"
"many&gt;</literal>. También tienes que decirle a Hibernate la clase de los "
"objetos en tu colección (correcto: la clase del otro lado de la colección de "
"referencias)."

#. Tag: para
#: tutorial.xml:624
#, no-c-format
msgid "The database schema for this mapping is therefore:"
msgstr "El esquema de base de datos para este mapeo es, por lo tanto:"

#. Tag: programlisting
#: tutorial.xml:628
#, no-c-format
msgid ""
"<![CDATA[\n"
"    _____________        __________________\n"
"   |             |      |                  |       _____________\n"
"   |   EVENTS    |      |   PERSON_EVENT   |      |             |\n"
"   |_____________|      |__________________|      |    PERSON   |\n"
"   |             |      |                  |      |_____________|\n"
"   | *EVENT_ID   | <--> | *EVENT_ID        |      |             |\n"
"   |  EVENT_DATE |      | *PERSON_ID       | <--> | *PERSON_ID  |\n"
"   |  TITLE      |      |__________________|      |  AGE        |\n"
"   |_____________|                                |  FIRSTNAME  |\n"
"                                                  |  LASTNAME   |\n"
"                                                  |_____________|\n"
" ]]>"
msgstr ""

#. Tag: title
#: tutorial.xml:633
#, no-c-format
msgid "Working the association"
msgstr "Trabajando la asociación"

#. Tag: para
#: tutorial.xml:635
#, no-c-format
msgid ""
"Let's bring some people and events together in a new method in "
"<literal>EventManager</literal>:"
msgstr ""
"Traigamos alguna gente y eventos juntos en un nuevo método en "
"<literal>EventManager</literal>:"

#. Tag: programlisting
#: tutorial.xml:639
#, no-c-format
msgid ""
"<![CDATA[private void addPersonToEvent(Long personId, Long eventId) {\n"
"\n"
"    Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"    session.beginTransaction();\n"
"\n"
"    Person aPerson = (Person) session.load(Person.class, personId);\n"
"    Event anEvent = (Event) session.load(Event.class, eventId);\n"
"\n"
"    aPerson.getEvents().add(anEvent);\n"
"\n"
"    session.getTransaction().commit();\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:641
#, no-c-format
msgid ""
"After loading a <literal>Person</literal> and an <literal>Event</literal>, "
"simply modify the collection using the normal collection methods. As you can "
"see, there is no explicit call to <literal>update()</literal> or "
"<literal>save()</literal>, Hibernate automatically detects that the "
"collection has been modified and needs to be updated. This is called "
"<emphasis>automatic dirty checking</emphasis>, and you can also try it by "
"modifying the name or the date property of any of your objects. As long as "
"they are in <emphasis>persistent</emphasis> state, that is, bound to a "
"particular Hibernate <literal>Session</literal> (i.e. they have been just "
"loaded or saved in a unit of work), Hibernate monitors any changes and "
"executes SQL in a write-behind fashion. The process of synchronizing the "
"memory state with the database, usually only at the end of a unit of work, "
"is called <emphasis>flushing</emphasis>. In our code, the unit of work ends "
"with a commit (or rollback) of the database transaction - as defined by the "
"<literal>thread</literal> configuration option for the "
"<literal>CurrentSessionContext</literal> class."
msgstr ""
"Después de cargar una <literal>Person</literal> y un <literal>Event</"
"literal>, simplemente modifica la colección usando sus métodos normales. "
"Como puedes ver, no hay una llamada explícita a <literal>update()</literal> "
"o <literal>save()</literal>. Hibernate detecta automáticamente que la "
"colección ha sido modificada y necesita ser salvada. Esto es llamado "
"<emphasis>chequeo sucio automótico (automatic dirty checking)</emphasis>, y "
"también puedes intentarlo modificando el nombre de la propiedad de fecha de "
"cualquiera de tus objetos. Mientras estén en estado <emphasis>persistente</"
"emphasis>, esto es, ligados a una <literal>Session</literal> de Hibernate "
"particular (es decir, justo han sido cargados o almacenados en una unidad de "
"trabajo), Hibernate monitoriza cualquier cambio y ejecuta SQL en estilo "
"escribe-por-detrás. El proceso de sincronización del estado de memoria con "
"la base de datos, usualmente sólo al final de una unidad de trabajo, es "
"llamado <emphasis>limpieza (flushing)</emphasis>."

#. Tag: para
#: tutorial.xml:656
#, no-c-format
msgid ""
"You might of course load person and event in different units of work. Or you "
"modify an object outside of a <literal>Session</literal>, when it is not in "
"persistent state (if it was persistent before, we call this state "
"<emphasis>detached</emphasis>). You can even modify a collection when it is "
"detached:"
msgstr ""
"Podrías, por supuesto, cargar persona y evento en unidades de trabajo "
"diferentes. O modificas un objeto fuera de una <literal>Session</literal>, "
"cuando no está en estado persistente (si antes era persistente llamamos a "
"este estado <emphasis>separado (detached) </emphasis>). En código (no muy "
"realista), esto se vería como sigue:"

#. Tag: programlisting
#: tutorial.xml:663
#, no-c-format
msgid ""
"<![CDATA[private void addPersonToEvent(Long personId, Long eventId) {\n"
"\n"
"    Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"    session.beginTransaction();\n"
"\n"
"    Person aPerson = (Person) session\n"
"            .createQuery(\"select p from Person p left join fetch p.events "
"where p.id = :pid\")\n"
"            .setParameter(\"pid\", personId)\n"
"            .uniqueResult(); // Eager fetch the collection so we can use it "
"detached\n"
"\n"
"    Event anEvent = (Event) session.load(Event.class, eventId);\n"
"\n"
"    session.getTransaction().commit();\n"
"\n"
"    // End of first unit of work\n"
"\n"
"    aPerson.getEvents().add(anEvent); // aPerson (and its collection) is "
"detached\n"
"\n"
"    // Begin second unit of work\n"
"\n"
"    Session session2 = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"    session2.beginTransaction();\n"
"\n"
"    session2.update(aPerson); // Reattachment of aPerson\n"
"\n"
"    session2.getTransaction().commit();\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:665
#, no-c-format
msgid ""
"The call to <literal>update</literal> makes a detached object persistent "
"again, you could say it binds it to a new unit of work, so any modifications "
"you made to it while detached can be saved to the database. This includes "
"any modifications (additions/deletions) you made to a collection of that "
"entity object."
msgstr ""
"La llamada a <literal>update</literal> hace a un objeto persistente de "
"nuevo, podrías decir que la liga a una nueva unidad de trabajo, de modo que "
"cualquier modificación que le hagas mientras esté separado puede ser salvada "
"a base de datos."

#. Tag: para
#: tutorial.xml:672
#, no-c-format
msgid ""
"Well, this is not much use in our current situation, but it's an important "
"concept you can design into your own application. For now, complete this "
"exercise by adding a new action to the <literal>EventManager</literal>'s "
"main method and call it from the command line. If you need the identifiers "
"of a person and an event - the <literal>save()</literal> method returns it "
"(you might have to modify some of the previous methods to return that "
"identifier):"
msgstr ""
"Bueno, esto no es muy usado en nuestra situación actual, pero es un concepto "
"importante que puedes diseñar en tu propia aplicación. Por ahora, completa "
"este ejercicio agregando una nueva acción al método main de "
"<literal>EventManager</literal> y llámala desde la línea de comandos. Si "
"necesitas los identificadores de una persona o evento, el método "
"<literal>save()</literal> los devuelve."

#. Tag: programlisting
#: tutorial.xml:680
#, no-c-format
msgid ""
"<![CDATA[else if (args[0].equals(\"addpersontoevent\")) {\n"
"    Long eventId = mgr.createAndStoreEvent(\"My Event\", new Date());\n"
"    Long personId = mgr.createAndStorePerson(\"Foo\", \"Bar\");\n"
"    mgr.addPersonToEvent(personId, eventId);\n"
"    System.out.println(\"Added person \" + personId + \" to event \" + "
"eventId);\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:682
#, no-c-format
msgid ""
"This was an example of an association between two equally important classes, "
"two entities. As mentioned earlier, there are other classes and types in a "
"typical model, usually \"less important\". Some you have already seen, like "
"an <literal>int</literal> or a <literal>String</literal>. We call these "
"classes <emphasis>value types</emphasis>, and their instances "
"<emphasis>depend</emphasis> on a particular entity. Instances of these types "
"don't have their own identity, nor are they shared between entities (two "
"persons don't reference the same <literal>firstname</literal> object, even "
"if they have the same first name). Of course, value types can not only be "
"found in the JDK (in fact, in a Hibernate application all JDK classes are "
"considered value types), but you can also write dependent classes yourself, "
"<literal>Address</literal> or <literal>MonetaryAmount</literal>, for example."
msgstr ""
"Esto fue un ejemplo de una asociación entre dos clases igualmente "
"importantes, dos entidades. Como se ha mencionado anteriormente, hay otras "
"clases y tipos en un modelo típico, usualmente \"menos importantes\". "
"Algunos ya los habrás visto, como un <literal>int</literal> o un "
"<literal>String</literal>. Llamamos a estas clases <emphasis>tipos de valor "
"(value types)</emphasis>, y sus instancias <emphasis>dependen</emphasis> de "
"una entidad en particular. Las instancias de estos tipos no tienen su propia "
"identidad, ni son compartidas entre entidades (dos personas no referencian "
"el mismo objeto <literal>firstname</literal>, incluso si tuvieran el mismo "
"primer nombre). Por supuesto, los tipos de valor no sólo pueden encontrarse "
"en el JDK (de hecho, en una aplicación Hibernate todas las clases del JDK "
"son consideradas tipos de valor), sino que además puedes escribir por ti "
"mismo clases dependientes, por ejemplo, <literal>Address</literal> o "
"<literal>MonetaryAmount</literal>."

#. Tag: para
#: tutorial.xml:695
#, no-c-format
msgid ""
"You can also design a collection of value types. This is conceptually very "
"different from a collection of references to other entities, but looks "
"almost the same in Java."
msgstr ""
"También puedes diseñar una colección de tipos de valor. Esto es "
"conceptualmente muy diferente de una colección de referencias a otras "
"entidades, pero se ve casi lo mismo en Java."

#. Tag: title
#: tutorial.xml:703
#, no-c-format
msgid "Collection of values"
msgstr "Colección de valores"

#. Tag: para
#: tutorial.xml:705
#, no-c-format
msgid ""
"We add a collection of value typed objects to the <literal>Person</literal> "
"entity. We want to store email addresses, so the type we use is "
"<literal>String</literal>, and the collection is again a <literal>Set</"
"literal>:"
msgstr ""
"Agregamos una colección de objetos tipificados en valor a la entidad "
"<literal>Person</literal>. Queremos almacenar direcciones de email, de modo "
"que el tipo que usamos es <literal>String</literal>, y la colección es "
"nuevamente un <literal>Set</literal>:"

#. Tag: programlisting
#: tutorial.xml:710
#, no-c-format
msgid ""
"<![CDATA[private Set emailAddresses = new HashSet();\n"
"\n"
"public Set getEmailAddresses() {\n"
"    return emailAddresses;\n"
"}\n"
"\n"
"public void setEmailAddresses(Set emailAddresses) {\n"
"    this.emailAddresses = emailAddresses;\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:712
#, no-c-format
msgid "The mapping of this <literal>Set</literal>:"
msgstr "El mapeo de este <literal>Set</literal>:"

#. Tag: programlisting
#: tutorial.xml:716
#, no-c-format
msgid ""
"<![CDATA[<set name=\"emailAddresses\" table=\"PERSON_EMAIL_ADDR\">\n"
"    <key column=\"PERSON_ID\"/>\n"
"    <element type=\"string\" column=\"EMAIL_ADDR\"/>\n"
"</set>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:718
#, no-c-format
msgid ""
"The difference compared with the earlier mapping is the <literal>element</"
"literal> part, which tells Hibernate that the collection does not contain "
"references to another entity, but a collection of elements of type "
"<literal>String</literal> (the lowercase name tells you it's a Hibernate "
"mapping type/converter). Once again, the <literal>table</literal> attribute "
"of the <literal>set</literal> element determines the table name for the "
"collection. The <literal>key</literal> element defines the foreign-key "
"column name in the collection table. The <literal>column</literal> attribute "
"in the <literal>element</literal> element defines the column name where the "
"<literal>String</literal> values will actually be stored."
msgstr ""
"La diferencia comparada con el mapeo anterior es la parte <literal>element</"
"literal>, que le dice a Hibernate que la colección no contiene referencias a "
"otra entidad, sino una colección de elementos de tipo <literal>String</"
"literal> (el nombre en minúsculas te dice que es un tipo/conversor de mapeo "
"de Hibernate). Una vez más, el atributo <literal>table</literal> del "
"elemento <literal>set</literal> determina el nombre de la tabla para la "
"colección. El elemento <literal>key</literal> define el nombre de la columna "
"clave foránea en la tabla de colección. El atributo <literal>column</"
"literal> en el elemento <literal>element</literal> define el nombre de "
"columna donde realmente serán almacenados los valores <literal>String</"
"literal>."

#. Tag: para
#: tutorial.xml:728
#, no-c-format
msgid "Have a look at the updated schema:"
msgstr "Echa una mirada al esquema actualizado:"

#. Tag: programlisting
#: tutorial.xml:732
#, no-c-format
msgid ""
"<![CDATA[\n"
"  _____________        __________________\n"
" |             |      |                  |       _____________\n"
" |   EVENTS    |      |   PERSON_EVENT   |      |             |       "
"___________________\n"
" |_____________|      |__________________|      |    PERSON   |      "
"|                   |\n"
" |             |      |                  |      |_____________|      | "
"PERSON_EMAIL_ADDR |\n"
" | *EVENT_ID   | <--> | *EVENT_ID        |      |             |      |"
"___________________|\n"
" |  EVENT_DATE |      | *PERSON_ID       | <--> | *PERSON_ID  | <--> |  "
"*PERSON_ID       |\n"
" |  TITLE      |      |__________________|      |  AGE        |      |  "
"*EMAIL_ADDR      |\n"
" |_____________|                                |  FIRSTNAME  |      |"
"___________________|\n"
"                                                |  LASTNAME   |\n"
"                                                |_____________|\n"
" ]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:734
#, no-c-format
msgid ""
"You can see that the primary key of the collection table is in fact a "
"composite key, using both columns. This also implies that there can't be "
"duplicate email addresses per person, which is exactly the semantics we need "
"for a set in Java."
msgstr ""
"Puedes ver que la clave primaria de la tabla de colección es de hecho una "
"clave compuesta, usando ambas columnas. Esto implica también que no pueden "
"haber direcciones de email duplicadas por persona, que es exactamente la "
"semántica que necesitamos para un conjunto en Java."

#. Tag: para
#: tutorial.xml:740
#, no-c-format
msgid ""
"You can now try and add elements to this collection, just like we did before "
"by linking persons and events. It's the same code in Java:"
msgstr ""
"Puedes ahora intentar y agregar elementos a esta colección, al igual que "
"hicimos antes enlazando personas y eventos. Es el mismo código en Java."

#. Tag: programlisting
#: tutorial.xml:745
#, no-c-format
msgid ""
"<![CDATA[private void addEmailToPerson(Long personId, String emailAddress) "
"{\n"
"\n"
"    Session session = HibernateUtil.getSessionFactory().getCurrentSession"
"();\n"
"    session.beginTransaction();\n"
"\n"
"    Person aPerson = (Person) session.load(Person.class, personId);\n"
"\n"
"    // The getEmailAddresses() might trigger a lazy load of the collection\n"
"    aPerson.getEmailAddresses().add(emailAddress);\n"
"\n"
"    session.getTransaction().commit();\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:747
#, no-c-format
msgid ""
"This time we didnt' use a <emphasis>fetch</emphasis> query to initialize the "
"collection. Hence, the call to its getter method will trigger an additional "
"select to initialize it, so we can add an element to it. Monitor the SQL log "
"and try to optimize this with an eager fetch."
msgstr ""
"This time we didnt' use a <emphasis>fetch</emphasis> query to initialize the "
"collection. Hence, the call to its getter method will trigger an additional "
"select to initialize it, so we can add an element to it. Monitor the SQL log "
"and try to optimize this with an eager fetch."

#. Tag: title
#: tutorial.xml:757
#, no-c-format
msgid "Bi-directional associations"
msgstr "Asociaciones bidireccionales"

#. Tag: para
#: tutorial.xml:759
#, no-c-format
msgid ""
"Next we are going to map a bi-directional association - making the "
"association between person and event work from both sides in Java. Of "
"course, the database schema doesn't change, we still have many-to-many "
"multiplicity. A relational database is more flexible than a network "
"programming language, so it doesn't need anything like a navigation "
"direction - data can be viewed and retrieved in any possible way."
msgstr ""
"A continuacion vamos a mapear una asociación bidireccional, haciendo que la "
"asociación entre persona y evento funcione desde ambos lados en Java. Por "
"supuesto, el esquema de base de datos no cambia; todavía necesitamos "
"multiplicidad muchos-a-muchos. Una base de datos relacional es más flexible "
"que un lenguaje de programación de red, así que no necesita nada parecido a "
"una dirección de navegación; los datos pueden ser vistos y recuperados en "
"cualquier forma posible."

#. Tag: para
#: tutorial.xml:767
#, no-c-format
msgid ""
"First, add a collection of participants to the <literal>Event</literal> "
"Event class:"
msgstr ""
"Primero agrega una colección de participantes a la clase de eventos "
"<literal>Event</literal>:"

#. Tag: programlisting
#: tutorial.xml:771
#, no-c-format
msgid ""
"<![CDATA[private Set participants = new HashSet();\n"
"\n"
"public Set getParticipants() {\n"
"    return participants;\n"
"}\n"
"\n"
"public void setParticipants(Set participants) {\n"
"    this.participants = participants;\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:773
#, no-c-format
msgid ""
"Now map this side of the association too, in <literal>Event.hbm.xml</"
"literal>."
msgstr ""
"Ahora mapea este lado de la asociación también, en <literal>Event.hbm.xml</"
"literal>."

#. Tag: programlisting
#: tutorial.xml:777
#, no-c-format
msgid ""
"<![CDATA[<set name=\"participants\" table=\"PERSON_EVENT\" inverse=\"true"
"\">\n"
"    <key column=\"EVENT_ID\"/>\n"
"    <many-to-many column=\"PERSON_ID\" class=\"events.Person\"/>\n"
"</set>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:779
#, no-c-format
msgid ""
"As you see, these are normal <literal>set</literal> mappings in both mapping "
"documents. Notice that the column names in <literal>key</literal> and "
"<literal>many-to-many</literal> are swapped in both mapping documents. The "
"most important addition here is the <literal>inverse=\"true\"</literal> "
"attribute in the <literal>set</literal> element of the <literal>Event</"
"literal>'s collection mapping."
msgstr ""
"Como ves, estos son mapeos normales de <literal>set</literal> en ambos "
"documentos de mapeo. Nota que los nombres de columnas en <literal>key</"
"literal> y <literal>many-to-many</literal> fueron permutados en ambos "
"documentos de mapeo. Aquí la adición más importante es el atributo "
"<literal>inverse=\"true\"</literal> en el elemento <literal>set</literal> "
"del mapeo de colección de <literal>Event</literal>."

#. Tag: para
#: tutorial.xml:787
#, no-c-format
msgid ""
"What this means is that Hibernate should take the other side - the "
"<literal>Person</literal> class - when it needs to find out information "
"about the link between the two. This will be a lot easier to understand once "
"you see how the bi-directional link between our two entities is created ."
msgstr ""
"Lo que esto significa es que Hibernate debe tomar el otro lado - la clase "
"<literal>Person</literal> - cuando necesite descubrir información sobre el "
"enlace entre las dos. Esto será mucho más fácil de entender una vez que veas "
"cómo se crea el enlace bidireccional entre nuestras dos entidades."

#. Tag: title
#: tutorial.xml:796
#, no-c-format
msgid "Working bi-directional links"
msgstr "Trabajando enlaces bidireccionales"

#. Tag: para
#: tutorial.xml:798
#, no-c-format
msgid ""
"First, keep in mind that Hibernate does not affect normal Java semantics. "
"How did we create a link between a <literal>Person</literal> and an "
"<literal>Event</literal> in the unidirectional example? We added an instance "
"of <literal>Event</literal> to the collection of event references, of an "
"instance of <literal>Person</literal>. So, obviously, if we want to make "
"this link working bi-directional, we have to do the same on the other side - "
"adding a <literal>Person</literal> reference to the collection in an "
"<literal>Event</literal>. This \"setting the link on both sides\" is "
"absolutely necessary and you should never forget doing it."
msgstr ""
"Primero, ten en mente que Hhibernate no afecta la semántica normal de Java. "
"¿Cómo hemos creado un enlace entre una <literal>Person</literal> y un "
"<literal>Event</literal> en el ejemplo unidireccional? Hemos agregado una "
"instancia de <literal>Event</literal> a la colección de referencias de "
"eventos de una instancia de <literal>Person</literal>. De modo que, "
"obviamente, si queremos que este enlace funcione bidireccionalmente, tenemos "
"que hacer lo mismo del otro lado, agregando una referencia a "
"<literal>Person</literal> a la colección en un <literal>Event</literal>. "
"Este \"establecer el enlace a ambos lados\" es absolutamente necesario y "
"nunca debes olvidar hacerlo."

#. Tag: para
#: tutorial.xml:808
#, no-c-format
msgid ""
"Many developers program defensive and create link management methods to "
"correctly set both sides, e.g. in <literal>Person</literal>:"
msgstr ""
"Muchos desarrolladores programan a la defensiva y crean métodos de manejo de "
"un enlace para establecer correctamente ambos lados, por ejemplo en "
"<literal>Person</literal>:"

#. Tag: programlisting
#: tutorial.xml:813
#, no-c-format
msgid ""
"<![CDATA[protected Set getEvents() {\n"
"    return events;\n"
"}\n"
"\n"
"protected void setEvents(Set events) {\n"
"    this.events = events;\n"
"}\n"
"\n"
"public void addToEvent(Event event) {\n"
"    this.getEvents().add(event);\n"
"    event.getParticipants().add(this);\n"
"}\n"
"\n"
"public void removeFromEvent(Event event) {\n"
"    this.getEvents().remove(event);\n"
"    event.getParticipants().remove(this);\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:815
#, no-c-format
msgid ""
"Notice that the get and set methods for the collection are now protected - "
"this allows classes in the same package and subclasses to still access the "
"methods, but prevents everybody else from messing with the collections "
"directly (well, almost). You should probably do the same with the collection "
"on the other side."
msgstr ""
"Nota que los métodos get y set para esta colección son ahora protegidos. "
"Esto le permite a clases en el mismo paquete y a subclases acceder aún a los "
"métodos, pero previene a cualquier otro de ensuciarse con la colección "
"directamente (bueno, casi). Probablemente debas hacer lo mismo con la "
"colección al otro lado."

#. Tag: para
#: tutorial.xml:822
#, no-c-format
msgid ""
"What about the <literal>inverse</literal> mapping attribute? For you, and "
"for Java, a bi-directional link is simply a matter of setting the references "
"on both sides correctly. Hibernate however doesn't have enough information "
"to correctly arrange SQL <literal>INSERT</literal> and <literal>UPDATE</"
"literal> statements (to avoid constraint violations), and needs some help to "
"handle bi-directional associations properly. Making one side of the "
"association <literal>inverse</literal> tells Hibernate to basically ignore "
"it, to consider it a <emphasis>mirror</emphasis> of the other side. That's "
"all that is necessary for Hibernate to work out all of the issues when "
"transformation a directional navigation model to a SQL database schema. The "
"rules you have to remember are straightforward: All bi-directional "
"associations need one side as <literal>inverse</literal>. In a one-to-many "
"association it has to be the many-side, in many-to-many association you can "
"pick either side, there is no difference."
msgstr ""
"Y ¿qué del atributo de mapeo <literal>inverse</literal>? Para ti, y para "
"Java, un enlace bidireccional es simplemente cuestión de establecer "
"correctamente las referencias a ambos lados. Hibernate, sin embargo, no "
"tiene suficiente información para arreglar correctamente sentencias "
"<literal>INSERT</literal> y <literal>UPDATE</literal> de SQL (para evitar "
"violación de restricciones), y necesita alguna ayuda para manejar "
"asociaciones bidireccionales apropiadamente. El hacer un lado de la "
"asociación <literal>inverse</literal> le dice a Hibernate que basicamente lo "
"ignore, que lo considere un <emphasis>espejo</emphasis> del otro lado. Esto "
"es todo lo necesario para que Hibernate resuelva todas las incidencias al "
"transformar un modelo de navegación direccional a un esquema SQL de base de "
"datos. Las reglas que tienes que recordar son directas: Todas las "
"asociaciones bidireccionales necesitan uno de los lados como "
"<literal>inverse</literal>. En una asociación uno-a-muchos debe ser el lado-"
"de-muchos. En una asociación muchos-a-muchos, puedes tomar cualquier lado, "
"no hay diferencia."

#. Tag: para
#: tutorial.xml:837
#, no-c-format
msgid "Let's turn this into a small web application."
msgstr "Let's turn this into a small web application."

#. Tag: title
#: tutorial.xml:844
#, no-c-format
msgid "Part 3 - The EventManager web application"
msgstr "Part 3 - The EventManager web application"

#. Tag: para
#: tutorial.xml:846
#, no-c-format
msgid ""
"A Hibernate web application uses <literal>Session</literal> and "
"<literal>Transaction</literal> almost like a standalone application. "
"However, some common patterns are useful. We now write an "
"<literal>EventManagerServlet</literal>. This servlet can list all events "
"stored in the database, and it provides an HTML form to enter new events."
msgstr ""
"A Hibernate web application uses <literal>Session</literal> and "
"<literal>Transaction</literal> almost like a standalone application. "
"However, some common patterns are useful. We now write an "
"<literal>EventManagerServlet</literal>. This servlet can list all events "
"stored in the database, and it provides an HTML form to enter new events."

#. Tag: title
#: tutorial.xml:854
#, no-c-format
msgid "Writing the basic servlet"
msgstr "Writing the basic servlet"

#. Tag: para
#: tutorial.xml:856
#, no-c-format
msgid ""
"Create a new class in your source directory, in the <literal>events</"
"literal> package:"
msgstr ""
"Create a new class in your source directory, in the <literal>events</"
"literal> package:"

#. Tag: programlisting
#: tutorial.xml:861
#, no-c-format
msgid ""
"<![CDATA[package events;\n"
"\n"
"// Imports\n"
"\n"
"public class EventManagerServlet extends HttpServlet {\n"
"\n"
"    // Servlet code\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:863
#, no-c-format
msgid ""
"The servlet handles HTTP <literal>GET</literal> requests only, hence, the "
"method we implement is <literal>doGet()</literal>:"
msgstr ""
"The servlet handles HTTP <literal>GET</literal> requests only, hence, the "
"method we implement is <literal>doGet()</literal>:"

#. Tag: programlisting
#: tutorial.xml:868
#, no-c-format
msgid ""
"<![CDATA[protected void doGet(HttpServletRequest request,\n"
"                     HttpServletResponse response)\n"
"        throws ServletException, IOException {\n"
"\n"
"    SimpleDateFormat dateFormatter = new SimpleDateFormat(\"dd.MM.yyyy\");\n"
"\n"
"    try {\n"
"        // Begin unit of work\n"
"        HibernateUtil.getSessionFactory()\n"
"                .getCurrentSession().beginTransaction();\n"
"\n"
"        // Process request and render page...\n"
"\n"
"        // End unit of work\n"
"        HibernateUtil.getSessionFactory()\n"
"                .getCurrentSession().getTransaction().commit();\n"
"\n"
"    } catch (Exception ex) {\n"
"        HibernateUtil.getSessionFactory()\n"
"                .getCurrentSession().getTransaction().rollback();\n"
"        throw new ServletException(ex);\n"
"    }\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:870
#, fuzzy, no-c-format
msgid ""
"The pattern we are applying here is called <emphasis>session-per-request</"
"emphasis>. When a request hits the servlet, a new Hibernate "
"<literal>Session</literal> is opened through the first call to "
"<literal>getCurrentSession()</literal> on the <literal>SessionFactory</"
"literal>. Then a database transaction is started&mdash;all data access as to "
"occur inside a transaction, no matter if data is read or written (we don't "
"use the auto-commit mode in applications)."
msgstr ""
"The pattern we are applying here is called <emphasis>session-per-request</"
"emphasis>. When a request hits the servlet, a new Hibernate "
"<literal>Session</literal> is opened through the first call to "
"<literal>getCurrentSession()</literal> on the <literal>SessionFactory</"
"literal>. Then a database transaction is started&mdash;all data access as to "
"occur inside a transaction, no matter if data is read or written (we don't "
"use the auto-commit mode in applications)."

#. Tag: para
#: tutorial.xml:879
#, no-c-format
msgid ""
"Do <emphasis>not</emphasis> use a new Hibernate <literal>Session</literal> "
"for every database operation. Use one Hibernate <literal>Session</literal> "
"that is scoped to the whole request. Use <literal>getCurrentSession()</"
"literal>, so that it is automatically bound to the current Java thread."
msgstr ""
"Do <emphasis>not</emphasis> use a new Hibernate <literal>Session</literal> "
"for every database operation. Use one Hibernate <literal>Session</literal> "
"that is scoped to the whole request. Use <literal>getCurrentSession()</"
"literal>, so that it is automatically bound to the current Java thread."

#. Tag: para
#: tutorial.xml:886
#, no-c-format
msgid ""
"Next, the possible actions of the request are processed and the response "
"HTML is rendered. We'll get to that part soon."
msgstr ""
"Next, the possible actions of the request are processed and the response "
"HTML is rendered. We'll get to that part soon."

#. Tag: para
#: tutorial.xml:891
#, fuzzy, no-c-format
msgid ""
"Finally, the unit of work ends when processing and rendering is complete. If "
"any problem occured during processing or rendering, an exception will be "
"thrown and the database transaction rolled back. This completes the "
"<literal>session-per-request</literal> pattern. Instead of the transaction "
"demarcation code in every servlet you could also write a servlet filter. See "
"the Hibernate website and Wiki for more information about this pattern, "
"called <emphasis>Open Session in View</emphasis>&mdash;you'll need it as "
"soon as you consider rendering your view in JSP, not in a servlet."
msgstr ""
"Finally, the unit of work ends when processing and rendering is complete. If "
"any problem occured during processing or rendering, an exception will be "
"thrown and the database transaction rolled back. This completes the "
"<literal>session-per-request</literal> pattern. Instead of the transaction "
"demarcation code in every servlet you could also write a servlet filter. See "
"the Hibernate website and Wiki for more information about this pattern, "
"called <emphasis>Open Session in View</emphasis>&mdash;you'll need it as "
"soon as you consider rendering your view in JSP, not in a servlet."

#. Tag: title
#: tutorial.xml:905
#, no-c-format
msgid "Processing and rendering"
msgstr "Processing and rendering"

#. Tag: para
#: tutorial.xml:907
#, no-c-format
msgid ""
"Let's implement the processing of the request and rendering of the page."
msgstr ""
"Let's implement the processing of the request and rendering of the page."

#. Tag: programlisting
#: tutorial.xml:911
#, no-c-format
msgid ""
"<![CDATA[// Write HTML header\n"
"PrintWriter out = response.getWriter();\n"
"out.println(\"<html><head><title>Event Manager</title></head><body>\");\n"
"\n"
"// Handle actions\n"
"if ( \"store\".equals(request.getParameter(\"action\")) ) {\n"
"\n"
"    String eventTitle = request.getParameter(\"eventTitle\");\n"
"    String eventDate = request.getParameter(\"eventDate\");\n"
"\n"
"    if ( \"\".equals(eventTitle) || \"\".equals(eventDate) ) {\n"
"        out.println(\"<b><i>Please enter event title and date.</i></b>\");\n"
"    } else {\n"
"        createAndStoreEvent(eventTitle, dateFormatter.parse(eventDate));\n"
"        out.println(\"<b><i>Added event.</i></b>\");\n"
"    }\n"
"}\n"
"\n"
"// Print page\n"
"printEventForm(out);\n"
"listEvents(out, dateFormatter);\n"
"\n"
"// Write HTML footer\n"
"out.println(\"</body></html>\");\n"
"out.flush();\n"
"out.close();]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:913
#, fuzzy, no-c-format
msgid ""
"Granted, this coding style with a mix of Java and HTML would not scale in a "
"more complex application&mdash;keep in mind that we are only illustrating "
"basic Hibernate concepts in this tutorial. The code prints an HTML header "
"and a footer. Inside this page, an HTML form for event entry and a list of "
"all events in the database are printed. The first method is trivial and only "
"outputs HTML:"
msgstr ""
"Granted, this coding style with a mix of Java and HTML would not scale in a "
"more complex application&mdash;keep in mind that we are only illustrating "
"basic Hibernate concepts in this tutorial. The code prints an HTML header "
"and a footer. Inside this page, an HTML form for event entry and a list of "
"all events in the database are printed. The first method is trivial and only "
"outputs HTML:"

#. Tag: programlisting
#: tutorial.xml:922
#, no-c-format
msgid ""
"<![CDATA[private void printEventForm(PrintWriter out) {\n"
"    out.println(\"<h2>Add new event:</h2>\");\n"
"    out.println(\"<form>\");\n"
"    out.println(\"Title: <input name='eventTitle' length='50'/><br/>\");\n"
"    out.println(\"Date (e.g. 24.12.2009): <input name='eventDate' "
"length='10'/><br/>\");\n"
"    out.println(\"<input type='submit' name='action' value='store'/>\");\n"
"    out.println(\"</form>\");\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:924
#, no-c-format
msgid ""
"The <literal>listEvents()</literal> method uses the Hibernate "
"<literal>Session</literal> bound to the current thread to execute a query:"
msgstr ""
"The <literal>listEvents()</literal> method uses the Hibernate "
"<literal>Session</literal> bound to the current thread to execute a query:"

#. Tag: programlisting
#: tutorial.xml:930
#, no-c-format
msgid ""
"<![CDATA[private void listEvents(PrintWriter out, SimpleDateFormat "
"dateFormatter) {\n"
"\n"
"    List result = HibernateUtil.getSessionFactory()\n"
"                    .getCurrentSession().createCriteria(Event.class).list"
"();\n"
"    if (result.size() > 0) {\n"
"        out.println(\"<h2>Events in database:</h2>\");\n"
"        out.println(\"<table border='1'>\");\n"
"        out.println(\"<tr>\");\n"
"        out.println(\"<th>Event title</th>\");\n"
"        out.println(\"<th>Event date</th>\");\n"
"        out.println(\"</tr>\");\n"
"        for (Iterator it = result.iterator(); it.hasNext();) {\n"
"            Event event = (Event) it.next();\n"
"            out.println(\"<tr>\");\n"
"            out.println(\"<td>\" + event.getTitle() + \"</td>\");\n"
"            out.println(\"<td>\" + dateFormatter.format(event.getDate()) + "
"\"</td>\");\n"
"            out.println(\"</tr>\");\n"
"        }\n"
"        out.println(\"</table>\");\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:932
#, no-c-format
msgid ""
"Finally, the <literal>store</literal> action is dispatched to the "
"<literal>createAndStoreEvent()</literal> method, which also uses the "
"<literal>Session</literal> of the current thread:"
msgstr ""
"Finally, the <literal>store</literal> action is dispatched to the "
"<literal>createAndStoreEvent()</literal> method, which also uses the "
"<literal>Session</literal> of the current thread:"

#. Tag: programlisting
#: tutorial.xml:938
#, no-c-format
msgid ""
"<![CDATA[protected void createAndStoreEvent(String title, Date theDate) {\n"
"    Event theEvent = new Event();\n"
"    theEvent.setTitle(title);\n"
"    theEvent.setDate(theDate);\n"
"\n"
"    HibernateUtil.getSessionFactory()\n"
"                    .getCurrentSession().save(theEvent);\n"
"}]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:940
#, no-c-format
msgid ""
"That's it, the servlet is complete. A request to the servlet will be "
"processed in a single <literal>Session</literal> and <literal>Transaction</"
"literal>. As earlier in the standalone application, Hibernate can "
"automatically bind these ojects to the current thread of execution. This "
"gives you the freedom to layer your code and access the "
"<literal>SessionFactory</literal> in any way you like. Usually you'd use a "
"more sophisticated design and move the data access code into data access "
"objects (the DAO pattern). See the Hibernate Wiki for more examples."
msgstr ""
"That's it, the servlet is complete. A request to the servlet will be "
"processed in a single <literal>Session</literal> and <literal>Transaction</"
"literal>. As earlier in the standalone application, Hibernate can "
"automatically bind these ojects to the current thread of execution. This "
"gives you the freedom to layer your code and access the "
"<literal>SessionFactory</literal> in any way you like. Usually you'd use a "
"more sophisticated design and move the data access code into data access "
"objects (the DAO pattern). See the Hibernate Wiki for more examples."

#. Tag: title
#: tutorial.xml:954
#, no-c-format
msgid "Deploying and testing"
msgstr "Deploying and testing"

#. Tag: para
#: tutorial.xml:956
#, no-c-format
msgid ""
"To deploy this application you have to create a web archive, a WAR. Add the "
"following Ant target to your <literal>build.xml</literal>:"
msgstr ""
"To deploy this application you have to create a web archive, a WAR. Add the "
"following Ant target to your <literal>build.xml</literal>:"

#. Tag: programlisting
#: tutorial.xml:961
#, no-c-format
msgid ""
"<![CDATA[<target name=\"war\" depends=\"compile\">\n"
"    <war destfile=\"hibernate-tutorial.war\" webxml=\"web.xml\">\n"
"        <lib dir=\"${librarydir}\">\n"
"          <exclude name=\"jsdk*.jar\"/>\n"
"        </lib>\n"
"\n"
"        <classes dir=\"${targetdir}\"/>\n"
"    </war>\n"
"</target>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:963
#, no-c-format
msgid ""
"This target creates a file called <literal>hibernate-tutorial.war</literal> "
"in your project directory. It packages all libraries and the <literal>web."
"xml</literal> descriptor, which is expected in the base directory of your "
"project:"
msgstr ""
"This target creates a file called <literal>hibernate-tutorial.war</literal> "
"in your project directory. It packages all libraries and the <literal>web."
"xml</literal> descriptor, which is expected in the base directory of your "
"project:"

#. Tag: programlisting
#: tutorial.xml:969
#, no-c-format
msgid ""
"<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<web-app version=\"2.4\"\n"
"    xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/"
"xml/ns/j2ee/web-app_2_4.xsd\">\n"
"\n"
"    <servlet>\n"
"        <servlet-name>Event Manager</servlet-name>\n"
"        <servlet-class>events.EventManagerServlet</servlet-class>\n"
"    </servlet>\n"
"\n"
"    <servlet-mapping>\n"
"        <servlet-name>Event Manager</servlet-name>\n"
"        <url-pattern>/eventmanager</url-pattern>\n"
"    </servlet-mapping>\n"
"</web-app>]]>"
msgstr ""

#. Tag: para
#: tutorial.xml:971
#, no-c-format
msgid ""
"Before you compile and deploy the web application, note that an additional "
"library is required: <literal>jsdk.jar</literal>. This is the Java servlet "
"development kit, if you don't have this library already, get it from the Sun "
"website and copy it to your library directory. However, it will be only used "
"for compliation and excluded from the WAR package."
msgstr ""
"Before you compile and deploy the web application, note that an additional "
"library is required: <literal>jsdk.jar</literal>. This is the Java servlet "
"development kit, if you don't have this library already, get it from the Sun "
"website and copy it to your library directory. However, it will be only used "
"for compliation and excluded from the WAR package."

#. Tag: para
#: tutorial.xml:979
#, no-c-format
msgid ""
"To build and deploy call <literal>ant war</literal> in your project "
"directory and copy the <literal>hibernate-tutorial.war</literal> file into "
"your Tomcat <literal>webapp</literal> directory. If you don't have Tomcat "
"installed, download it and follow the installation instructions. You don't "
"have to change any Tomcat configuration to deploy this application though."
msgstr ""
"To build and deploy call <literal>ant war</literal> in your project "
"directory and copy the <literal>hibernate-tutorial.war</literal> file into "
"your Tomcat <literal>webapp</literal> directory. If you don't have Tomcat "
"installed, download it and follow the installation instructions. You don't "
"have to change any Tomcat configuration to deploy this application though."

#. Tag: para
#: tutorial.xml:987
#, no-c-format
msgid ""
"Once deployed and Tomcat is running, access the application at "
"<literal>http://localhost:8080/hibernate-tutorial/eventmanager</literal>. "
"Make sure you watch the Tomcat log to see Hibernate initialize when the "
"first request hits your servlet (the static initializer in "
"<literal>HibernateUtil</literal> is called) and to get the detailed output "
"if any exceptions occurs."
msgstr ""
"Once deployed and Tomcat is running, access the application at "
"<literal>http://localhost:8080/hibernate-tutorial/eventmanager</literal>. "
"Make sure you watch the Tomcat log to see Hibernate initialize when the "
"first request hits your servlet (the static initializer in "
"<literal>HibernateUtil</literal> is called) and to get the detailed output "
"if any exceptions occurs."

#. Tag: title
#: tutorial.xml:1000
#, no-c-format
msgid "Summary"
msgstr "Summary"

#. Tag: para
#: tutorial.xml:1002
#, no-c-format
msgid ""
"This tutorial covered the basics of writing a simple standalone Hibernate "
"application and a small web application."
msgstr ""
"Este tutorial cubrió los fundamentos de escribir una simple aplicación "
"independiente de Hibernate."

#. Tag: para
#: tutorial.xml:1007
#, no-c-format
msgid ""
"If you already feel confident with Hibernate, continue browsing through the "
"reference documentation table of contents for topics you find interesting - "
"most asked are transactional processing (<xref linkend=\"transactions\"/>), "
"fetch performance (<xref linkend=\"performance\"/>), or the usage of the API "
"(<xref linkend=\"objectstate\"/>) and the query features (<xref linkend="
"\"objectstate-querying\"/>)."
msgstr ""
"Si ya te sientes confidente con Hibernate, continúa navegando a través de la "
"tabla de contenidos de la documentación de referencia para los temas que "
"encuentres interesantes. Los más consultados son procesamiento transaccional "
"(<xref linkend=\"transactions\"/>), rendimiento de recuperación (<xref "
"linkend=\"performance\"/>), o el uso de la API (<xref linkend=\"objectstate"
"\"/>) y las funcionalidades de consulta (<xref linkend=\"objectstate-querying"
"\"/>)."

#. Tag: para
#: tutorial.xml:1015
#, no-c-format
msgid ""
"Don't forget to check the Hibernate website for more (specialized) tutorials."
msgstr ""
"No olvides chequear el sitio web de Hibernate por más (especializados) "
"tutoriales."
