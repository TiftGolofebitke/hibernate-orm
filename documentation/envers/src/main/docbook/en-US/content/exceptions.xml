<?xml version='1.0' encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="exceptions">
    <title>Mapping exceptions</title>

    <sect1 id="exceptions-wontbesupported">

        <title>What isn't and will not be supported</title>

        <para>
            Bags (the corresponding Java type is List), as they can contain non-unique elements.
            The reason is that persisting, for example a bag of String-s, violates a principle
            of relational databases: that each table is a set of tuples. In case of bags,
            however (which require a join table), if there is a duplicate element, the two
            tuples corresponding to the elements will be the same. Hibernate allows this,
            however Envers (or more precisely: the database connector) will throw an exception
            when trying to persist two identical elements, because of a unique constraint violation.
        </para>

        <para>
            There are at least two ways out if you need bag semantics:
        </para>

        <orderedlist>
            <listitem>
                <para>
                    use an indexed collection, with the <literal>@IndexColumn</literal> annotation, or
                </para>
            </listitem>
            <listitem>
                <para>
                    provide a unique id for your elements with the <literal>@CollectionId</literal> annotation.
                </para>
            </listitem>
        </orderedlist>

    </sect1>

    <sect1 id="exceptions-willbesupported" revision="2">

        <title>What isn't and <emphasis>will</emphasis> be supported</title>

        <orderedlist>
            <listitem>
                <para>
                    collections of components
                </para>
            </listitem>
        </orderedlist>

    </sect1>

    <sect1 id="exceptions-onetomanyjoincolumn" revision="3">

        <title><literal>@OneToMany</literal>+<literal>@JoinColumn</literal></title>

        <para>
            When a collection is mapped using these two annotations, Hibernate doesn't
            generate a join table. Envers, however, has to do this, so that when you read the
            revisions in which the related entity has changed, you don't get false results.
        </para>
        <para>
            To be able to name the additional join table, there is a special annotation:
            <literal>@AuditJoinTable</literal>, which has similar semantics to JPA's
            <literal>@JoinTable</literal>.
        </para>

    </sect1>

</chapter>
