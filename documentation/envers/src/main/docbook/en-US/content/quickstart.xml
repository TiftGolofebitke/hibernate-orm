<?xml version='1.0' encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="quickstart">
    <title>Quickstart</title>

    <para>
        When configuring your persistence unit (the persistence.xml file), add the following event
        listeners: (this will allow Envers to check if any audited entities were modified)
    </para>

    <programlisting><![CDATA[<persistence-unit ...>
<provider>org.hibernate.ejb.HibernatePersistence</provider>
<class>...</class>
<properties>
   <property name="hibernate.dialect" ... />
   <!-- other hibernate properties -->

   <property name="hibernate.ejb.event.post-insert"
             value="org.hibernate.envers.event.VersionsEventListener" />
   <property name="hibernate.ejb.event.post-update"
             value="org.hibernate.envers.event.VersionsEventListener" />
   <property name="hibernate.ejb.event.post-delete"
             value="org.hibernate.envers.event.VersionsEventListener" />
   <property name="hibernate.ejb.event.pre-collection-update"
             value="org.hibernate.envers.event.VersionsEventListener" />
   <property name="hibernate.ejb.event.pre-collection-remove"
             value="org.hibernate.envers.event.VersionsEventListener" />
   <property name="hibernate.ejb.event.post-collection-recreate"
             value="org.hibernate.envers.event.VersionsEventListener" />
</properties>
</persistence-unit>]]></programlisting>

    <para>
        Then, annotate your persistent class with <literal>@Audited</literal> - this will make all
        properties versioned. For example:
    </para>

    <programlisting><![CDATA[import org.hibernate.envers.Audited;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;

@Entity
@Audited // that's the important part :)
public class Person {
    @Id
    @GeneratedValue
    private int id;

    private String name;

    private String surname;

    @ManyToOne
    private Address address;

    // add getters, setters, constructors, equals and hashCode here
}]]></programlisting>

    <para>
        And the referenced entity:
    </para>

    <programlisting><![CDATA[@Entity
@Audited
public class Address {
    @Id
    @GeneratedValue
    private int id;

    private String streetName;

    private Integer houseNumber;

    private Integer flatNumber;

    @OneToMany(mappedBy = "address")
    private Set<Person> persons;

    // add getters, setters, constructors, equals and hashCode here
}
]]></programlisting>

    <para>
        And that's it! You create, modify and delete the entites as always. If you look
        at the generated schema, you will notice that it is unchanged by adding auditing
        for the Address and Person entities. Also, the data they hold is the same. There are,
        however, two new tables - <literal>Address_audit</literal> and <literal>Person_audit</literal>,
        which store the historical data, whenever you commit a transaction.
    </para>

    <para>
        Instead of annotating the whole class and auditing all properties, you can annotate
        only some persistent properties with <literal>@Audited</literal>. This will cause only
        these properties to be audited.
    </para>

    <para>
        You can access the audit of an entity using the <literal>AuditReader</literal> interface, which you
        can obtain when having an open EntityManager. See also the javadocs.
    </para>

    <programlisting><![CDATA[AuditReader reader = AuditReaderFactory.get(entityManager);
Person oldPerson = reader.find(Person.class, personId, revision)
]]></programlisting>

    <para>
        The <literal>T find(Class&lt;T&gt; cls, Object primaryKey, Number revision)</literal>
        method returns an entity with the given primary key, with the data it contained at
        the given revision. If the entity didn't exist at this revision, <literal>null</literal>
        is returned. Only the audited properties will be set on the returned entity.
        The rest will be <literal>null</literal>.
    </para>

    <para>
        You can also get a list of revisions at which an entity was modified using the
        <literal>getRevisions</literal> method, as well as retrieve the date,
        at which a revision was created using the <literal>getRevisionDate</literal> method.
    </para>
</chapter>

