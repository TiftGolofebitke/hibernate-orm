apply plugin: 'karaf-featuresgen'


sourceSets {
	test {
		// send javac output and resource copying to the same output directory for test
		// so Pax Exam can more easily find it without explicit TinyBundle hooks
		output.classesDir = "${buildDir}/classes/test"
		output.resourcesDir = output.classesDir
	}
}

configurations {
	karafDistro {
		description = 'Configuration used to isolate the dependency on the Karaf distro'
		transitive = false
	}
	aries {
		description = 'Runtime dependencies for Aries for the hibernate-jpa-aries Karaf feature'
	}
}

ext {
	// MUST use 4.3.1!  4.3.0 was compiled with "-target jsr14".
	// http://blog.osgi.org/2012/10/43-companion-code-for-java-7.html
	osgiCoreVersion = '4.3.1'
	karafVersion = '3.0.3'
	paxExamVersion = '4.4.0'
	paxUrlVersion = '2.4.1'
}

dependencies {
	ext {
		paxExamVersion = '4.4.0'
		paxExamUrlVersion = '2.4.1'
		karafVersion = '3.0.3'
	}

	compile( project( ':hibernate-core' ) )
	compile( project( ':hibernate-entitymanager' ) )

	// MUST use 4.3.1!  4.3.0 was compiled with "-target jsr14".
	// http://blog.osgi.org/2012/10/43-companion-code-for-java-7.html
	compile "org.osgi:org.osgi.core:${osgiCoreVersion}"
	compile "org.osgi:org.osgi.compendium:${osgiCoreVersion}"

	testCompile "org.ops4j.pax.exam:pax-exam:${paxExamVersion}"
	testCompile "org.ops4j.pax.exam:pax-exam-junit4:${paxExamVersion}"
	testCompile "org.ops4j.pax.exam:pax-exam-container-karaf:${paxExamVersion}"
	// Need this explicitly in order to use @Inject -> shouldn't this be a transtive dep of pax-exam?
	//      is there ever a pax exam test that *does not* use this?
	testCompile 'javax.inject:javax.inject:1'

	testCompile( "org.apache.karaf:apache-karaf:${karafVersion}" ) {
		// having trouble finding this one locally
		exclude group: 'org.eclipse', module: 'org.eclipse.osgi'
	}

	karafDistro "org.apache.karaf:apache-karaf:${karafVersion}@tar.gz"

	aries 'org.apache.aries.transaction:org.apache.aries.transaction.blueprint:1.0.0'
	aries 'org.apache.aries.transaction:org.apache.aries.transaction.manager:1.0.1'
}

mavenPom {
	name = 'Hibernate OSGi Support'
	description = 'Support for running Hibernate O/RM in OSGi environments'
}

def osgiDescription() {
	return mavenPom.description
}

jar {
	manifest {
		instruction 'Bundle-Activator', 'org.hibernate.osgi.HibernateBundleActivator'

		instructionFirst 'Import-Package',
			// TODO: Shouldn't have to explicitly list this, but the plugin
			// generates it with a [1.0,2) version.
			'javax.persistence;version="2.1.0"',
			'javax.persistence.spi;version="2.1.0"'
	}
}


task generateVersionFile {
	File outputFileDir = project.file( "${buildDir}/classes/test/META-INF/hibernate-osgi/" )
	File outputFile = new File( outputFileDir, 'Version.txt' )

	inputs.property( "version", project.version )
	outputs.file outputFile

	doFirst {
		outputFileDir.mkdirs()

		def writer = new FileWriter( outputFile )
		try {
			writer.write( "${project.version}" )
			writer.flush()
		}
		finally {
			writer.close()
		}
	}
}

karafFeatures {
	features {
		// NOTE : would like to include spatial as well, but we need to wait for
		//		it to not define dependency on postgresql driver
		hibernateNative {
			name = 'hibernate-native'
			projects = [
					rootProject.childProjects.'hibernate-core',
					project
			]
		}
		hibernateJpa {
			name = 'hibernate-jpa'
			projects = [
					rootProject.childProjects.'hibernate-entitymanager',
					project
			]
		}
		hibernateJpaAries {
			name = 'hibernate-jpa-aries'
			projects = [
					rootProject.childProjects.'hibernate-entitymanager',
					project
			]
			extraBundleDependencies = [project.configurations.aries]
		}
		hibernateEnvers {
			name = 'hibernate-envers'
			projects = [
					rootProject.childProjects.'hibernate-envers',
					project
			]
		}
		hibernateInfinispan {
			name = 'hibernate-infinispan'
			projects = [
					rootProject.childProjects.'hibernate-infinispan',
					project
			]
		}
		hibernateEhcache {
			name = 'hibernate-ehcache'
			projects = [
					rootProject.childProjects.'hibernate-ehcache',
					project
			]
		}
	}
}

task generateDependsFile {
	// In order to fully use org.ops4j.pax.exam.CoreOptions.maven() stuff
	// we need to generate a META-INF/maven/dependencies.properties file
	// just like the generate-depends-file Maven goal from ServiceMix/Karaf

	File outputFileDir = project.file( 'target/classes/test/META-INF/maven/' )
	File outputFile = new File( outputFileDir, 'dependencies.properties' )

	outputs.file outputFile

	doFirst {
		outputFileDir.mkdirs()

		Properties properties = new Properties();

		// first we add our GAV info
		properties.setProperty( "groupId", "${project.group}" );
		properties.setProperty( "artifactId", project.name );
		properties.setProperty( "version", "${project.version}" );
		properties.setProperty( "${project.group}/${project.name}/version", "${project.version}" );

		// then for all our deps
		project.configurations.testRuntime.resolvedConfiguration.resolvedArtifacts.each {
			final String keyBase = it.moduleVersion.id.group + '/' + it.moduleVersion.id.name;
			properties.setProperty( "${keyBase}/scope", "compile" )
			properties.setProperty( "${keyBase}/type", it.extension )
			properties.setProperty( "${keyBase}/version", it.moduleVersion.id.version )
		}

		FileOutputStream outputStream = new FileOutputStream( outputFile );
		try {
			properties.store( outputStream, "Generated from Gradle by Hibernate build for PaxExam testing of hibernate-osgi module" )
		}
		finally {
			outputStream.close()
		}
	}
}

task generatePaxExamEnvironmentFile {
	// I found this better/easier than duplicating information...
	description = 'Generates a Properties file that the Pax Exam test can access to know information about the test environment'

	File outputFile = new File( sourceSets.test.output.resourcesDir, 'pax-exam-environment.properties' )
	File karafUnpackDirectory = file( "${buildDir}/karaf-unpack" )

	// set up up-to-date checks
	inputs.files( configurations.testRuntime )
	inputs.property( 'karafUnpackDirectory', karafUnpackDirectory )
	outputs.file( outputFile )

	doFirst {
		// should only be one artifacts..
		File karafDistroFile = configurations.karafDistro.resolvedConfiguration.resolvedArtifacts[0].file

		Properties properties = new Properties();
		properties.setProperty( 'org.ops4j.pax.exam.container.karaf.distroUrl', karafDistroFile.toURI().toURL().toExternalForm() )
		properties.setProperty( 'org.ops4j.pax.exam.container.karaf.unpackDir', karafUnpackDirectory.absolutePath )
		properties.setProperty( 'org.ops4j.pax.exam.container.karaf.version', karafVersion as String )
		properties.setProperty( 'org.ops4j.pax.exam.container.karaf.probe.classesDir', sourceSets.test.output.classesDir.absolutePath )
		properties.setProperty( 'org.ops4j.pax.exam.container.karaf.probe.resourcesDir', sourceSets.test.output.resourcesDir.absolutePath )
		properties.setProperty( 'org.hibernate.osgi.test.karafFeatureFile', karafFeatures.featuresXmlFile.absolutePath )

		outputFile.parentFile.mkdirs()

		FileOutputStream outputStream = new FileOutputStream( outputFile );
		try {
			properties.store( outputStream, "Generated from Gradle by Hibernate build for PaxExam testing of hibernate-osgi module" )
		}
		finally {
			outputStream.close()
		}
	}
}

tasks.test.dependsOn tasks.generateKarafFeatures
tasks.test.dependsOn tasks.jar
tasks.test.dependsOn tasks.generateDependsFile
tasks.test.dependsOn tasks.generatePaxExamEnvironmentFile
