
apply plugin: 'version-injection'
apply plugin: 'distribution'


dependencies {
	testCompile libraries.junit
    testCompile libraries.jpa
    testCompile project( ':hibernate-core' ) 
	testCompile libraries.slf4j_api
	testCompile libraries.slf4j_log4j
}

def pomName() {
    return 'Hibernate JPA 2 Metamodel Generator'
}

def pomDescription() {
    return 'Annotation Processor to generate JPA 2 static metamodel classes'
}

versionInjection {
    into( 'org.hibernate.jpamodelgen.Version', 'getVersionString' )
}

sourceSets.main {
    ext.jaxbTargetDir = file( "${buildDir}/generated-sources" )
    java.srcDir jaxbTargetDir
}

sourceSets.main {
    ext.xsdDir = file( "${projectDir}/src/main/xsd" )
    resources.srcDir xsdDir
}

jar {
	manifest {
		attributes 'Implementation-Title'     : '${project.name}', 
		           'Implementation-Version'   : '${project.version}'
	}
}

task jaxb {
    // output directory
    ext.jaxbTargetDir = file( "${buildDir}/generated-sources" )

    // input schema
    ext.ormXsd = file( 'src/main/xsd/orm_2_0.xsd')
    ext.persistenceXsd = file( 'src/main/xsd/persistence_2_0.xsd')

    // configure Gradle up-to-date checking
    inputs.files( [ormXsd, persistenceXsd] )
    outputs.dir( jaxbTargetDir )

    // perform actions
    doLast {
        jaxbTargetDir.mkdirs()

        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.jaxb.asPath)
        ant.jaxbTargetDir = jaxbTargetDir

        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'org.hibernate.jpamodelgen.xml.jaxb',
                extension: 'true'
        ) {
            schema  (dir:"src/main/xsd", includes:"*.xsd")
        }
    }
}
compileJava.dependsOn jaxb

checkstyleMain.exclude '**/jaxb/**'

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Javadocs
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
final File javadocDir = mkdir( new File( project.buildDir, 'javadocs/api' ) );
final int copyrightYear = new GregorianCalendar().get( Calendar.YEAR );
task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    destinationDir = javadocDir
    excludes = ['org/hibernate/jpamodelgen/xml/jaxb/**']
    // need to update the javadic classpath and add the main compilation directory to avoid missing classes warnigns due to the
    // above excludes
    classpath = files( configurations.compile, "${buildDir}/classes/main" )
    maxMemory = '512m'
    configure( options ) {
        stylesheetFile = rootProject.file( 'src/config/javadoc/stylesheet.css' )
        windowTitle = 'Hibernate JPA 2 Metamodel Generator JavaDocs'
        docTitle = "Hibernate JPA 2 Metamodel Generator JavaDocs ($project.version)"
        bottom = "Copyright &copy; 2001-$copyrightYear <a href=\"http://redhat.com\">Red Hat, Inc.</a>  All Rights Reserved."
        use = true
        links = [ 'http://download.oracle.com/javase/6/docs/api/', 'http://download.oracle.com/javaee/6/api/' ]
    }

    doLast {
        copy {
            from rootProject.file( 'src/config/javadoc/images' )
            into new File( javadocDir, "/images" )
        }
    }
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Docbook
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/*jdocbook {
    useRelativeImageUris = false

    format('html_single') {
        finalName = "index.html"
        stylesheet = "classpath:/xslt/org/hibernate/jdocbook/xslt/xhtml-single.xsl"
    }

    format('html') {
        finalName = "index.html"
        stylesheet = "classpath:/xslt/org/hibernate/jdocbook/xslt/xhtml.xsl"
    }

    dependencies {   
        jdocbookXsl      libraries.pressgang_xslt
        jdocbookXsl      libraries.pressgang_fonts
        jdocbookStyles   libraries.hibernate_docbook_style
        jdocbookStyles   libraries.jboss_docbook_style
    }

    manual {
        masterSourceDocumentName = 'master.xml'
    }
}

stageStyles_manual.doLast {
    logger.lifecycle( "Staging images")
    copy {
        from project.file( 'src/main/docbook/manual/en-US/images' )
        into project.file( "${buildDir}/docbook/stage/manual/images" )
        include '*.png'
        includeEmptyDirs = false
    }
}*/

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Release
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
distributions {
    main {
        baseName = 'hibernate-jpamodelgen-dist'
        contents {
            from rootProject.file( 'README.md' )
            from rootProject.file( 'license.txt' )
            from rootProject.file( 'changelog.txt' )
            
            into('lib') {
                from ( "${buildDir}/libs" ) {
                  exclude( '*-sources.jar' )  
                }
            }

            // javadocs
            into('docs/api') {
                from javadocDir
            }

            //  docbook
            into('docs/reference') {
                from "${buildDir}/docbook/publish/manual/en-US"
            }

            into( 'project' ) {
                from ( rootProject.projectDir ) {
                    exclude( '.git' )
                    exclude( '.gitignore' )
                    exclude( 'README.md')
                    exclude( 'changelog.txt' )
                    exclude( 'license.txt' )
                    exclude( 'gradle' )
                    exclude( 'gradlew' )
                    exclude( 'gradlew.bat' )
                    exclude( 'wrapper/*' )
                    exclude( '**/.gradle/**' )
                    exclude( '**/target/**' )
                    exclude( '.idea' )
                    exclude( '**/*.ipr' )
                    exclude( '**/*.iml' )
                    exclude( '**/*.iws' )
                    exclude( '**/atlassian-ide-plugin.xml' )
                    exclude( '**/.classpath' )
                    exclude( '**/.project' )
                    exclude( '**/.settings' )
                }
            }
        }
    }
}

distZip.dependsOn build,javadocs //,buildDocs
distTar.dependsOn build,javadocs //,buildDocs
distTar {
    compression = Compression.GZIP
}

task buildBundles(type: Task, dependsOn: [distZip,distTar]) {
    description = "Builds all release bundles"
}

task release(dependsOn: [publish,buildBundles]) {
    description = "Execute all release tasks"
}




